<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classlibcellml_1_1ImportSource" kind="class" language="C++" prot="public">
    <compoundname>libcellml::ImportSource</compoundname>
    <basecompoundref refid="classlibcellml_1_1Entity" prot="public" virt="non-virtual">libcellml::Entity</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; ImportSource &gt;</basecompoundref>
    <includes refid="importsource_8h" local="no">importsource.h</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a21256fb5dc6658b793da0dcd53493922" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::ImportSource::~ImportSource</definition>
        <argsstring>() override</argsstring>
        <name>~ImportSource</name>
        <qualifiedname>libcellml::ImportSource::~ImportSource</qualifiedname>
        <briefdescription>
<para>Destructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a867dca6a472e22044f11e7cc67865fd5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::ImportSource::ImportSource</definition>
        <argsstring>(const ImportSource &amp;rhs)=delete</argsstring>
        <name>ImportSource</name>
        <qualifiedname>libcellml::ImportSource::ImportSource</qualifiedname>
        <param>
          <type>const <ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1aadc4323d0cc9ce14d48f23416d4d146e" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>libcellml::ImportSource::ImportSource</definition>
        <argsstring>(ImportSource &amp;&amp;rhs) noexcept=delete</argsstring>
        <name>ImportSource</name>
        <qualifiedname>libcellml::ImportSource::ImportSource</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1aa92b2073d7ebda9dbe10a57ee18d5b46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref> &amp;</type>
        <definition>ImportSource &amp; libcellml::ImportSource::operator=</definition>
        <argsstring>(ImportSource rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>libcellml::ImportSource::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="46" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a5f7bf0c6308d50a79ded21dbeb311a71" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool libcellml::ImportSource::doEquals</definition>
        <argsstring>(const EntityPtr &amp;other) const override</argsstring>
        <name>doEquals</name>
        <qualifiedname>libcellml::ImportSource::doEquals</qualifiedname>
        <reimplements refid="classlibcellml_1_1Entity_1af6d64c59045be4e5f1751c289cb6508d">doEquals</reimplements>
        <param>
          <type>const <ref refid="namespacelibcellml_1abc54532bee96378fd9caabd0d50f615e" kindref="member">EntityPtr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Virtual implementation method for equals,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="128" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a017f6e1e5223f6f347e8942c4321a3d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::ImportSource::ImportSource</definition>
        <argsstring>()</argsstring>
        <name>ImportSource</name>
        <qualifiedname>libcellml::ImportSource::ImportSource</qualifiedname>
        <briefdescription>
<para>Constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="131" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a7e11735b191ae2e06858d886b587a20d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ImportSourceImpl *</type>
        <definition>ImportSourceImpl * libcellml::ImportSource::pFunc</definition>
        <argsstring>()</argsstring>
        <name>pFunc</name>
        <qualifiedname>libcellml::ImportSource::pFunc</qualifiedname>
        <briefdescription>
<para>Forward declaration for pImpl idiom,. </para>
        </briefdescription>
        <detaileddescription>
<para>Getter for private implementation pointer,. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="135" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a9119ab9c8826443c53bbd998eea8bf4e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ImportSourceImpl *</type>
        <definition>const ImportSourceImpl * libcellml::ImportSource::pFunc</definition>
        <argsstring>() const</argsstring>
        <name>pFunc</name>
        <qualifiedname>libcellml::ImportSource::pFunc</qualifiedname>
        <briefdescription>
<para>Const getter for private implementation pointer,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="136" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a9f0901504cdca1697ef0af59736f19e8" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1ac2c4e6d1793d7214616c1548d8a9f502" kindref="member">ImportSourcePtr</ref></type>
        <definition>static ImportSourcePtr libcellml::ImportSource::create</definition>
        <argsstring>() noexcept</argsstring>
        <name>create</name>
        <qualifiedname>libcellml::ImportSource::create</qualifiedname>
        <briefdescription>
<para>Create a <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory method to create an <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput>. Create an import source with::</para>
<para>ImportSourcePtr importSource = <ref refid="classlibcellml_1_1ImportSource_1a9f0901504cdca1697ef0af59736f19e8" kindref="member">libcellml::ImportSource::create()</ref>;</para>
<para><simplesect kind="return"><para>A smart pointer to an <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="58" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a627356cbc3fcfc634ed09c39c3ebf319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string libcellml::ImportSource::url</definition>
        <argsstring>() const</argsstring>
        <name>url</name>
        <qualifiedname>libcellml::ImportSource::url</qualifiedname>
        <briefdescription>
<para>Get the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>&apos;s URL. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>&apos;s URL set in this instance. If no source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> URL is set then return an empty string.</para>
<para><simplesect kind="return"><para>The URL of the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> if set otherwise the emtpy string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="68" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a20e79d5983654383405264b7f95e86d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::ImportSource::setUrl</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>setUrl</name>
        <qualifiedname>libcellml::ImportSource::setUrl</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>&apos;s URL. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>&apos;s URL that this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> refers to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>&apos;s URL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1ac40e2e964b8b9a24d576e6093112d0e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a8964f62e8f622cfd511f6a3acd9ce628" kindref="member">ModelPtr</ref></type>
        <definition>ModelPtr libcellml::ImportSource::model</definition>
        <argsstring>() const</argsstring>
        <name>model</name>
        <qualifiedname>libcellml::ImportSource::model</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> that resolves the import. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> which has been assigned to resolve this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput>. If no <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> has been assigned then return the <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="return"><para>The <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> used to resolve this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="87" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1aad56f5f97bcea60dbc5b5e11584a21ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::ImportSource::setModel</definition>
        <argsstring>(const ModelPtr &amp;model)</argsstring>
        <name>setModel</name>
        <qualifiedname>libcellml::ImportSource::setModel</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a8964f62e8f622cfd511f6a3acd9ce628" kindref="member">ModelPtr</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Provide the <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> used to resolve this import. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the provided <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> to resolve this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput>, which should correspond to the <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> identified by this import.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> to use in resolving this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1aed6c439ec91ff88f13ace1fe5e15e124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::ImportSource::removeModel</definition>
        <argsstring>()</argsstring>
        <name>removeModel</name>
        <qualifiedname>libcellml::ImportSource::removeModel</qualifiedname>
        <briefdescription>
<para>Remove the model from this import source. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the reference to a model from this import source. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1afb499960db9128dfe610698bbc6d5f3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::ImportSource::hasModel</definition>
        <argsstring>() const</argsstring>
        <name>hasModel</name>
        <qualifiedname>libcellml::ImportSource::hasModel</qualifiedname>
        <briefdescription>
<para>Test if this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> is resolved. </para>
        </briefdescription>
        <detaileddescription>
<para>Method to test if this <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> has been resolved, i.e. the source <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> has been assigned. Returns <computeroutput>true</computeroutput> if the <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> is resolved otherwise returns <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref></computeroutput> has been resolved, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1ImportSource_1a0b4eafeede3dd1cae6ded17a440f05f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1ac2c4e6d1793d7214616c1548d8a9f502" kindref="member">ImportSourcePtr</ref></type>
        <definition>ImportSourcePtr libcellml::ImportSource::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>libcellml::ImportSource::clone</qualifiedname>
        <briefdescription>
<para>Create a clone of this import source. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a full separate copy of this import source without copying the parent.</para>
<para><simplesect kind="return"><para>a new <computeroutput>ImportSourcePtr</computeroutput> to the cloned import source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/importsource.h" line="125" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classlibcellml_1_1ImportSource" kindref="compound">ImportSource</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The import source class is for defining a location at which a CellML model is expected to be obtainable (the <computeroutput>source</computeroutput>). The import source also acts as a handle to indicate that imported entities originate from the same instance of that imported source. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>libcellml::Entity</label>
        <link refid="classlibcellml_1_1Entity"/>
      </node>
      <node id="1">
        <label>libcellml::ImportSource</label>
        <link refid="classlibcellml_1_1ImportSource"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::enable_shared_from_this&lt; ImportSource &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>libcellml::Entity</label>
        <link refid="classlibcellml_1_1Entity"/>
      </node>
      <node id="1">
        <label>libcellml::ImportSource</label>
        <link refid="classlibcellml_1_1ImportSource"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::enable_shared_from_this&lt; ImportSource &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libcellml/importsource.h" line="36" column="1" bodyfile="libcellml/importsource.h" bodystart="41" bodyend="137"/>
    <listofallmembers>
      <member refid="classlibcellml_1_1ImportSource_1a0b4eafeede3dd1cae6ded17a440f05f5" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>clone</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a9f0901504cdca1697ef0af59736f19e8" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>create</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a5f7bf0c6308d50a79ded21dbeb311a71" prot="private" virt="virtual"><scope>libcellml::ImportSource</scope><name>doEquals</name></member>
      <member refid="classlibcellml_1_1Entity_1aaf1f5a51be3e2fcc22113b2c2428967c" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>Entity</name></member>
      <member refid="classlibcellml_1_1Entity_1a5ccd682791b20cc0431cd3abe265f734" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>Entity</name></member>
      <member refid="classlibcellml_1_1Entity_1ae20d00ec2f8b44c6874ca43a46fb84a1" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>equals</name></member>
      <member refid="classlibcellml_1_1ImportSource_1afb499960db9128dfe610698bbc6d5f3e" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>hasModel</name></member>
      <member refid="classlibcellml_1_1Entity_1a05439119b7eeab2fc61f8aa5a86eb092" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>id</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a867dca6a472e22044f11e7cc67865fd5" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>ImportSource</name></member>
      <member refid="classlibcellml_1_1ImportSource_1aadc4323d0cc9ce14d48f23416d4d146e" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>ImportSource</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a017f6e1e5223f6f347e8942c4321a3d5" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>ImportSource</name></member>
      <member refid="classlibcellml_1_1ImportSource_1ac40e2e964b8b9a24d576e6093112d0e3" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>model</name></member>
      <member refid="classlibcellml_1_1ImportSource_1aa92b2073d7ebda9dbe10a57ee18d5b46" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>operator=</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a7e11735b191ae2e06858d886b587a20d" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>pFunc</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a9119ab9c8826443c53bbd998eea8bf4e" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>pFunc</name></member>
      <member refid="classlibcellml_1_1Entity_1a959de09716024274913a396cf76b9076" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>removeId</name></member>
      <member refid="classlibcellml_1_1ImportSource_1aed6c439ec91ff88f13ace1fe5e15e124" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>removeModel</name></member>
      <member refid="classlibcellml_1_1Entity_1a13bdf688cdf007be5abad5dc628fd4ad" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>setId</name></member>
      <member refid="classlibcellml_1_1ImportSource_1aad56f5f97bcea60dbc5b5e11584a21ec" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>setModel</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a20e79d5983654383405264b7f95e86d6" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>setUrl</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a627356cbc3fcfc634ed09c39c3ebf319" prot="public" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>url</name></member>
      <member refid="classlibcellml_1_1Entity_1a5f2e6419f17f23f551bcd1ada87986b3" prot="public" virt="pure-virtual"><scope>libcellml::ImportSource</scope><name>~Entity</name></member>
      <member refid="classlibcellml_1_1ImportSource_1a21256fb5dc6658b793da0dcd53493922" prot="private" virt="non-virtual"><scope>libcellml::ImportSource</scope><name>~ImportSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
