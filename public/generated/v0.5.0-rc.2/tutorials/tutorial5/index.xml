<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/index.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="tutorial5"></target>
    <section ids="tutorial-5-annotation-tools tutorial5" names="tutorial\ 5:\ annotation\ tools tutorial5">
        <title>Tutorial 5: Annotation tools</title>
        <container classes="shortlist">
            <paragraph>By the time you have worked through this tutorial you will be able to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Parse a CellML file into a <literal classes="code" language="">Model</literal> instance;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Determine the type of item which has a given id;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the <literal classes="code" language="">Annotator</literal> class to retrieve an item using only its id string;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Repair duplicated id strings within the model scope; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Automatically generate and assign unique ids to any or all items.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <section ids="requirements" names="requirements">
            <title>Requirements</title>
            <container classes="directorylist">
                <paragraph><strong>C++ resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="401b8d450f99919675ecd02493097527/CMakeLists.txt" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="c9a77c8a78096bbee48cdf6af02e64b7/tutorial5.cpp" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="tutorial5.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial5.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="63d634ab9a6c4bb2543a5b9ab785969b/tutorial5_complete.cpp" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="tutorial5_complete.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial5_complete.cpp</literal></download_reference> the completed tutorial code; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="671589e0c1b0eb2849b65b2f33b85d90/utilities.h" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.h" reftype="download" refwarn="False"><literal classes="xref download">utilities.h</literal></download_reference> and <download_reference filename="0ce19d601e38791d06861735a2cc883a/utilities.cpp" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">utilities.cpp</literal></download_reference> Utility functions for use in the tutorials.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>Python resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="4ee4b9cb248ae69d599297c5ba1efaa2/tutorial5.py" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="tutorial5.py" reftype="download" refwarn="False"><literal classes="xref download">tutorial5.py</literal></download_reference> Either the skeleton code, or ..</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="4527e1b58c1aa8107ee75e86ce09b5fc/tutorial5_complete.py" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="tutorial5_complete.py" reftype="download" refwarn="False"><literal classes="xref download">tutorial5_complete.py</literal></download_reference> the completed tutorial code; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="afb8c75e98c7d2c158a13c29a8d7995f/utilities.py" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.py" reftype="download" refwarn="False"><literal classes="xref download">utilities.py</literal></download_reference>  Utility functions for use in the tutorials.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>CellML resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="7020d725044c84e8ee0bb81e558b30a9/MysteryModel.cellml" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="MysteryModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">MysteryModel.cellml</literal></download_reference> file to read; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="c6bfd7055bb132920fde54c0470fc429/AnotherMysteryModel.cellml" refdoc="tutorial5/index" refdomain="" refexplicit="True" reftarget="AnotherMysteryModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">AnotherMysteryModel.cellml</literal></download_reference> its import dependency.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
        </section>
        <section ids="background" names="background">
            <title>Background</title>
            <paragraph>“Marco Polo” is a game played with many people in a swimming pool.
                One person calls “Marco” with their eyes closed.
                Others answer “Polo” and the first person must find them by following the sound.
                In this tutorial you are given id strings and a mystery CellML model file.
                We will work through how the <literal classes="code" language="">Annotator</literal> class can be used to locate the desired objects.</paragraph>
        </section>
        <section ids="step-1-parse-the-mystery-model" names="step\ 1:\ parse\ the\ mystery\ model">
            <title>Step 1: Parse the mystery model</title>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Read the file “MysteryModel.cellml” into a string.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Create a <literal classes="code" language="">Parser</literal> item.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Use the parser to deserialise the contents of the string you’ve read and return the model.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.d</strong> Check that the parser has not raised any issues.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  1.a 
    //      Read the mystery file, MysteryModel.cellml.
    std::ifstream inFile(inFileName);
    std::stringstream inFileContents;
    inFileContents &lt;&lt; inFile.rdbuf();

    //  1.b 
    //      Create a Parser item.
    auto parser = libcellml::Parser::create();

    //  1.c 
    //      Use the parser to deserialise the contents of the string you've read
    //      and return the model.
    auto model = parser-&gt;parseModel(inFileContents.str());

    //  1.d 
    //      Check that the parser has not raised any issues.
    printIssues(parser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  1.a
    #      Read the mystery file, MysteryModel.cellml.
    with open(model_file) as f:
        content = f.read()

    #  1.b
    #      Create a Parser item.
    parser = Parser()

    #  1.c
    #      Use the parser to deserialise the contents of the string you've read
    #      and return the model.
    model = parser.parseModel(content)

    #  1.d 
    #      Check that the parser has not raised any issues.
    print_issues(parser)

</literal_block>
            </container>
        </section>
        <section ids="step-2-retrieve-an-item-with-a-unique-id" names="step\ 2:\ retrieve\ an\ item\ with\ a\ unique\ id">
            <title>Step 2: Retrieve an item with a unique id</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator">Annotator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=setModel">setModel</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=item">item</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=issueCount">issueCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=issue">issue</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Tutorial functions</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>C++: <literal classes="code" language="">cellmlElementTypeAsString</literal> will return a string version of the <literal classes="code" language="">CellmlElementType</literal> enumeration</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Python: <literal classes="code" language="">cellmlElementTypeAsString</literal></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create an <literal classes="code" language="">Annotator</literal> item and use its <literal classes="code" language="">setModel</literal> function to pass in the parsed mystery model.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>In C++: The <literal classes="code" language="">item</literal> function returns a <literal classes="code" language="">libcellml::AnyItem</literal>, a <literal classes="code" language="">std::pair</literal> whose first attribute is a <literal classes="code" language="">libcellml::CellmlElementType</literal> enumeration; and second attribute is a <literal classes="code" language="">std::any</literal> cast of the item itself.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In Python: The <literal classes="code" language="">item</literal> function returns a tuple.
                            The first item is a <literal classes="code" language="">CellmlElementType</literal> enumeration, the second is the item itself.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  2.a
    //      Create an Annotator item and use the setModel function to pass in the parsed
    //      mystery model.
    auto annotator = libcellml::Annotator::create();
    annotator-&gt;setModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  2.a
    #      Create an Annotator item and use the setModel function to pass in the parsed
    #      mystery model.
    annotator = Annotator()
    annotator.setModel(model)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Retrieve the item with an id of “marco”.
                    Use the helper function to convert the enumeration of its type into a string, and print to the terminal.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The item with ID 'marco' is a VARIABLE</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Check that the annotator has not reported any issues.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.d</strong> (C++ only) Cast the second attribute of the macro item into a libcellml::VariablePtr item using <literal classes="code" language="">std::any_cast</literal>.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  2.b
    //      Retrieve the item with an id of "marco".  Use the helper function
    //      cellmlElementTypeAsString to convert the enumeration of its type into a
    //      string for printing to the terminal.
    libcellml::AnyCellmlElementPtr marcoItem = annotator-&gt;item("marco");
    std::cout &lt;&lt; "The item with ID 'marco' is a " &lt;&lt; cellmlElementTypeAsString(marcoItem-&gt;type()) &lt;&lt; std::endl;

    //  2.c
    //      Check that the annotator has not reported any issues.
    printIssues(annotator);

    //  2.d
    //      Now that we know the marco item's type using its first attribute (it should
    //      be a libcellml::CellmlElementType::VARIABLE) we can call variable() to 
    //      get the varaible from the marcoItem.
    auto marcoVariable = marcoItem-&gt;variable();

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  2.b
    #      Retrieve the item with an id of 'marco'.  Use the helper function
    #      cellmlElementTypeAsString to convert the enumeration of its type into a
    #      string for printing to the terminal.
    marco_item = annotator.item('marco')
    print("The item with ID 'marco' is a {}".format(cellmlElementTypeAsString(marco_item.type())))
    
    # The item with ID 'marco' is a variable

    #  2.c
    #      Check that the annotator has not reported any issues.
    print_issues(annotator)

    #  2.d
    #      Now that we know the marco item's type using its first attribute (it should
    #      be a CellmlElementType.VARIABLE) we can name its second attribute so we know
    #      what it is.
    marco_variable = marco_item.variable()

</literal_block>
            </container>
        </section>
        <section ids="step-3-retrieve-items-whose-id-are-not-unique" names="step\ 3:\ retrieve\ items\ whose\ id\ are\ not\ unique">
            <title>Step 3: Retrieve items whose id are not unique</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator">Annotator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=items">items</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=isUnique">isUnique</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=assignId">assignId</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Now try the same procedure to find the item with id of “polo”.
                    Retrieve the item and print its type to the terminal.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The type of item with ID "polo" is UNDEFINED</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> The item type returned is <literal classes="code" language="">UNDEFINED</literal> … so we need to check what the annotator has to say about it.
                    Retrieve the issues from the annotator and print them to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  3.a
    //      Now try the same procedure to find the item with id of "polo".
    //      Retrieve the item and print its type to the terminal.
    auto poloItem = annotator-&gt;item("polo");
    std::cout &lt;&lt; "The type of item with ID 'polo' is " &lt;&lt; cellmlElementTypeAsString(poloItem-&gt;type()) &lt;&lt; std::endl;

    //  3.b
    //      The item type returned is libcellml::CellmlElementType::UNDEFINED ... so we 
    //      need to check what the annotator has to say about it. 
    //      Retrieve the issues from the annotator and print to the terminal.
    printIssues(annotator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  3.a
    #      Now try the same procedure to find the item with id of 'polo'.
    #      Retrieve the item and print its type to the terminal.
    polo_item = annotator.item('polo')
    print("The type of item with ID 'polo' is {}".format(cellmlElementTypeAsString(polo_item.type())))

    #  3.b
    #      The item type returned is CellmlElementType.UNDEFINED ... so we 
    #      need to check what the annotator has to say about it. 
    #      Retrieve the issues from the annotator and print to the terminal.
    print_issues(annotator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 1 issues:
Issue [0] is a WARNING:
    description: The id 'polo' occurs 6 times in the model so a unique item cannot be located.
    stored item type: UNDEFINED</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Since the id is not unique, we need to retrieve all items with that id for investigation.
                    Use the <literal classes="code" language="">items</literal> function to retrieve the vector of items with id “polo”, and iterate through it printing the different types to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  3.c
    //      Use the items function to retrieve the vector of items with id "polo", 
    //      and iterate through it printing the different types to the terminal.
    auto poloItems = annotator-&gt;items("polo");
    std::cout &lt;&lt; "The items with an id of 'polo' have types of:" &lt;&lt; std::endl;
    size_t index = 0;
    for (const auto &amp;item : poloItems) {
        std::cout &lt;&lt; "  - [" &lt;&lt; index &lt;&lt; "] " &lt;&lt; cellmlElementTypeAsString(item-&gt;type()) &lt;&lt; std::endl;
        ++index; 
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  3.c
    #      Use the items function to retrieve the vector of items with id 'polo', 
    #      and iterate through it printing the different types to the terminal.
    polo_items = annotator.items('polo')
    print("The items with an id of 'polo' have types of:")
    index = 0
    for item in polo_items:
        print("  - [{}] {}".format(index, cellmlElementTypeAsString(item.type())))
        index += 1

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The items with an id of 'polo' have types of:
  - [0] UNITS
  - [1] UNITS
  - [2] UNIT
  - [3] VARIABLE
  - [4] RESET
  - [5] RESET_VALUE</literal_block>
            <paragraph>The item we want has type <literal classes="code" language="">UNIT</literal>, and we’d like it to be unique so that we can annotate it properly.
                We need to change the other items to have other (also unique) ids.
                The <literal classes="code" language="">Annotator</literal> class can create a unique id for an item using the <literal classes="code" language="">assignId</literal> function.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.d</strong> Assign an automatic id to all of the items with id “polo”, except for the one whose type is <literal classes="code" language="">UNIT</literal>.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.e</strong> Check that the id of “polo” is now unique in the model by calling the <literal classes="code" language="">isUnique</literal> function.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  3.d
    //      Assign an automatic id to all of the items with id "polo", except for the one whose
    //      type is UNIT.
    poloItem = poloItems.at(2);
    poloItems.erase(poloItems.begin() + 2);

    for (const auto &amp;item : poloItems) {
        annotator-&gt;assignId(item);
    }

    //  3.e
    //      Check that the id of "polo" is now unique in the model by calling the 
    //      isUnique function.
    annotator-&gt;isUnique("polo");

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  3.d
    #      Assign an automatic id to all of the items with id 'polo', except for the one whose
    #      type is UNIT.
    polo_unit = polo_items.pop(2)
    for item in polo_items:
        annotator.assignId(item)

    #  3.e
    #      Check that the id of 'polo' is now unique in the model by calling the 
    #      isUnique function.
    annotator.isUnique('polo')

</literal_block>
            </container>
            <paragraph>Now we know that there is only one item in the model with id “polo”, and we also know that it has type <literal classes="code" language="">UNIT</literal>.
                In circumstances where you know the type of the item with the id you’re fetching ahead of time, you can retrieve it without the need to cast using the direct functions according to type: these are listed below.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator">Annotator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=component">component</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=componentRef">componentRef</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=connection">connection</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=encapsulation">encapsulation</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=import">import</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=mapVariables">mapVariables</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=model">model</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=reset">reset</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=resetValue">resetValue</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=testValue">testValue</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=unit">unit</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=units">units</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=variable">variable</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Unit">Unit class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Unit?fName=units">units</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Unit?fName=index">index</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.f</strong> Retrieve the <literal classes="code" language="">Unit</literal> with id “polo” directly.
                    The <literal classes="code" language="">Unit</literal> class has two attributes:</paragraph>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal classes="code" language="">units()</literal> returns the parent <literal classes="code" language="">Units</literal> item; and</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal classes="code" language="">index()</literal> returns the index of this unit within its parent.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  3.f
    //      Retrieve the UnitsItem with id polo without casting.
    auto poloUnitsItem = annotator-&gt;unitsItem("polo");

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  3.f
    #      Retrieve the Units item with id polo without casting.
    polo_unit = annotator.unitsItem('polo')

</literal_block>
            </container>
        </section>
        <section ids="step-4-discover-items-whose-ids-are-unknown" names="step\ 4:\ discover\ items\ whose\ ids\ are\ unknown">
            <title>Step 4: Discover items whose ids are unknown</title>
            <paragraph>Now that we’ve found Marco and fixed the duplicates of Polo, we’d like to know what other ids are being used in this model.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator">Annotator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=ids">ids</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=duplicateIds">duplicateIds</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=itemCount">itemCount</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Use the <literal classes="code" language="">ids</literal> function to return a vector of id strings used in the model, and print them to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  4.a
    //      Use the Annotator::ids function to return a vector of id strings used in the model, and 
    //      print them to the terminal.
    std::cout &lt;&lt; "The id strings used in the model are:" &lt;&lt; std::endl;
    auto ids = annotator-&gt;ids();
    for(auto &amp;id :ids) {
        std::cout &lt;&lt; "  - '"&lt;&lt; id &lt;&lt; "'" &lt;&lt; std::endl;
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  4.a
    #      Use the Annotator.ids function to return a vector of id strings used in the model, and 
    #      print them to the terminal.
    print("The id strings used in the model are:")
    ids = annotator.ids()
    for id in ids:
        print("  - '{}'".format(id))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The id strings used in the model are:
    - "b4da55"
    - "b4da56"
    - "b4da57"
    - "b4da58"
    - "b4da59"
    - "i_am_a_component"
    - "marco"
    - "me_too"
    - "polo"
    - "someOtherDuplicatedId"
    - "someOtherId"
    - "whoAmIAndWhereDidIComeFrom"</literal_block>
            <paragraph>The hex strings printed are those which have been automatically generated by the <literal classes="code" language="">assignId</literal> function; we can also see the “marco” and “polo” ids as expected.</paragraph>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Use the <literal classes="code" language="">duplicateIds</literal> function to return a vector of those ids which have been duplicated in the model.
                    Use the <literal classes="code" language="">itemCount</literal> function to return the number of times each occurs, and print to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  4.b
    //      Use the duplicateIds function to return a vector of those ids which have been duplicated in 
    //      the model, and print them to the terminal.
    std::cout &lt;&lt; "Duplicated id strings are:" &lt;&lt; std::endl;
    auto duplicatedIds = annotator-&gt;duplicateIds();
    for(auto &amp;id :duplicatedIds) {
        std::cout &lt;&lt; "  - '" &lt;&lt; id &lt;&lt; "' occurs " &lt;&lt; annotator-&gt;itemCount(id) &lt;&lt; " times." &lt;&lt; std::endl;
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  4.b
    #      Use the duplicateIds function to return a vector of those ids which have been duplicated in 
    #      the model, and print them to the terminal.
    print("Duplicated id strings are:")
    duplicated_ids = annotator.duplicateIds()
    for id in duplicated_ids:
        print("  - '{}' occurs {} times.".format(id, annotator.itemCount(id)))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Duplicated id strings are:
- "someOtherDuplicatedId" occurs 3 times</literal_block>
        </section>
        <section ids="step-5-trace-provenance-of-imported-items" names="step\ 5:\ trace\ provenance\ of\ imported\ items">
            <title>Step 5: Trace provenance of imported items</title>
            <paragraph>The final step is to make sure that imported items can have their annotations tracked back to their sources too.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Importer">Importer class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Importer?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Importer?fName=resolveImports">resolveImports</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity">ImportedEntity class</reference> (applies to both the <literal classes="code" language="">Units</literal> and the <literal classes="code" language="">Component</literal> class)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity?fName=isImport">isImport</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity?fName=importReference">importReference</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity?fName=importSource">importSource</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource">ImportSource class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource?fName=model">model</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource?fName=url">url</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.a</strong> Retrieve an item with id of “whoAmIAndWhereDidIComeFrom” and print its item type to the terminal.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The type of item with ID "whoAmIAndWhereDidIComeFrom" is UNITS</literal_block>
            <container classes="dothis">
                <paragraph><strong>5.b</strong> Cast it into a CellML item of the appropriate type.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.c</strong> Use its <literal classes="code" language="">isImport()</literal> function to verify that it is imported.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.d</strong> Create an <literal classes="code" language="">Importer</literal> instance and use it to resolve this model’s imports.
                    Check that it has not raised any issues.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  5.a
    //      Retrieve an item with id of "whoAmIAndWhereDidIComeFrom" and print its item type
    //      to the terminal.
    auto whoAmIAndWhereDidIComeFrom = annotator-&gt;item("whoAmIAndWhereDidIComeFrom");
    std::cout &lt;&lt; "The type of item with ID 'whoAmIAndWhereDidIComeFrom' is " &lt;&lt; cellmlElementTypeAsString(whoAmIAndWhereDidIComeFrom-&gt;type()) &lt;&lt; std::endl;
    
    //  5.b
    //      Call the appropriate API to get the CellML item.
    auto units = whoAmIAndWhereDidIComeFrom-&gt;units();

    //  5.c
    //      Use the Units::isImport() function to verify that it is imported.
    units-&gt;isImport();

    //  5.d
    //      Create an Importer instance and use it to resolve this model's imports.
    //      Check that it has not raised any issues.
    auto importer = libcellml::Importer::create();
    importer-&gt;resolveImports(model, inFileName.remove_filename());
    printIssues(importer);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  5.a
    #      Retrieve an item with id of 'whoAmIAndWhereDidIComeFrom' and print its item type
    #      to the terminal.
    who_am_i = annotator.item('whoAmIAndWhereDidIComeFrom')
    print("The type of item with ID 'whoAmIAndWhereDidIComeFrom' is {}".format(cellmlElementTypeAsString(who_am_i.type())))
    
    #  5.b
    #      Cast it into a CellML item of the appropriate type.
    units = who_am_i.units()

    #  5.c
    #      Use the Component.isImport() function to verify that it is imported.
    units.isImport()

    #  5.d
    #      Create an Importer instance and use it to resolve this model's imports.
    #      Check that it has not raised any issues.
    importer = Importer()
    importer.resolveImports(model, os.path.dirname(model_file))
    print_issues(importer)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.e</strong> Retrieve all the information needed to locate any annotations on the original item:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>the URL from which it was imported; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>the id of the item in the original model.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Print these to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  5.e
    //      Retrieve all the information needed to locate any annotations on the 
    //      original item:
    //           - the URL from which it was imported; and
    //           - the id of the item in the original model.
    //      Print these to the terminal.
    auto url = units-&gt;importSource()-&gt;url();
    auto reference = units-&gt;importReference();
    auto importedId = units-&gt;importSource()-&gt;model()-&gt;units(reference)-&gt;id();

    std::cout &lt;&lt; "The units with id 'whoAmIAndWhereDidIComeFrom' came from:" &lt;&lt; std::endl;
    std::cout &lt;&lt; "  - url: " &lt;&lt; url &lt;&lt; std::endl;
    std::cout &lt;&lt; "  - id: " &lt;&lt; importedId &lt;&lt; std::endl;
    
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  5.e
    #      Retrieve all the information needed to locate any annotations on the 
    #      original item:
    #           - the URL from which it was imported and
    #           - the id of the item in the original model.
    #      Print these to the terminal.
    url = units.importSource().url()
    reference = units.importReference()
    imported_id = units.importSource().model().units(reference).id()

    print("The units with id 'whoAmIAndWhereDidIComeFrom' came from:")
    print('  - url: {}'.format(url))
    print('  - id: {}'.format(imported_id))
    
</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The units with id "whoAmIAndWhereDidIComeFrom" came from:
- url: AnotherMysteryModel.cellml
- id: i_am_a_units_item</literal_block>
        </section>
        <section ids="step-6-bulk-operations" names="step\ 6:\ bulk\ operations">
            <title>Step 6: Bulk operations</title>
            <container classes="dothis">
                <paragraph><strong>6.a</strong> Loop through all of the model’s components and print their id to the terminal.
                    Use the <literal classes="code" language="">assignIds</literal> function with an item type of <literal classes="code" language="">libcellml::CellmlElementType::COMPONENT</literal> to give all of the items of that type a new unique id.
                    Print the ids again and notice that the blanks have been filled with automatically generated strings, but existing ids are unchanged.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  6.a
    //      Loop through all of the model's components and print their id to the terminal.
    //      Use the assignIds string with an item type (libcellml::CellmlElementType::COMPONENT)
    //      to give all of the items of that type a new unique id.  Print the ids again and
    //      notice that the blanks have been filled with automatically generated strings, 
    //      but existing ids are unchanged. 
    std::cout &lt;&lt; "Before automatic assignment the components have ids:" &lt;&lt; std::endl;
    for(size_t i = 0; i &lt; model-&gt;componentCount(); ++i) {
        std::cout &lt;&lt; "  - '" &lt;&lt; model-&gt;component(i)-&gt;id() &lt;&lt; "'" &lt;&lt; std::endl;
    }

    annotator-&gt;assignIds(libcellml::CellmlElementType::COMPONENT);

    std::cout &lt;&lt; "After automatic assignment the components have ids:" &lt;&lt; std::endl;
    for(size_t i = 0; i &lt; model-&gt;componentCount(); ++i) {
        std::cout &lt;&lt; "  - '" &lt;&lt; model-&gt;component(i)-&gt;id() &lt;&lt; "'" &lt;&lt;std::endl;
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  6.a
    #      Loop through all of the model's components and print their id to the terminal.
    #      Use the assignIds string with an item type (CellmlElementType.COMPONENT)
    #      to give all of the items of that type a new unique id.  Print the ids again and
    #      notice that the blanks have been filled with automatically generated strings, 
    #      but existing ids are unchanged. 
    print("Before automatic assignment the components have ids:")
    for index in range(0, model.componentCount()):
        print("  - '{}'".format(model.component(index).id()))

    annotator.assignIds(CellmlElementType.COMPONENT)

    print("After automatic assignment the components have ids:")
    for index in range(0, model.componentCount()):
        print("  - '{}'".format(model.component(index).id()))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Before automatic assignment the components have ids:
    - "i_am_a_component"
    - ""
    - ""
    - ""
    - "me_too"
    - ""

After automatic assignment the components have ids:
    - "i_am_a_component"
    - "b4da5a"
    - "b4da5b"
    - "b4da5c"
    - "me_too"
    - "b4da5d"</literal_block>
            <paragraph>Finally, we decide that it’s too cold for swimming, and want to nuke all the ids and go home.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator">Annotator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=clearAllIds">clearAllIds</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Annotator?fName=clearAllIds">assignAllIds</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.b</strong> Use the <literal classes="code" language="">clearAllIds</literal> function to completely remove all id strings from the model.
                    Check that they have gone by repeating step 4.a to print any ids to the terminal.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">There are 0 ids in the model.</literal_block>
            <paragraph>Go looking for Marco, but he’s gone home already.</paragraph>
            <container classes="dothis">
                <paragraph><strong>6.c</strong> Retrieve the item with id “marco” and print its type to the terminal.
                    Retrieve and print any issues in the annotator to the terminal.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The type of item with ID "marco" is UNDEFINED

The Annotator has found 1 issues:
Warning[0]:
    Description: Could not find an item with an id of 'marco' in the model.</literal_block>
            <paragraph>Now you regret nuking our friends and make plans to return tomorrow and annotate everything.</paragraph>
            <container classes="dothis">
                <paragraph><strong>6.d</strong> Use the <literal classes="code" language="">assignAllIds</literal> function to give an automatic id to everything which doesn’t already have one (which is everything now!).</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.e</strong> Try to retrieve duplicated ids from the annotator as in step 4.b, and check that it returns an empty list.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">There are 0 duplicated ids in the model.</literal_block>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.cpp" xml:space="preserve">    //  6.b
    //      Finally, we decide that it's too cold for swimming, and want to nuke all the ids
    //      and go home.
    //      Use the clearAllIds function to completely remove all id strings from the model.
    //      Check that they have gone by repeating step 4.a to print any ids to the terminal.
    annotator-&gt;clearAllIds();
    ids = annotator-&gt;ids();
    std::cout &lt;&lt; "There are " &lt;&lt; ids.size() &lt;&lt; " ids in the model." &lt;&lt; std::endl;

    //  6.c
    //      Go looking for Marco, but he's gone home already.
    //      Try and retrieve an item with id "marco" and check that a null pointer is returned.
    //      Retrieve and print any issues to the terminal.
    marcoItem = annotator-&gt;item("marco");
    std::cout &lt;&lt; "The type of item with ID 'marco' is " &lt;&lt; cellmlElementTypeAsString(marcoItem-&gt;type()) &lt;&lt; std::endl;
    printIssues(annotator);

    //  6.d
    //      Regret nuking our friends and make plans to return tomorrow and
    //      annotate everything.  Use the assignAllIds function to give an automatic
    //      id to everything in the model.
    annotator-&gt;assignAllIds();

    //  6.e
    //      Try to retrieve duplicated ids from the annotator as in step 4.b, and
    //      check that it returns an empty list.
    duplicatedIds = annotator-&gt;duplicateIds();
    std::cout &lt;&lt; "There are " &lt;&lt; duplicatedIds.size() &lt;&lt; " duplicated ids left in the model." &lt;&lt; std::endl;

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/tutorial5/tutorial5_complete.py" xml:space="preserve">    #  6.b
    #      Finally, we decide that it's too cold for swimming, and want to nuke all the ids
    #      and go home.
    #      Use the clearAllIds function to completely remove all id strings from the model.
    #      Check that they have gone by repeating step 4.a to print any ids to the terminal.
    annotator.clearAllIds()
    ids = annotator.ids()
    print('There are {} ids in the model.'.format(len(ids)))

    #  6.c
    #      Go looking for Marco, but he's gone home already.
    #      Try and retrieve an item with id 'marco' and check that a null pointer is returned.
    #      Retrieve and print any issues to the terminal.
    marco_item = annotator.item('marco')
    print("The type of item with ID 'marco' is {}".format(cellmlElementTypeAsString(marco_item.type())))
    print_issues(annotator)

    #  6.d
    #      Regret nuking our friends and make plans to return tomorrow and
    #      annotate everything.  Use the assignAllIds function to give an automatic
    #      id to everything in the model.
    annotator.assignAllIds()

    #  6.e
    #      Try to retrieve duplicated ids from the annotator as in step 4.b, and
    #      check that it returns an empty list.
    duplicated_ids = annotator.duplicateIds()
    print('There are {} duplicated ids left in the model.'.format(len(duplicated_ids)))

</literal_block>
            </container>
        </section>
    </section>
</document>
