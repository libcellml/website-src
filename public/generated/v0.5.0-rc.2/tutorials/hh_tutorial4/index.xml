<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/index.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="generatemembranemodel"></target>
    <section ids="hodgkin-huxley-4-generating-code-from-a-model generatemembranemodel" names="hodgkin-huxley\ 4:\ generating\ code\ from\ a\ model generatemembranemodel">
        <title>Hodgkin-Huxley 4: Generating code from a model</title>
        <container classes="shortlist">
            <paragraph>By the time you’ve worked through this tutorial you will be able to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Use the Generator class to create C or Python code representing a CellML model.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>This tutorial assumes you’re already comfortable with:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Parsing an existing CellML file into a model instance;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Using the diagnostic <literal classes="code" language="">Validator</literal> class to check for syntactic issues;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Using the <literal classes="code" language="">Importer</literal> class to resolve and flatten imports; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Using the <literal classes="code" language="">Analyser</literal> class to check for mathematical issues in the model.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Writing to files.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <container classes="directorylist">
            <paragraph><strong>C++ resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="e7e7f6b37510a4366923dc755c63f253/CMakeLists.txt" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="b7223da89f41a7bd3717f1d1dabab3d5/generateMembraneModel.cpp" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="generateMembraneModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">generateMembraneModel.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="7910b4eaf77b44874dfdcd6eb8a842c3/generateMembraneModel_complete.cpp" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="generateMembraneModel_complete.cpp" reftype="download" refwarn="False"><literal classes="xref download">generateMembraneModel_complete.cpp</literal></download_reference> the completed tutorial code; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="0ce19d601e38791d06861735a2cc883a/utilities.cpp" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">utilities.cpp</literal></download_reference> and <download_reference filename="671589e0c1b0eb2849b65b2f33b85d90/utilities.h" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.h" reftype="download" refwarn="False"><literal classes="xref download">utilities.h</literal></download_reference> Helper functions.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>Python resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="a167bbd1bdbc7a13fc4afc37e8384868/generateMembraneModel.py" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="generateMembraneModel.py" reftype="download" refwarn="False"><literal classes="xref download">generateMembraneModel.py</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="fb44e8624aa1c115767e5c473b1dee1c/generateMembraneModel_complete.py" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="generateMembraneModel_complete.py" reftype="download" refwarn="False"><literal classes="xref download">generateMembraneModel_complete.py</literal></download_reference> the completed tutorial code;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="afb8c75e98c7d2c158a13c29a8d7995f/utilities.py" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.py" reftype="download" refwarn="False"><literal classes="xref download">utilities.py</literal></download_reference> Helper functions.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>CellML resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="87375cc1a83c7403fe50bc5c07e72e7a/GateModel.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="GateModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">GateModel.cellml</literal></download_reference> the generic gate model (from Tutorial 1);</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="f724bc3a76d18ad6d16255d1e0a82f44/PotassiumChannelModel.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="PotassiumChannelModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">PotassiumChannelModel.cellml</literal></download_reference> the potassium channel model (from Tutorial 2);</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="1612d053aac92b5b08d2cf5c2b3ae2e3/SodiumChannelModel.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="SodiumChannelModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">SodiumChannelModel.cellml</literal></download_reference> the sodium channel model (from Tutorial 3);</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="6d8192f81296dfd0030656a392646171/LeakageModel.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="LeakageModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">LeakageModel.cellml</literal></download_reference> an import dependency representing current leakage;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="fa85bb42606bb4d46bb94837603aad49/MembraneModelController.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="MembraneModelController.cellml" reftype="download" refwarn="False"><literal classes="xref download">MembraneModelController.cellml</literal></download_reference> an import dependency for the membrane model controller; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="c2a5f3e0d748f146f9284a40fe29ca50/MembraneModel.cellml" refdoc="hh_tutorial4/index" refdomain="" refexplicit="True" reftarget="MembraneModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">MembraneModel.cellml</literal></download_reference> the file to parse.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <paragraph>All of the ingredients have been assembled for us to parse a membrane model so that it can be turned into runnable code using the code generation functionality.
            We will parse the model, resolve its imports, flatten into an import-free model, validate, analyse, and generate.
            By this stage you should be familiar with most of these processes: we’ll go through the code generation in detail at the end.</paragraph>
        <section ids="step-1-parse-the-existing-membrane-model" names="step\ 1:\ parse\ the\ existing\ membrane\ model">
            <title>Step 1: Parse the existing membrane model</title>
            <container classes="dothis">
                <paragraph>Parse the model in the “MembraneModel.cellml” file provided and print its contents to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  1.a 
    //      Read a CellML file into a std::string.
    std::ifstream inFile(inFileName);
    std::stringstream inFileContents;
    inFileContents &lt;&lt; inFile.rdbuf();

    //  1.b 
    //      Create a Parser item. 
    auto parser = libcellml::Parser::create();

    //  1.c 
    //      Use the parser to deserialise the contents of the string you've read and return the model.
    auto model = parser-&gt;parseModel(inFileContents.str());

    //  1.d 
    //      Print the parsed model to the terminal for viewing.
    printModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  1.a 
    #       Read a CellML file into a std.string.
    with open(model_file) as f:
        content = f.read()

    #  1.b 
    #       Create a Parser item. 
    parser = Parser()

    #  1.c 
    #       Use the parser to deserialise the contents of the string you've read and return the model.
    model = parser.parseModel(content)

    #  1.d 
    #       Print the parsed model to the terminal for viewing.
    print_model(model, False)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'MembraneModel'
UNITS: 5 custom units
    [0]: mV
    [1]: ms
    [2]: mS_per_cm2
    [3]: microA_per_cm2
    [4]: microF_per_cm2
COMPONENTS: 2 components
    [0]: controller &lt;--- imported from: 'controller' in 'Controller.cellml'
        VARIABLES: 2 variables
            [0]: i_stim
                  └──&gt; membrane:i_stim [microA_per_cm2]
            [1]: t
                  └──&gt; membrane:t [ms]
    [1]: membrane
        VARIABLES: 3 variables
            [0]: t [ms]
                  └──&gt; membraneEquations:t [ms], controller:t
            [1]: i_tot [microA_per_cm2]
                  └──&gt; membraneEquations:i_tot [microA_per_cm2]
            [2]: i_stim [microA_per_cm2]
                  └──&gt; membraneEquations:i_stim [microA_per_cm2], controller:i_stim
        COMPONENT membrane has 2 child components:
            [0]: membraneEquations
                VARIABLES: 8 variables
                    [0]: V [mV]
                          └──&gt; membraneParameters:V [mV], sodiumChannel:V, potassiumChannel:V, leakage:V
                    [1]: t [ms]
                          └──&gt; membrane:t [ms], sodiumChannel:t, potassiumChannel:t
                    [2]: i_K [microA_per_cm2]
                          └──&gt; potassiumChannel:i_K
                    [3]: i_Na [microA_per_cm2]
                          └──&gt; sodiumChannel:i_Na
                    [4]: i_L [microA_per_cm2]
                          └──&gt; leakage:i_L
                    [5]: i_stim [microA_per_cm2]
                          └──&gt; membrane:i_stim [microA_per_cm2]
                    [6]: i_tot [microA_per_cm2]
                          └──&gt; membrane:i_tot [microA_per_cm2]
                    [7]: Cm [microF_per_cm2]
                          └──&gt; membraneParameters:Cm [microF_per_cm2]
                COMPONENT membraneEquations has 3 child components:
                    [0]: sodiumChannel &lt;--- imported from: 'sodiumChannel' in 'SodiumChannelModel.cellml'
                        VARIABLES: 3 variables
                            [0]: t
                                  └──&gt; membraneEquations:t [ms]
                            [1]: i_Na
                                  └──&gt; membraneEquations:i_Na [microA_per_cm2]
                            [2]: V
                                  └──&gt; membraneEquations:V [mV]
                    [1]: potassiumChannel &lt;--- imported from: 'potassiumChannel' in 'PotassiumChannelModel.cellml'
                        VARIABLES: 3 variables
                            [0]: t
                                  └──&gt; membraneEquations:t [ms]
                            [1]: i_K
                                  └──&gt; membraneEquations:i_K [microA_per_cm2]
                            [2]: V
                                  └──&gt; membraneEquations:V [mV]
                    [2]: leakage &lt;--- imported from: 'leakage' in 'LeakageModel.cellml'
                        VARIABLES: 4 variables
                            [0]: i_L
                                  └──&gt; membraneEquations:i_L [microA_per_cm2]
                            [1]: g_L
                            [2]: E_L
                            [3]: V
                                  └──&gt; membraneEquations:V [mV]
            [1]: membraneParameters
                VARIABLES: 2 variables
                    [0]: Cm [microF_per_cm2], initial = 1
                          └──&gt; membraneEquations:Cm [microF_per_cm2]
                    [1]: V [mV], initial = 1
                          └──&gt; membraneEquations:V [mV]</literal_block>
        </section>
        <section ids="step-2-resolve-the-imports-and-flatten" names="step\ 2:\ resolve\ the\ imports\ and\ flatten">
            <title>Step 2: Resolve the imports and flatten</title>
            <paragraph>In all of the other tutorials we’ve used a flattened model only to analyse its mathematics.
                This time, we need to keep the flattened version and will use this as input to the code generator.
                Resolve the imports, and create a flattened version of the model.
                We do not expect any issues to be reported by the importer.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create an Importer instance and use it to resolve the imports in your model.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Check that the importer has not raised any issues.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Use the importer to create a flattened version of the model.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  2.a
    //      Create an Importer instance and use it to resolve the imports in your model.
    auto importer = libcellml::Importer::create();
    importer-&gt;resolveImports(model, inFileName.remove_filename());

    //  2.b
    //      Check that the importer has not raised any issues.
    printIssues(importer);

    //  2.c
    //      Use the importer to create a flattened version of the model.
    auto flatModel = importer-&gt;flattenModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  2.a
    #      Create an Importer instance and use it to resolve the imports in your model.
    importer = Importer()
    importer.resolveImports(model, import_path)

    #  2.b
    #      Check that the importer has not raised any issues.
    print_issues(importer)

    #  2.c
    #      Use the importer to create a flattened version of the model.
    flatModel = importer.flattenModel(model)

</literal_block>
            </container>
        </section>
        <section ids="step-3-validate-and-analyse-the-flattened-model" names="step\ 3:\ validate\ and\ analyse\ the\ flattened\ model">
            <title>Step 3: Validate and analyse the flattened model</title>
            <paragraph>You know what to do … we do not expect any issues to be raised by either the validator or the analyser.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Create a <literal classes="code" language="">Validator</literal> instance, pass in the flattened model, and check that there are no issues raised.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Create an <literal classes="code" language="">Analyser</literal> instance, pass in the flattened model, and check that there are no issues raised.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  3.a
    //      Create a Validator instance, pass in the flattened model, and check that
    //      there are no issues raised.
    auto validator = libcellml::Validator::create();
    validator-&gt;validateModel(flatModel);
    printIssues(validator);

    //  3.b
    //      Create an Analyser instance,pass in the flattened model, and check that
    //      there are no issues raised.
    auto analyser = libcellml::Analyser::create();
    analyser-&gt;analyseModel(flatModel); 
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  3.a
    #      Create a Validator instance, pass in the flattened model, and check that
    #      there are no issues raised.
    validator = Validator()
    validator.validateModel(flatModel)
    print_issues(validator)

    #  3.b
    #      Create an Analyser instance, pass in the flattened model, and check that
    #      there are no issues raised.
    analyser = Analyser()
    analyser.analyseModel(flatModel) 
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-4-generate-code-and-output" names="step\ 4:\ generate\ code\ and\ output">
            <title>Step 4: Generate code and output</title>
            <paragraph>The <literal classes="code" language="">Generator</literal> is a translator class that will change the CellML model and its MathML equations into a representation in another language.
                This is done using a <literal classes="code" language="">GeneratorProfile</literal> to specify a dictionary of mathematical operations.
                Two profiles are already defined; for C++ and for Python.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1GeneratorProfile">GeneratorProfile class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1GeneratorProfile?fName=create">create</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator">Generator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator?fName=setProfile">setProfile</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Create a <literal classes="code" language="">Generator</literal> instance.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Create a GeneratorProfile object, and use the constructor argument of the <literal classes="code" language="">libcellml::GeneratorProfile::Profile</literal> enum for the language you want (C or PYTHON).</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.c</strong> Use the generator’s <literal classes="code" language="">setProfile</literal> function to pass in the profile item you just created.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  4.a 
    //      Create a Generator instance.  
    auto generator = libcellml::Generator::create();

</literal_block>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  4.b
    //      Create a GeneratorProfile object, and use the constructor argument of the
    //      libcellml::GeneratorProfile::Profile enum for the language you want (C or PYTHON).
    auto profile = libcellml::GeneratorProfile::create(libcellml::GeneratorProfile::Profile::C);

    //  4.c 
    //      Use the generator's setProfile function to pass in the profile item you just created.
    generator-&gt;setProfile(profile);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  4.a 
    #       Create a Generator instance.  
    generator = Generator()

</literal_block>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  4.b 
    #       The generator uses a GeneratorProfile item to set up a translation between the
    #       model stored as CellML and the language of your choice (currently C or Python).
    #       Create a GeneratorProfile object, and use the constructor argument of the
    #       GeneratorProfile.Profile enum for the language you want (C or PYTHON).
    profile = GeneratorProfile(GeneratorProfile.Profile.PYTHON)

    #  4.c 
    #       Use the generator's setProfile function to pass in the profile item you just created.
    generator.setProfile(profile)

</literal_block>
            </container>
            <paragraph>Instead of submitting a <literal classes="code" language="">Model</literal> item (as we do for all other classes), the <literal classes="code" language="">Generator</literal> class will work from something which has already been processed by the <literal classes="code" language="">Analyser</literal> class: an <literal classes="code" language="">AnalyserModel</literal> object.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser">Analyser class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser?fName=model">model</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator">Generator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator?fName=setModel">setModel</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator?fName=implementationCode">implementationCode</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Generator?fName=interfaceCode">interfaceCode</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1GeneratorProfile">GeneratorProfile class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1GeneratorProfile?fName=setInterfaceFileNameString">setInterfaceFileNameString</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.d</strong> Retrieve the analysed model using the Analyser::model() function, and submit to the generator using the Generator::setModel(analysedModel) function.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.e</strong> (C only) If you’re using the C profile then you have the option at this stage to specify the file name of the interface file you’ll create in the next step.
                    This means that the two files will be prepared to link to one another without manual editing later.
                    You can do this by specifying the header file name in the <literal classes="code" language="">GeneratorProfile</literal> item using its <literal classes="code" language="">setInterfaceFileNameString</literal> function.
                    This will need to be the same as the file which you write to in step 4.g below.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  4.d
    //      Retrieve the analysed model using the Analyser::model() function, and submit 
    //      to the generator using the Generator::setModel(analysedModel) function.
    generator-&gt;setModel(analyser-&gt;model());

</literal_block>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  4.e
    //      You can do this by specifying the header file name in the GeneratorProfile item
    //      using the setInterfaceFileNameString("yourHeaderFileNameHere.h") function.
    //      This will need to be the same as the file which you write to in step 4.g below.
    profile-&gt;setInterfaceFileNameString("HodgkinHuxleyModel.h");

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  4.d 
    #       Instead of submitting a Model item (as we do for all other classes), 
    #       the Generator class will work from something which has already been processed 
    #       by the Analyser class: an AnalyserModel object.  
    #       Retrieve the analysed model using the Analyser.model() function, and submit 
    #       to the generator using the Generator.setModel(analysedModel) function.
    generator.setModel(analyser.model())

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.f</strong> Implementation code is the bulk of the model, and contains all the equations, variables, units etc.
                    This is needed for both of the available profiles, and would normally be stored in a <literal classes="code" language="">*.cpp</literal> or <literal classes="code" language="">*.py</literal> file.
                    Use the <literal classes="code" language="">implementationCode</literal> function to return the implementation code as a string, and write it to a file with the appropriate extension.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.g</strong> (C only) Interface code is the header needed by the C profile to define data types.
                    Use the <literal classes="code" language="">interfaceCode</literal> function to return interface code as a string and write it to a <literal classes="code" language="">*.h</literal> header file.
                    This needs to be the same filename as you specified in step 4.e above.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.cpp" xml:space="preserve">    //  4.f
    //      Use the Generator::implementationCode() function to return the implementation 
    //      code as a string, and write it to a file with the appropriate extension.
    std::ofstream outFile("HodgkinHuxleyModel.cpp");
    outFile &lt;&lt; generator-&gt;implementationCode();
    outFile.close();

    //  4.g 
    //      (C only) Interface code is the header needed by the C profile to define data types.
    //      Use the Generator::interfaceCode() function to return interface code as a string
    //      and write it to a *.h header file.  This needs to be the same filename as you 
    //      specified in step 4.e above.
    outFile.open("HodgkinHuxleyModel.h");
    outFile &lt;&lt; generator-&gt;interfaceCode();
    outFile.close();

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/website-tested-docs/hh_tutorial4/generateMembraneModel_complete.py" xml:space="preserve">    #  4.f 
    #       Implementation code is the bulk of the model, and contains all the equations, 
    #       variables, units etc.  This is needed for both of the available profiles, and 
    #       would normally be stored in a *.cpp or *.py file.  
    #       Use the Generator.implementationCode() function to return the implementation 
    #       code as a string, and write it to a file with the appropriate extension.
    with open('HodgkinHuxleyModel.py', 'w') as f:
        f.write(generator.implementationCode())

    #  4.g 
    #       (C profile only) Interface code is the header needed by the C profile to define data types.
    #       Use the Generator.interfaceCode() function to return interface code as a string
    #       and write it to a *.h header file.  This needs to be the same filename as you 
    #       specified in step 4.e above.
    # with open('HodgkinHuxleyModel.h', 'w') as f:
    #     f.write(generator.interfaceCode())

</literal_block>
            </container>
        </section>
    </section>
</document>
