<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/hsor001/Projects/buildbot/instances/worker_mac/Finalise_Release_Builder/user-guides/resources/snippets/snippet_annotator_find_duplicate_ids.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="snippet-annotator-find-duplicate-ids"></target>
    <container classes="toggle" ids="snippet-annotator-find-duplicate-ids" names="snippet_annotator_find_duplicate_ids">
        <container classes="header-left">
            <paragraph>Locate items with duplicate ids</paragraph>
        </container>
        <paragraph>The <literal classes="code" language="">Annotator</literal> functionality can be used to report id strings which have been duplicated within a modelâ€™s scope, as well as to return all items associated with a duplicated id string.</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" classes="closeable" role="tablist">
                <button aria-controls="panel-0-Qysr" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-Qysr" name="Qysr" role="tab" tabindex="0">C++</button>
                <button aria-controls="panel-0-UHl0aG9u" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-UHl0aG9u" name="UHl0aG9u" role="tab" tabindex="-1">Python</button>
            </div>
            <div aria-labelledby="tab-0-Qysr" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-Qysr" name="Qysr" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Create an Annotator instance.
auto annotator = libcellml::Annotator::create();

// Create a model, with the id string "duplicateId" used on a component
// and a variable item, and an id string "anotherDuplicateId" on a units
// and encapsulation item.
auto model = libcellml::Model::create("myModelName");
auto component = libcellml::Component::create("myComponentName");
auto variable = libcellml::Variable::create("myVariableName");
auto units = libcellml::Units::create("myUnitsName");

model-&gt;addComponent(component);
model-&gt;addUnits(units);
component-&gt;addVariable(variable);

// Set the ids.
component-&gt;setId("duplicateId");
variable-&gt;setId("duplicateId");
units-&gt;setId("anotherDuplicateId");
model-&gt;setEncapsulationId("anotherDuplicateId");

// Pass the model to the annotator and build the index.
annotator-&gt;buildModelIndex(model);

// Retrieve a list of duplicated ids from the annotator.
auto duplicateIdList = annotator-&gt;duplicateIds();

// Now duplicateIdList is a vector of strings of the ids which are duplicated.
// In this example it will contain "duplicateId", and "anotherDuplicateId".</literal_block>
            </div>
            <div aria-labelledby="tab-0-UHl0aG9u" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-UHl0aG9u" name="UHl0aG9u" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Create an Annotator instance.
annotator = Annotator()

# Create a model, with the id string "duplicateId" used on a component
# and a variable item, and an id string "anotherDuplicateId" on a units
# and encapsulation item.
model = Model("myModelName")
component = Component("myComponentName")
variable = Variable("myVariableName")
units = Units("myUnitsName")

model.addComponent(component)
model.addUnits(units)
component.addVariable(variable)

# Set the ids.
component.setId("duplicateId")
variable.setId("duplicateId")
units.setId("anotherDuplicateId")
model.setEncapsulationId("anotherDuplicateId")

# Pass the model to the annotator and build the index.
annotator.buildModelIndex(model)

# Retrieve a list of duplicated ids from the annotator.
duplicateIdList = annotator.duplicateIds()

# Now duplicateIdList is a vector of strings of the ids which are duplicated.
# In this example it will contain "duplicateId", and "anotherDuplicateId".</literal_block>
            </div>
        </container>
    </container>
</document>
