<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/installation/build_from_source.rst">
    <target refid="build-from-source"></target>
    <section ids="build-and-install-from-source build-from-source" names="build\ and\ install\ from\ source build_from_source">
        <title>Build and install from source</title>
        <topic classes="contents local" ids="contents" names="contents">
            <title>Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="gather-the-prerequisites">0: Gather the prerequisites</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id2" refid="create-the-libcellml-library">1: Create the libCellML library</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id3" refid="build-and-install-the-library">2: Build and install the library</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id4" refid="test-the-installation-c">3: Test the installation: C++</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id5" refid="test-the-installation-python">4: Test the installation: Python</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="gather-the-prerequisites" names="0:\ gather\ the\ prerequisites">
            <title refid="id1">0: Gather the prerequisites</title>
            <paragraph>If you’re working on a Windows or Linux machine you’ll need to have <reference internal="False" refuri="http://www.xmlsoft.org/">libxml2</reference> installed.
                It can be downloaded from <reference internal="False" refuri="https://github.com/OpenCMISS-Dependencies/libxml2/releases">this page</reference>.
                This is present by default on MacOS operating systems.</paragraph>
            <paragraph>If you’d like to build the Python bindings, you’ll need to have access to <reference internal="False" refuri="http://www.swig.org/">SWIG</reference>.
                If you will only be working in C++ then you don’t need this step.</paragraph>
        </section>
        <section ids="create-the-libcellml-library" names="1:\ create\ the\ libcellml\ library">
            <title refid="id2">1: Create the libCellML library</title>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Create an empty folder and navigate into it.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">mkdir MyLibCellMLDirectory
cd MyLibCellMLDirectory</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Clone the branch from the libCellML library github repository.
                    This will create and populate a folder called <literal classes="code">libcellml</literal>.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">git clone -b develop --single-branch https://github.com/cellml/libcellml.git</literal_block>
            </container>
            <paragraph>Your folder structure is now:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    └─ libcellml
        └─ ( ... contains the files you cloned )</literal_block>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Rename the cloned <literal classes="code">libcellml</literal> folder to be <literal classes="code">source</literal>, and create sibling folders called <literal classes="code">build</literal> and <literal classes="code">install</literal>:</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">mv libcellml source
mkdir build
mkdir install</literal_block>
            </container>
            <paragraph>Your folder structure should now look like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    ├─ build
    │   └─ ( ... empty )
    ├─ install
    │   └─ ( ... empty )
    └─ source
        └─ ( ... contains the files you cloned )</literal_block>
        </section>
        <section ids="build-and-install-the-library" names="2:\ build\ and\ install\ the\ library">
            <title refid="id3">2: Build and install the library</title>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Navigate into the <literal classes="code">MyLibCellMLDirectory/build</literal> directory to make the library:</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cd build
cmake -DINSTALL_PREFIX=../install -S=../source -B=.
make -j</literal_block>
            </container>
            <container classes="infospec">
                <paragraph>CMake uses command line flags as well as the arguments’ positions to determine what each of your inputs means.
                    In the example above the <literal classes="code">-S</literal> flag indicates the source directory, and the <literal classes="code">-B</literal> flag indicates the build directory.
                    By default, if these flags are not present, CMake will take the first unflagged item as the source directory (if there are none then it uses the current directory), and the second (if there is no second then it uses the current directory) as the build directory.
                    Thus, if called from the build directory, then these are equivalent:</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cmake -DINSTALL_PREFIX=../install -S=../source -B=.  # Explicitly specifying directories.
cmake -DINSTALL_PREFIX=../install ../source .        # First argument is the source, second argument is the build.
cmake -DINSTALL_PREFIX=../install ../source          # First argument is the source, build is the current directory.</literal_block>
            </container>
            <paragraph>You should see output which runs through some checks (make sure they all pass), and finishes with a message like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">   ( ... lots of checks ... )
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/YourName/MyLibCellMLDirectory/build</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> From the same location, install the library:</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">make -j install</literal_block>
            </container>
            <paragraph>You should see output which finishes with a list of library and include files like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Install the project...
-- Install configuration: "Debug"
-- Installing: /Users/YourName/MyLibCellMLDirectory/build/../install/lib/libcellmld.0.2.0.dylib
-- Installing: /Users/YourName/MyLibCellMLDirectory/build/../install/lib/libcellmld.dylib
    ...</literal_block>
            <paragraph>Your directory structure should now look like:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    ├─ build
    │   └─ ( ... lots of files from the build )
    ├─ install
    │   ├─ include
    │   └─ lib
    └─ source
        └─ ( ... the files you cloned in step 1.b )</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.c (optional)</strong> If you intend to use the Python bindings, you will need to install the Python version of the local library using pip3.
                    Again, this expects that you are still in the <literal classes="code">build</literal> directory.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">pip3 install -e src/bindings/python</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.d (optional)</strong> Run the tests on the library from the <literal classes="code">build</literal> directory.
                    Expect to see that all tests have passed.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">make test</literal_block>
            </container>
        </section>
        <section ids="test-the-installation-c" names="3:\ test\ the\ installation:\ c++">
            <title refid="id4">3: Test the installation: C++</title>
            <paragraph>If you are intending to use the Python library only, please skip to <reference internal="True" refid="test-python-installation"><inline classes="std std-ref">Test the installation: Python</inline></reference>.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Download the following files to a folder, and navigate into it:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="4208148021aad310e7582b1095697942/CMakeLists.txt" refdoc="installation/build_from_source" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="ab2a40ecc76b0150f6728aea883ad792/test_install.cpp" refdoc="installation/build_from_source" refdomain="" refexplicit="True" reftarget="test_install.cpp" reftype="download" refwarn="False"><literal classes="xref download">test_install.cpp</literal></download_reference></paragraph>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cd wherever/you/downloaded/them</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Run CMake to create the Makefile.
                    Note that you will need to specify the path to the <literal classes="code">install</literal> directory you created in step 2.b using the <literal classes="code">-DINSTALL_PREFIX</literal> flag.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cmake -DINSTALL_PREFIX=path/to/your/install</literal_block>
            </container>
            <paragraph>If this is correct you should see an output ending similar to this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">-- The C compiler identification is AppleClang 10.0.1.10010046
-- The CXX compiler identification is AppleClang 10.0.1.10010046
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: path/to/your/current/directory</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Now build the <literal classes="code">test_install</literal> example</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">make -j</literal_block>
            </container>
            <paragraph>You should see an output similar to this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Scanning dependencies of target test_install
[ 50%] Building CXX object CMakeFiles/test_install.dir/test_install.cpp.o
[100%] Linking CXX executable test_install
[100%] Built target test_install</literal_block>
            <container classes="dothis">
                <block_quote>
                    <paragraph><strong>3.d</strong> Finally, run the program to output the welcome and version number of the linked libCellML installation:</paragraph>
                </block_quote>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">./test_install</literal_block>
            </container>
            <paragraph>You should see the output of:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">-----------------------------------------------
    Welcome to libCellML!
    This version number is 0.2.0
-----------------------------------------------</literal_block>
            <target refid="test-python-installation"></target>
        </section>
        <section ids="test-the-installation-python test-python-installation" names="4:\ test\ the\ installation:\ python test_python_installation">
            <title refid="id5">4: Test the installation: Python</title>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Download the file below and save it.
                    Navigate to the directory where it is saved.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="924bc5cd7fcd0080d83eecf139f0e652/test_install.py" refdoc="installation/build_from_source" refdomain="" refexplicit="True" reftarget="test_install.py" reftype="download" refwarn="False"><literal classes="xref download">test_install.py</literal></download_reference></paragraph>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cd wherever/you/downloaded/it</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Run the test script from here.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">python3 test_install.py</literal_block>
            </container>
            <paragraph>You should see the output of:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">-----------------------------------------------
    Welcome to libCellML!
    This version number is 0.2.0
-----------------------------------------------</literal_block>
            <container classes="dothis">
                <paragraph><strong>4.c</strong> Go and have a cuppa, you’re done!</paragraph>
            </container>
        </section>
    </section>
</document>
