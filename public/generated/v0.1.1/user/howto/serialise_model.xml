<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/serialise_model.rst">
    <target refid="serialise-model"></target>
    <section ids="parse-and-print-cellml-syntax serialise-model" names="parse\ and\ print\ cellml\ syntax serialise_model">
        <title>Parse and print CellML syntax</title>
        <target refid="parse-model"></target>
        <section ids="parse-from-a-cellml-format-file parse-model" names="parse\ from\ a\ cellml\ format\ file parse_model">
            <title>Parse from a CellML format file</title>
            <paragraph>The following code will read a file called <literal classes="code">sine_comparison.cellml</literal> and deserialise its contents into a <literal classes="code">Model</literal> instance.</paragraph>
            <paragraph>Note that both the <literal classes="code">Parser</literal> class and its opposite number, the <literal classes="code">Printer</literal> class, deal with strings rather than files.
                Youâ€™ll need to read the file into a string, and then use the string as input to the <literal classes="code">Parser</literal> item.</paragraph>
            <target refid="snippet-parse-model"></target>
            <container classes="toggle" ids="snippet-parse-model" names="snippet_parse_model">
                <container classes="header-left">
                    <paragraph>Parse a model from a CellML file</paragraph>
                </container>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                            <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/resources/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Parse a CellML file into a model.

    // Read the file containing the CellML model into a string.
    std::string inFileName = "simulationExample.cellml";
    std::ifstream inFile(inFileName);
    std::stringstream inFileContents;
    inFileContents &lt;&lt; inFile.rdbuf();

    std::cout &lt;&lt; "Opening the CellML file" &lt;&lt; std::endl;

    // Create a libCellML Parser, and use it to parse the fileContents
    // string and convert it into a CellML Model structure.
    auto parser = libcellml::Parser::create();
    auto model = parser-&gt;parseModel(inFileContents.str());
    printIssues(parser);

</literal_block>
                            <paragraph>Full context: <download_reference filename="89c84d26a969eb1182bbdc7a0ffbaf8a/simulationToolDev.cpp" refdoc="howto/serialise_model" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                            <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/resources/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Parse the model from a CellML file.

    # Create a libCellML Parser, and use it to parse the fileContents
    # string and convert it into a CellML Model structure.
    read_file = open("resources/simulationExample.cellml", "r")
    parser = Parser()
    model = parser.parseModel(read_file.read())
    print_issues_to_terminal(parser)

</literal_block>
                            <paragraph>Full context: <download_reference filename="b302646fbd7722934aed90a32900e1e2/simulationToolDev.py" refdoc="howto/serialise_model" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
            <target refid="print-model"></target>
        </section>
        <section ids="print-a-model-to-cellml-format print-model" names="print\ a\ model\ to\ cellml\ format print_model">
            <title>Print a model to CellML format</title>
            <paragraph>The <literal classes="code">Printer</literal> class has the opposite functionality to the <literal classes="code">Parser</literal> class.
                It accepts an existing <literal classes="code">ModelPtr</literal> and creates a <literal classes="code">string</literal> which can be written to a file.
                As with the <literal classes="code">Parser</literal> and the <literal classes="code">Validator</literal>, the <literal classes="code">Printer</literal> also records a collection of <literal classes="code">Issue</literal> items which can be accessed as shown below.</paragraph>
            <container classes="sphinx-tabs">
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>C++</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Create a Printer instance.
auto printer = libcellml::Printer::create();

// The output of the printModel function is a string representing the serialised input model.
std::string serialisedModelString = printer-&gt;printModel(model);

// Check the printer for issues.
assert(printer-&gt;issueCount() == 0);

// Write the serialised string to a file.
std::string outFileName = "my_printed_file.cellml";
std::ofstream outFile(outFileName);
outFile &lt;&lt; serialisedModelString;
outFile.close();</literal_block>
                </container>
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>Python</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">from libcellml import Printer

# Create a Printer instance.
printer = Printer()

# The output of the printModel function is a string representing the serialised input model.
serialised_model = printer.printModel(model)

# Check the printer for issues.
assert(printer.issueCount() == 0)

# Write the string to a file.
write_file = open("my_printed_file.cellml", "w")
write_file.write(serialised_model)
write_file.close()</literal_block>
                </container>
            </container>
            <paragraph>Details of any issues that the printer encounters and records can be retrieved as described on the <reference internal="True" refuri="check_model#get-issues"><inline classes="std std-ref">Retrieve Issue items</inline></reference> page.</paragraph>
        </section>
    </section>
</document>
