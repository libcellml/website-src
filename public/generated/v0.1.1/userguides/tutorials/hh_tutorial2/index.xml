<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/index.rst">
    <target refid="createpotassiumchannelmodel"></target>
    <section ids="hodgkin-huxley-2-creating-a-model-which-uses-imports createpotassiumchannelmodel" names="hodgkin-huxley\ 2:\ creating\ a\ model\ which\ uses\ imports createpotassiumchannelmodel">
        <title>Hodgkin-Huxley 2: Creating a model which uses imports</title>
        <container classes="shortlist">
            <paragraph>By the time you have worked through this tutorial you will be able to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Assemble a multi-component model using the API;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create a model which imports items from others;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Inter-connect the components using the equivalent variables functionality;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the diagnostic <literal classes="code">Validator</literal> class to identify errors in the model’s syntax;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the diagnostic <literal classes="code">Analyser</literal> class to identify errors in the model’s mathematical formulation; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Serialise the model to CellML format for output.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <container classes="directorylist">
            <paragraph><strong>C++ resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="e43a8f4e68f304e54b6b4e276c816b35/CMakeLists.txt" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="ab8125bd44b4690fd72c327a2921a1b5/createPotassiumChannelModel.cpp" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="createPotassiumChannelModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">createPotassiumChannelModel.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="ddc751728cf124a65386a2963c53e9a2/createPotassiumChannelModel_completed.cpp" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="createPotassiumChannelModel_completed.cpp" reftype="download" refwarn="False"><literal classes="xref download">createPotassiumChannelModel_completed.cpp</literal></download_reference> the completed tutorial code; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="81faf70fda5e0bba0b66e49012937716/utilities.cpp" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="../code/utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">utilities.cpp</literal></download_reference> and <download_reference filename="65650b252a46b77f6f0994abd8cd286e/utilities.h" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="../code/utilities.h" reftype="download" refwarn="False"><literal classes="xref download">utilities.h</literal></download_reference> Helper functions.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>Python resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="6766eb8f01c55682d4cc29cd096533f2/createPotassiumChannelModel.py" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="createPotassiumChannelModel.py" reftype="download" refwarn="False"><literal classes="xref download">createPotassiumChannelModel.py</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="47c20d0b63a89a04a53a60e0fe91f6b4/createPotassiumChannelModel_completed.py" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="createPotassiumChannelModel_completed.py" reftype="download" refwarn="False"><literal classes="xref download">createPotassiumChannelModel_completed.py</literal></download_reference> the completed tutorial code.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>CellML resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="1ba4a36cd15e144acca92d5c6502a743/GateModel.cellml" refdoc="tutorials/hh_tutorial2/index" refdomain="" refexplicit="True" reftarget="GateModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">GateModel.cellml</literal></download_reference> The generic gate model created in <reference internal="True" refuri="../hh_tutorial1/index#creategatemodel"><inline classes="std std-ref">Tutorial 1</inline></reference>.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <section ids="step-1-create-the-model" names="step\ 1:\ create\ the\ model">
            <title>Step 1: Create the model</title>
            <paragraph>The final structure of this model is shown in the diagram below.</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">model: PotassiumChannelModel
    component: controller &lt;-- imported from PotassiumChannelController.cellml, component 'controller'
    component: potassiumChannel
        component: potassiumChannelEquations
                component: nGateEquations
                    component: gateEquations &lt;-- imported from GateModel.cellml, component 'gateEquations'
                component: nGateParameters &lt;-- created here so that the parameters are specific to the nGateEquations.
        component: kChannelParameters</literal_block>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=addComponent">addComponent</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=addComponent">addComponent</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Create a <literal classes="code">Model</literal> item and name it appropriately.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Create a wrapping component and name it “potassiumChannel”.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Add the component to the model.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  1.a 
    //      Create a Model and name it appropriately.
    auto model = libcellml::Model::create("PotassiumChannelModel");

    //  1.b 
    //      Create a wrapping component and name it "potassiumChannel".
    auto kChannel = libcellml::Component::create("potassiumChannel");

    //  1.c 
    //      Add the component to the model.
    model-&gt;addComponent(kChannel);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  1.a 
    #      Create a Model and name it appropriately.
    model = Model('PotassiumChannelModel')

    #  1.b 
    #      Create a wrapping component and name it 'potassiumChannel'.
    k_channel = Component('potassiumChannel')

    #  1.c 
    #      Add the component to the model.
    model.addComponent(k_channel)

</literal_block>
            </container>
        </section>
        <section ids="step-2-create-a-potassium-channel-equations-component" names="step\ 2:\ create\ a\ potassium\ channel\ equations\ component">
            <title>Step 2: Create a potassium channel equations component</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=setMath">setMath</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=appendMath">appendMath</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create a <literal classes="code">Component</literal> instance for the equations and name it “potassiumChannelEquations”.
                    Add it to the wrapper component you created above.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.a 
    //      Create a Component instance for the equations and name it "potassiumChannelEquations".  
    //      Add it to the wrapper component you created above.
    auto kChannelEquations = libcellml::Component::create("potassiumChannelEquations");
    kChannel-&gt;addComponent(kChannelEquations);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.a 
    #      Create a Component instance for the equations and name it 'potassiumChannelEquations'.  
    #      Add it to the wrapper component you created above.
    k_channel_equations = Component('potassiumChannelEquations')
    k_channel.addComponent(k_channel_equations)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Define the maths inside the potassiumChannelEquations component.
                    This is a MathML 2 string (NB: higher versions of MathML are not supported), and is added to the component using <literal classes="code">setMath</literal> and <literal classes="code">appendMath</literal> functions.
                    Your string needs to contain the namespaces for MathML and for CellML: these have been provided for you in the mathHeader string above.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.b 
    //      Define the maths inside the potassiumChannelEquations component.
    std::string equationIK =
        "  &lt;apply&gt;&lt;eq/&gt;\n"
        "    &lt;ci&gt;i_K&lt;/ci&gt;\n"
        "    &lt;apply&gt;&lt;times/&gt;\n"
        "       &lt;apply&gt;&lt;power/&gt;\n"
        "           &lt;ci&gt;n&lt;/ci&gt;\n"
        "           &lt;cn cellml:units=\"dimensionless\"&gt;4&lt;/cn&gt;\n"
        "       &lt;/apply&gt;\n"
        "       &lt;ci&gt;g_K&lt;/ci&gt;\n"
        "       &lt;apply&gt;&lt;minus/&gt;\n"
        "           &lt;ci&gt;V&lt;/ci&gt;\n"
        "           &lt;ci&gt;E_K&lt;/ci&gt;\n"
        "       &lt;/apply&gt;\n"
        "    &lt;/apply&gt;\n"
        "  &lt;/apply&gt;\n";

    kChannelEquations-&gt;setMath(mathHeader);
    kChannelEquations-&gt;appendMath(equationIK);
    kChannelEquations-&gt;appendMath(mathFooter);
     
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.b 
    #      Define the maths inside the potassiumChannelEquations component.
    equation_iK = \
        '  &lt;apply&gt;&lt;eq/&gt;\n'\
        '    &lt;ci&gt;i_K&lt;/ci&gt;\n'\
        '    &lt;apply&gt;&lt;times/&gt;\n'\
        '       &lt;apply&gt;&lt;power/&gt;\n'\
        '           &lt;ci&gt;n&lt;/ci&gt;\n'\
        '           &lt;cn cellml:units="dimensionless"&gt;4&lt;/cn&gt;\n'\
        '       &lt;/apply&gt;\n'\
        '       &lt;ci&gt;g_K&lt;/ci&gt;\n'\
        '       &lt;apply&gt;&lt;minus/&gt;\n'\
        '           &lt;ci&gt;V&lt;/ci&gt;\n'\
        '           &lt;ci&gt;E_K&lt;/ci&gt;\n'\
        '       &lt;/apply&gt;\n'\
        '    &lt;/apply&gt;\n'\
        '  &lt;/apply&gt;\n'

    k_channel_equations.setMath(math_header)
    k_channel_equations.appendMath(equation_iK)
    k_channel_equations.appendMath(math_footer)
     
</literal_block>
            </container>
            <paragraph>Once the mathematics has been added to the component, and the component to the model, we can make use of the diagnostic messages within the <literal classes="code">Validator</literal> class to tell us what else needs to be done.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator">Validator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=validateModel">validateModel</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=issueCount">issueCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=issue">issue</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Create a <literal classes="code">Validator</literal> instance, and pass it your model for processing using the <literal classes="code">validateModel</literal> function.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.c 
    //      Once the mathematics has been added to the component, and the component to the 
    //      model, we can make use of the diagnostic messages within the Validator class
    //      to tell us what else needs to be done.  
    //      Create a Validator instance, and pass it your model for processing using the 
    //      validateModel function.  
    auto validator = libcellml::Validator::create();
    validator-&gt;validateModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.c 
    #      Once the mathematics has been added to the component, and the component to the 
    #      model, we can make use of the diagnostic messages within the Validator class
    #      to tell us what else needs to be done.  
    #      Create a Validator instance, and pass it your model for processing using the 
    #      validateModel function.  
    validator = Validator()
    validator.validateModel(model)

</literal_block>
            </container>
            <paragraph>Calling the validator does not return anything: we have to go looking for issues that it found during processing.
                When a problem is found, an <literal classes="code">Issue</literal> item is created containing:</paragraph>
            <container classes="shortlist">
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>a description string explaining the problem;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a URL at which more information is available;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>an std::any item relevant to the problem, if available;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a level indicator; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a cause indicator relevant to the stored item.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>We can use these issues as we need to.
                The simplest way is to print the descriptions to the terminal.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.d</strong> Retrieve the number of issues encountered using the <literal classes="code">issueCount</literal> function in the validator, then retrieve the issue items from the validator using their index and the <literal classes="code">issue(index)</literal> function.
                    Print their information to the terminal.
                    (Alternatively use the helper <literal classes="code">printIssues</literal> or <literal classes="code">print_issues</literal> function to do it for you).</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.d
    //      Retrieve the number of issues encountered using the validator-&gt;issueCount() function,
    //      then retrieve the issue items from the validator using their index and the validator-&gt;issue(index)
    //      function.
    std::cout &lt;&lt; "The validator has found " &lt;&lt; validator-&gt;issueCount() &lt;&lt; " issues." &lt;&lt; std::endl;
    for(size_t i = 0; i &lt; validator-&gt;issueCount(); ++i) {
        std::cout &lt;&lt; validator-&gt;issue(i)-&gt;description() &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; std::endl;

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.d
    #      Retrieve the number of issues encountered using the validator.issueCount() function,
    #      then retrieve the issue items from the validator using their index and the validator.issue(index)
    #      function.
    print('The validator has found {} issues.'.format(validator.issueCount()))
    for i in range(0, validator.issueCount()):
        print(validator.issue(i).description())
    print()

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The validator has found 5 issues.
MathML ci element has the child text 'i_K' which does not correspond with any variable names present in component 'potassiumChannelEquations'.
MathML ci element has the child text 'n' which does not correspond with any variable names present in component 'potassiumChannelEquations'.
MathML ci element has the child text 'g_K' which does not correspond with any variable names present in component 'potassiumChannelEquations'.
MathML ci element has the child text 'V' which does not correspond with any variable names present in component 'potassiumChannelEquations'.
MathML ci element has the child text 'E_K' which does not correspond with any variable names present in component 'potassiumChannelEquations'.</literal_block>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setUnits">setUnits</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=addVariable">addVariable</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=addUnits">addUnits</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units">Units class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=addUnit">addUnit</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.e</strong> Create the variables needed and add them to the potassium channel component.
                    Revalidate and expect errors related to variables without units.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.e 
    //      Create the variables needed and add them to the potassium channel component.
    //      Revalidate and expect errors related to variables without units.
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("E_K"));
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("i_K"));
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("g_K"));
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("V"));
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("t"));
    kChannelEquations-&gt;addVariable(libcellml::Variable::create("n"));

    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.e 
    #      Create the variables needed and add them to the potassium channel component.
    #      Revalidate and expect errors related to variables without units.
    k_channel_equations.addVariable(Variable('E_K'))
    k_channel_equations.addVariable(Variable('i_K'))
    k_channel_equations.addVariable(Variable('g_K'))
    k_channel_equations.addVariable(Variable('V'))
    k_channel_equations.addVariable(Variable('t'))
    k_channel_equations.addVariable(Variable('n'))

    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 12 issues:
Issue [0] is an ERROR:
    description: CellML identifiers must contain one or more basic Latin alphabetic characters.
    see section 1.3.1.1 in the CellML specification.
    stored item type: UNDEFINED
Issue [1] is an ERROR:
    description: Variable 'E_K' in component 'potassiumChannelEquations' does not have a valid units attribute. The attribute given is ''.
    see section 2.8.1.2 in the CellML specification.
    stored item type: VARIABLE

... etc ...</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.f</strong> Create the missing <literal classes="code">Units</literal> items and add them to the model. These are:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>milli-volts;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>milli-seconds;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>milli-moles;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>micro-Amperes per square centimetre; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>milli-Siemens per square centimetre.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.f 
    //      Create the missing Units items and add them to the model. These are:
    //      - milli-volts
    //      - milli-seconds
    //      - milli-moles
    //      - micro-Amperes per square centimetre
    //      - milli-Siemens per square centimetre

    auto mV = libcellml::Units::create("mV");
    mV-&gt;addUnit("volt", "milli");

    auto microA_per_cm2 = libcellml::Units::create("microA_per_cm2");
    microA_per_cm2-&gt;addUnit("ampere", "micro");
    microA_per_cm2-&gt;addUnit("metre", "centi", -2.0);

    auto mS_per_cm2 = libcellml::Units::create("milliS_per_cm2");
    mS_per_cm2-&gt;addUnit("siemens", "milli");
    mS_per_cm2-&gt;addUnit("metre", "centi", -2.0);

    auto ms = libcellml::Units::create("ms");
    ms-&gt;addUnit("second", "milli");

    auto mM = libcellml::Units::create("mM");
    mM-&gt;addUnit("mole", "milli");

    model-&gt;addUnits(ms);
    model-&gt;addUnits(mV);
    model-&gt;addUnits(mM);
    model-&gt;addUnits(microA_per_cm2);
    model-&gt;addUnits(mS_per_cm2);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.f 
    #      Create the missing Units items and add them to the model. These are:
    #      - milli-volts
    #      - milli-seconds
    #      - milli-moles
    #      - micro-Amperes per square centimetre
    #      - milli-Siemens per square centimetre

    mV = Units('mV')
    mV.addUnit('volt', 'milli')

    microA_per_cm2 = Units('microA_per_cm2')
    microA_per_cm2.addUnit('ampere', 'micro')
    microA_per_cm2.addUnit('metre', 'centi', -2.0)

    mS_per_cm2 = Units('milliS_per_cm2')
    mS_per_cm2.addUnit('siemens', 'milli')
    mS_per_cm2.addUnit('metre', 'centi', -2.0)

    ms = Units('ms')
    ms.addUnit('second', 'milli')

    mM = Units('mM')
    mM.addUnit('mole', 'milli')

    model.addUnits(ms)
    model.addUnits(mV)
    model.addUnits(mM)
    model.addUnits(microA_per_cm2)
    model.addUnits(mS_per_cm2)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.g</strong> Set the units on each of the variables.
                    Call the validator again, and expect there to be no errors.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  2.g 
    //      Set the units on each of the variables.  
    //      Call the validator again, and expect there to be no errors.
    kChannelEquations-&gt;variable("E_K")-&gt;setUnits(mV);
    kChannelEquations-&gt;variable("i_K")-&gt;setUnits(microA_per_cm2);
    kChannelEquations-&gt;variable("g_K")-&gt;setUnits(mS_per_cm2);
    kChannelEquations-&gt;variable("V")-&gt;setUnits(mV);
    kChannelEquations-&gt;variable("t")-&gt;setUnits(ms);
    kChannelEquations-&gt;variable("n")-&gt;setUnits("dimensionless");

    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  2.g 
    #      Set the units on each of the variables.  
    #      Call the validator again, and expect there to be no errors.
    k_channel_equations.variable('E_K').setUnits(mV)
    k_channel_equations.variable('i_K').setUnits(microA_per_cm2)
    k_channel_equations.variable('g_K').setUnits(mS_per_cm2)
    k_channel_equations.variable('V').setUnits(mV)
    k_channel_equations.variable('t').setUnits(ms)
    k_channel_equations.variable('n').setUnits('dimensionless')

    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
        </section>
        <section ids="step-3-create-the-ngate-and-its-child-components" names="step\ 3:\ create\ the\ ngate\ and\ its\ child\ components">
            <title>Step 3: Create the nGate and its child components</title>
            <paragraph>The nGateEquations has some of the working of a generic gate (which we’ll import from GateModel.cellml), but instead of constant values for alpha and beta, we’ll introduce a voltage dependence.
                The nGateParameters component allows us to specify those parameters specific to the movement of potassium.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Create a component, name it “nGate”, and add it to the equations component.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Create a component, name it “nGateEquations” and add it to the nGate component.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  3.a 
    //      Create a component, name it "nGate", and add it to the equations component.
    auto nGate = libcellml::Component::create("nGate");
    kChannelEquations-&gt;addComponent(nGate);

    //  3.b 
    //      Create a component, name it "nGateEquations" and add it to the nGate component.
    auto nGateEquations = libcellml::Component::create("nGateEquations");
    nGate-&gt;addComponent(nGateEquations);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  3.a 
    #      Create a component, name it 'nGate', and add it to the equations component.
    n_gate = Component('nGate')
    k_channel_equations.addComponent(n_gate)

    #  3.b 
    #      Create a component, name it 'nGateEquations' and add it to the n_gate component.
    n_gate_equations = Component('nGateEquations')
    n_gate.addComponent(n_gate_equations)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Add the mathematics to the nGateEquations component and validate the model.
                    Expect errors relating to missing variables.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  3.c 
    //      Add the mathematics to the nGateEquations component and validate the model.
    //      Expect errors relating to missing variables.
    std::string equationAlphaN =
        "&lt;apply&gt;&lt;eq/&gt;\n"
        "    &lt;ci&gt;alpha_n&lt;/ci&gt;\n"
        "    &lt;apply&gt;&lt;divide/&gt;\n"
        "        &lt;apply&gt;&lt;times/&gt;\n"
        "            &lt;cn cellml:units=\"per_mV_ms\"&gt;-0.01&lt;/cn&gt;\n"
        "            &lt;apply&gt;&lt;plus/&gt;\n"
        "                &lt;ci&gt;V&lt;/ci&gt;\n"
        "                &lt;cn cellml:units=\"mV\"&gt;65&lt;/cn&gt;\n"
        "            &lt;/apply&gt;\n"
        "        &lt;/apply&gt;\n"
        "        &lt;apply&gt;&lt;minus/&gt;\n"
        "            &lt;apply&gt;&lt;exp/&gt;\n"
        "                &lt;apply&gt;&lt;divide/&gt;\n"
        "                    &lt;apply&gt;&lt;plus/&gt;\n"
        "                        &lt;ci&gt;V&lt;/ci&gt;\n"
        "                        &lt;cn cellml:units=\"mV\"&gt;65&lt;/cn&gt;\n"
        "                    &lt;/apply&gt;\n"
        "                    &lt;cn cellml:units=\"mV\"&gt;-10&lt;/cn&gt;\n"
        "                &lt;/apply&gt;\n"
        "            &lt;/apply&gt;\n"
        "            &lt;cn cellml:units=\"dimensionless\"&gt;1&lt;/cn&gt;\n"
        "        &lt;/apply&gt;\n"
        "    &lt;/apply&gt;\n"
        "&lt;/apply&gt;\n";

    std::string equationBetaN =
        "  &lt;apply&gt;&lt;eq/&gt;\n"
        "    &lt;ci&gt;beta_n&lt;/ci&gt;\n"
        "    &lt;apply&gt;&lt;times/&gt;\n"
        "      &lt;cn cellml:units=\"per_ms\"&gt;0.125&lt;/cn&gt;\n"
        "      &lt;apply&gt;&lt;exp/&gt;\n"
        "        &lt;apply&gt;&lt;divide/&gt;\n"
        "          &lt;apply&gt;&lt;plus/&gt;"
        "            &lt;ci&gt;V&lt;/ci&gt;\n"
        "            &lt;cn cellml:units=\"mV\"&gt;75&lt;/cn&gt;\n"
        "          &lt;/apply&gt;"
        "          &lt;cn cellml:units=\"mV\"&gt;-80&lt;/cn&gt;\n"
        "        &lt;/apply&gt;\n" 
        "      &lt;/apply&gt;\n" 
        "    &lt;/apply&gt;\n" 
        "  &lt;/apply&gt;\n"; 

    nGateEquations-&gt;setMath(mathHeader);
    nGateEquations-&gt;appendMath(equationAlphaN);
    nGateEquations-&gt;appendMath(equationBetaN);
    nGateEquations-&gt;appendMath(mathFooter);
    
    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  3.c 
    #      Add the mathematics to the n_gate_equations component and validate the model.
    #      Expect errors relating to missing variables.
    equation_alpha_n = \
        '  &lt;apply&gt;&lt;eq/&gt;\n'\
        '    &lt;ci&gt;alpha_n&lt;/ci&gt;\n'\
        '    &lt;apply&gt;&lt;divide/&gt;\n'\
        '      &lt;apply&gt;&lt;times/&gt;\n'\
        '        &lt;cn cellml:units="per_mV_ms"&gt;-0.01&lt;/cn&gt;\n'\
        '        &lt;apply&gt;&lt;plus/&gt;\n'\
        '          &lt;ci&gt;V&lt;/ci&gt;\n'\
        '          &lt;cn cellml:units="mV"&gt;65&lt;/cn&gt;\n'\
        '        &lt;/apply&gt;\n'\
        '      &lt;/apply&gt;\n'\
        '      &lt;apply&gt;&lt;minus/&gt;\n'\
        '        &lt;apply&gt;&lt;exp/&gt;\n'\
        '          &lt;apply&gt;&lt;divide/&gt;\n'\
        '            &lt;apply&gt;&lt;plus/&gt;\n'\
        '              &lt;ci&gt;V&lt;/ci&gt;\n'\
        '              &lt;cn cellml:units="mV"&gt;65&lt;/cn&gt;\n'\
        '            &lt;/apply&gt;\n'\
        '            &lt;cn cellml:units="mV"&gt;-10&lt;/cn&gt;\n'\
        '          &lt;/apply&gt;\n'\
        '        &lt;/apply&gt;\n'\
        '        &lt;cn cellml:units="dimensionless"&gt;1&lt;/cn&gt;\n'\
        '      &lt;/apply&gt;\n'\
        '    &lt;/apply&gt;\n'\
        '  &lt;/apply&gt;\n'

    equation_beta_n = \
        '  &lt;apply&gt;&lt;eq/&gt;\n'\
        '    &lt;ci&gt;beta_n&lt;/ci&gt;\n'\
        '    &lt;apply&gt;&lt;times/&gt;\n'\
        '      &lt;cn cellml:units="per_ms"&gt;0.125&lt;/cn&gt;\n'\
        '      &lt;apply&gt;&lt;exp/&gt;\n'\
        '        &lt;apply&gt;&lt;divide/&gt;\n'\
        '          &lt;apply&gt;&lt;plus/&gt;\n'\
        '            &lt;ci&gt;V&lt;/ci&gt;\n'\
        '            &lt;cn cellml:units="mV"&gt;75&lt;/cn&gt;\n'\
        '          &lt;/apply&gt;\n'\
        '          &lt;cn cellml:units="mV"&gt;-80&lt;/cn&gt;\n'\
        '        &lt;/apply&gt;\n'\
        '      &lt;/apply&gt;\n'\
        '    &lt;/apply&gt;\n'\
        '  &lt;/apply&gt;\n'

    n_gate_equations.setMath(math_header)
    n_gate_equations.appendMath(equation_alpha_n)
    n_gate_equations.appendMath(equation_beta_n)
    n_gate_equations.appendMath(math_footer)
    
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 7 issues:
Issue [0] is an ERROR:
    description: MathML ci element has the child text 'alpha_n' which does not correspond with any variable names present in component 'nGateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATH
Issue [1] is an ERROR:
    description: Math has a cn element with a cellml:units attribute 'per_mV_ms' that is not a valid reference to units in the model 'PotassiumChannelModel' or a standard unit.
    see section 2.13.4 in the CellML specification.
    stored item type: MATH
Issue [2] is an ERROR:
    description: MathML ci element has the child text 'V' which does not correspond with any variable names present in component 'nGateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATH

... etc ...</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.d</strong> Add the missing variables to the nGateEquations component, and validate again.
                    Expect errors relating to units missing from the variables.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  3.d 
    //      Add the missing variables to the nGateEquations component, and validate again.
    //      Expect errors relating to units missing from the variables.
    nGateEquations-&gt;addVariable(libcellml::Variable::create("t"));
    nGateEquations-&gt;addVariable(libcellml::Variable::create("V"));
    nGateEquations-&gt;addVariable(libcellml::Variable::create("alpha_n"));
    nGateEquations-&gt;addVariable(libcellml::Variable::create("beta_n"));
    nGateEquations-&gt;addVariable(libcellml::Variable::create("n"));
    
    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  3.d 
    #      Add the missing variables to the n_gate_equations component, and validate again.
    #      Expect errors relating to units missing from the variables.
    n_gate_equations.addVariable(Variable('t'))
    n_gate_equations.addVariable(Variable('V'))
    n_gate_equations.addVariable(Variable('alpha_n'))
    n_gate_equations.addVariable(Variable('beta_n'))
    n_gate_equations.addVariable(Variable('n'))
    
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 12 issues:
Issue [0] is an ERROR:
    description: CellML identifiers must contain one or more basic Latin alphabetic characters.
    see section 1.3.1.1 in the CellML specification.
    stored item type: UNDEFINED
Issue [1] is an ERROR:
    description: Variable 't' in component 'nGateEquations' does not have a valid units attribute. The attribute given is ''.
    see section 2.8.1.2 in the CellML specification.
    stored item type: VARIABLE
Issue [2] is an ERROR:
    description: CellML identifiers must contain one or more basic Latin alphabetic characters.
    see section 1.3.1.1 in the CellML specification.
    stored item type: UNDEFINED
Issue [3] is an ERROR:
    description: Variable 'V' in component 'nGateEquations' does not have a valid units attribute. The attribute given is ''.
    see section 2.8.1.2 in the CellML specification.
    stored item type: VARIABLE

... etc ...</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.e</strong> Create the missing units and add them to the model.
                    The only two which aren’t available are:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>per millisecond; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>per millivolt millisecond.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Remember that you’ll need to give these names that are the same as those needed by the  variables.
                    In this case they are “per_ms” and “per_mV_ms”.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  3.e
    //      Create the missing units and add them to the model.  
    auto per_ms = libcellml::Units::create("per_ms");
    per_ms-&gt;addUnit("second", "milli", -1);
    model-&gt;addUnits(per_ms);

    auto per_mV_ms = libcellml::Units::create("per_mV_ms");
    per_mV_ms-&gt;addUnit("second", "milli", -1);
    per_mV_ms-&gt;addUnit("volt", "milli", -1);
    model-&gt;addUnits(per_mV_ms);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  3.e
    #      Create the missing units and add them to the model.  
    per_ms = Units('per_ms')
    per_ms.addUnit('second', 'milli', -1)
    model.addUnits(per_ms)

    per_mV_ms = Units('per_mV_ms')
    per_mV_ms.addUnit('second', 'milli', -1)
    per_mV_ms.addUnit('volt', 'milli', -1)
    model.addUnits(per_mV_ms)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.f</strong> Associate the correct units items with the variables which need them.
                    Revalidate the model, expecting there to be no errors reported.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  3.f
    //      Associate the correct units items with the variables which need them.
    //      Revalidate the model, expecting there to be no errors reported.
    nGateEquations-&gt;variable("t")-&gt;setUnits(ms);
    nGateEquations-&gt;variable("V")-&gt;setUnits(mV);
    nGateEquations-&gt;variable("alpha_n")-&gt;setUnits(per_ms);
    nGateEquations-&gt;variable("beta_n")-&gt;setUnits(per_ms);
    nGateEquations-&gt;variable("n")-&gt;setUnits("dimensionless");

    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  3.f
    #      Associate the correct units items with the variables which need them.
    #      Revalidate the model, expecting there to be no errors reported.
    n_gate_equations.variable('t').setUnits(ms)
    n_gate_equations.variable('V').setUnits(mV)
    n_gate_equations.variable('alpha_n').setUnits(per_ms)
    n_gate_equations.variable('beta_n').setUnits(per_ms)
    n_gate_equations.variable('n').setUnits('dimensionless')

    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
        </section>
        <section ids="step-4-specify-imports-for-the-generic-gate-components" names="step\ 4:\ specify\ imports\ for\ the\ generic\ gate\ components">
            <title>Step 4: Specify imports for the generic gate components</title>
            <paragraph>The generic gate model (in GateModel.cellml) has two components:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>“gateEquations” which solves an ODE for the gate status parameter, X; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>“gateParameters” which sets the values of alpha, beta, and initialises X.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>We will import only the “gateEquations” component and set it to be a child of the nGateEquations component.
                This means we can introduce the voltage dependence for the alpha and beta, and using a specified initial value for the gate’s status.
                Note that the variable “n” in the nGateEquations is equivalent to the generic gate’s variable “X”.</paragraph>
            <comment xml:space="preserve">container::shortlist</comment>
            <paragraph>Imports require three things:</paragraph>
            <block_quote>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>A destination for the imported item.
                            This could be a <literal classes="code">Component</literal> or <literal classes="code">Units</literal> item.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A model to import for the imported item from.
                            This is stored in an <literal classes="code">ImportSource</literal> item containing the URL of the model to read.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The name of the item to import.
                            This is called the “import reference” and is stored by the destination <literal classes="code">Component</literal> or <literal classes="code">Units</literal> item.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource">ImportSource class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportSource?fName=setUrl">setUrl</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=addImportSource">addImportSource</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity">ImportedEntity class</reference> (applies to components and units)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity?fName=setImportSource">setImportSource</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1ImportedEntity?fName=setImportReference">setImportReference</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Create an <literal classes="code">ImportSource</literal> item and set its URL to be “GateModel.cellml”.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Create a destination component for the imported gate component, and add this to the nGateEquations component.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.c</strong> Set the import reference on the component you just created to be the name of the component in the GateModel.cellml file that you want to use.
                    In this example, it is “gateEquations”.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.d</strong> Associate the import source with the component using the setImportSource function.
                    Note that this step also makes the import source available to other items through the <literal classes="code">importSource(index)</literal> function on the model.
                    This way the same imported model file can be used as a source for more than one item.</paragraph>
            </container>
            <paragraph>Note that we are deliberately not importing the parameters component in the GateModel.cellml file, since we will be setting our own values of its variables.</paragraph>
            <container classes="dothis">
                <paragraph><strong>4.e</strong> Validate the model and confirm that there are no issues.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  4.a 
    //      Create an ImportSource item and set its URL to be "GateModel.cellml".
    auto gateModelImportSource = libcellml::ImportSource::create();
    gateModelImportSource-&gt;setUrl("GateModel.cellml");

    //  4.b 
    //      Create a destination component for the imported gate component, and add this to 
    //      the nGateEquations component. 
    auto importedGate = libcellml::Component::create("importedGate");
    nGateEquations-&gt;addComponent(importedGate);

    //  4.c 
    //      Set the import reference on the component you just created to be the name
    //      of the component in the GateModel.cellml file that you want to use.  In this
    //      example, it is "gateEquations".
    importedGate-&gt;setImportReference("gateEquations");

    //  4.d 
    //      Associate the import source with the component using the setImportSource function.
    //      Note that this step also makes the import source available to other items through the 
    //      Model::importSource(index) function.  This way the same model file can be used as a 
    //      source for more than one item.
    importedGate-&gt;setImportSource(gateModelImportSource);

    //  4.e 
    //      Validate the model and confirm that there are no issues.
    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  4.a 
    #      Create an ImportSource item and set its URL to be 'GateModel.cellml'.
    gate_import_source = ImportSource()
    gate_import_source.setUrl('GateModel.cellml')

    #  4.b 
    #      Create a destination component for the imported gate component, and add this to 
    #      the n_gate_equations component. 
    imported_gate = Component('importedGate')
    n_gate_equations.addComponent(imported_gate)

    #  4.c 
    #      Set the import reference on the component you just created to be the name
    #      of the component in the GateModel.cellml file that you want to use.  In this
    #      example, it is 'gateEquations'.
    imported_gate.setImportReference('gateEquations')

    #  4.d 
    #      Associate the import source with the component using the setImportSource function.
    #      Note that this step also makes the import source available to other items through the 
    #      Model.importSource(index) function.  This way the same model file can be used as a 
    #      source for more than one item.
    imported_gate.setImportSource(gate_import_source)

    #  4.e 
    #      Validate the model and confirm that there are no issues.
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
        </section>
        <section ids="step-5-specify-imports-for-the-controller-component" names="step\ 5:\ specify\ imports\ for\ the\ controller\ component">
            <title>Step 5: Specify imports for the controller component</title>
            <paragraph>Repeat Step 4 to import a controller component.
                This should be at the top of the encapsulation hierarchy, and should import the component named “controller” from the file “PotassiumChannelController.cellml”.</paragraph>
            <container classes="dothis">
                <paragraph><strong>5.a</strong> Repeat steps 4.a-d for the controller component.
                    Put it at the top level of the encapsulation hierarchy.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.b</strong> Validate the model and confirm that there are no issues.</paragraph>
            </container>
            <paragraph>At this point we’ve defined the equations that govern the potassium channel’s operation.
                We’ve also confirmed that the CellML representation of these equations is valid (using the <literal classes="code">Validator</literal>); now we need to check that it’s also solvable (using the <literal classes="code">Analyser</literal>).</paragraph>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  5.a 
    //      Repeat steps 4.a-d for the controller component.  Put it at the top level of
    //      the encapsulation hierarchy.
    auto controllerImportSource = libcellml::ImportSource::create();
    controllerImportSource-&gt;setUrl("PotassiumChannelController.cellml");

    auto controller = libcellml::Component::create("controller");
    controller-&gt;setImportReference("controller");
    controller-&gt;setImportSource(controllerImportSource);
    model-&gt;addComponent(controller);

    //  5.b 
    //      Validate the model and confirm that there are no issues.
    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  5.a 
    #      Repeat steps 4.a-d for the controller component.  Put it at the top level of
    #      the encapsulation hierarchy.
    controllerImportSource = ImportSource()
    controllerImportSource.setUrl('PotassiumChannelController.cellml')

    controller = Component('controller')
    controller.setImportReference('controller')
    controller.setImportSource(controllerImportSource)
    model.addComponent(controller)

    #  5.b 
    #       Validate the model and confirm that there are no issues.
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
        </section>
        <section ids="step-6-analyse-the-model" names="step\ 6:\ analyse\ the\ model">
            <title>Step 6: Analyse the model</title>
            <paragraph>We will introduce the <literal classes="code">Analyser</literal> class here so that its use as a debugging  tool can be demonstrated.
                Of course, we know ahead of time that there is still a lot of connections to be created between the components, but the analyser can help us to find them.
                The analyser is similar to the <literal classes="code">Validator</literal> class and keeps a record of issues it encounters.</paragraph>
            <container classes="nb">
                <paragraph><strong>A reminder:</strong> We’re aiming for a potassium channel component which can accept two external parameters - time, t (ms) and voltage, V (mV) - and use them to calculate a potassium current, i_K (microA_per_cm2).
                    A utility function <literal classes="code">printModel(Model, bool)</literal> has been provided to help you to see what’s going  on inside your model.
                    Setting the second optional parameter to <literal classes="code">true</literal> will also print the MathML content.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.a</strong> Create an <literal classes="code">Analyser</literal> item and pass it the model for checking using its <literal classes="code">analyseModel</literal> function.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.b</strong> Retrieve the analyser’s issues and print them to the terminal, just as you’ve done for the validator.
                    Expect messages related to un-computed variables.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 11 issues:
Issue [0] is an ERROR:
    description: Variable 'V' in component 'nGateEquations' is not computed.
    stored item type: VARIABLE
Issue [1] is an ERROR:
    description: Variable 'alpha_n' in component 'nGateEquations' is not computed.
    stored item type: VARIABLE
Issue [2] is an ERROR:
    description: Variable 'beta_n' in component 'nGateEquations' is not computed.
    stored item type: VARIABLE

... etc ...</literal_block>
            <paragraph>Even though all of the messages we see are “variable not calculated” errors, we can divide them into different categories:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>those variables which are constants whose value has not been set yet;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>those variables whose calculation depends on as-yet un-calculated variables;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>those variables which need to be connected to where their calculation happens; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>those variables which aren’t present in any equation.</paragraph>
                </list_item>
            </bullet_list>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  6.a 
    //      Create an Analyser item and pass it the model for checking with the analyseModel function.
    auto analyser = libcellml::Analyser::create();
    analyser-&gt;analyseModel(model);

    //  6.b 
    //      The analyser is similar to the Validator and keeps a record of issues it encounters.
    //      Retrieve these and print to the terminal, just as you've done for the validator.
    //      Expect messages related to un-computed variables.
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  6.a 
    #      Create an Analyser item and pass it the model for checking with the analyseModel function.
    analyser = Analyser()
    analyser.analyseModel(model)

    #  6.b 
    #      The analyser is similar to the Validator and keeps a record of issues it encounters.
    #      Retrieve these and print to the terminal, just as you've done for the validator.
    #      Expect messages related to un-computed variables.
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-7-define-the-constants" names="step\ 7:\ define\ the\ constants">
            <title>Step 7: Define the constants</title>
            <paragraph>As we work through the next few steps we’ll be defining and connecting all of the components and variables together.
                First we’ll define the variables which will have a constant value in the simulation.</paragraph>
            <container classes="dothis">
                <paragraph><strong>7.a</strong> Use the print model helper function to show your current model contents.
                    This should show that we have currently got variables only in the nGateEquations and potassiumChannelEquations components.
                    These need to have sibling parameters components created to hold any hard-coded values or initial conditions that are required.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  7.a 
    //      Print the model to the terminal.
    printModel(model, true);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  7.a 
    #      Print the model to the terminal.
    print_model(model, True)

</literal_block>
            </container>
            <paragraph>Create parameters siblings components for the equations components, and add the variables that they will require.
                These are:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>potassium channel parameters</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>E_K (-87)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>g_K (36)</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>nGate parameters</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>initial value for n (dimensionless)</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
            <paragraph>You can either do this by creating the variables from scratch (as in Step 3.d) but because these are intended to be duplicates of existing variables, but in another component, we can simply add a cloned variable to the parameters component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>7.b</strong> Create parameters components for the equations components, and add cloned versions of any variables which need to be given a value into the new parameters components.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  7.b
    //      Create parameters components for the equations components, and add cloned versions of
    //      any variables which need to be given a value into the new parameters components.
    auto kChannelParameters = libcellml::Component::create("potassiumChannelParameters");
    kChannel-&gt;addComponent(kChannelParameters);
    kChannelParameters-&gt;addVariable(kChannelEquations-&gt;variable("E_K")-&gt;clone());
    kChannelParameters-&gt;addVariable(kChannelEquations-&gt;variable("g_K")-&gt;clone());

    auto nGateParameters = libcellml::Component::create("nGateParameters");
    nGate-&gt;addComponent(nGateParameters);
    nGateParameters-&gt;addVariable(nGateEquations-&gt;variable("n")-&gt;clone());

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  7.b
    #      Create parameters components for the equations components, and add cloned versions of
    #      any variables which need to be given a value into the new parameters components.
    k_channel_parameters = Component('potassiumChannelParameters')
    k_channel.addComponent(k_channel_parameters)
    k_channel_parameters.addVariable(k_channel_equations.variable('E_K').clone())
    k_channel_parameters.addVariable(k_channel_equations.variable('g_K').clone())

    n_gate_parameters = Component('nGateParameters')
    n_gate.addComponent(n_gate_parameters)
    n_gate_parameters.addVariable(n_gate_equations.variable('n').clone())

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>7.c</strong> In order for other encapsulating components to access these variables, they also need to have intermediate variables in the nGate or potassium channel components too.
                    This is only true of variables that you want to be available to the outside.
                    In this example, we need to add the variable “n” to the nGate in order that its parent (the potassium channel equations) can access it.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>7.d</strong> Create variable connections between these variables and their counterparts in the equations components.
                    Validate, expecting errors related to missing or incorrect interface types.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 6 issues:
Issue [0] is an ERROR:
    description: Variable 'E_K' in component 'potassiumChannelEquations' has no interface type set. The interface type required is 'public'.
    see section 3.10.8 in the CellML specification.
    stored item type: VARIABLE

... etc ...</literal_block>
            <container classes="dothis">
                <paragraph><strong>7.e</strong> Set the required interface types as listed by the validator.
                    This can be done individually using the <literal classes="code">setInterfaceType</literal> function on each variable, or automatically using the <literal classes="code">fixVariableInterfaces</literal> function on the entire model.
                    Validate again, expecting no validation errors.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  7.c 
    //      In order for other encapsulating components to access these variables, they also need to have
    //      intermediate variables in the nGate or potassium channel components too.  This is only true
    //      of variables that you want to be available to the outside.  In this example, we need to add
    //      the variable "n" to the nGate in order that its parent (the potassium channel equations) can 
    //      access it.
    nGate-&gt;addVariable(nGateEquations-&gt;variable("n")-&gt;clone());

    //  7.d 
    //      Create variable connections between these variables and their counterparts in the equations
    //      components.  Validate, expecting errors related to missing or incorrect interface types.
    libcellml::Variable::addEquivalence(kChannelParameters-&gt;variable("E_K"), kChannelEquations-&gt;variable("E_K"));
    libcellml::Variable::addEquivalence(kChannelParameters-&gt;variable("g_K"), kChannelEquations-&gt;variable("g_K"));
    libcellml::Variable::addEquivalence(nGate-&gt;variable("n"), nGateEquations-&gt;variable("n"));

    validator-&gt;validateModel(model);
    printIssues(validator);

    //  7.e 
    //      Set the required interface types as listed by the validator.  This can be done individually using the 
    //      Variable::setInterfaceType() function, or automatically using the Model::fixVariableInterfaces()
    //      function.  Validate again, expecting no validation errors.
    model-&gt;fixVariableInterfaces();

    validator-&gt;validateModel(model);
    printIssues(validator);
    
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  7.c 
    #      In order for other encapsulating components to access these variables, they also need to have
    #      intermediate variables in the n_gate or potassium channel components too.  This is only true
    #      of variables that you want to be available to the outside.  In this example, we need to add
    #      the variable 'n' to the n_gate in order that its parent (the potassium channel equations) can 
    #      access it.
    n_gate.addVariable(n_gate_equations.variable('n').clone())

    #  7.d 
    #      Create variable connections between these variables and their counterparts in the equations
    #      components.  Validate, expecting errors related to missing or incorrect interface types.
    Variable.addEquivalence(k_channel_parameters.variable('E_K'), k_channel_equations.variable('E_K'))
    Variable.addEquivalence(k_channel_parameters.variable('g_K'), k_channel_equations.variable('g_K'))
    Variable.addEquivalence(n_gate.variable('n'), n_gate_equations.variable('n'))

    validator.validateModel(model)
    print_issues(validator)

    #  7.e 
    #      Set the required interface types as listed by the validator.  This can be done individually using the 
    #      Variable.setInterfaceType() function, or automatically using the Model.fixVariableInterfaces()
    #      function.  Validate again, expecting no validation errors.
    model.fixVariableInterfaces()

    validator.validateModel(model)
    print_issues(validator)
    
</literal_block>
            </container>
            <paragraph>If we were to analyse the model again now we would we still have the same set of errors as earlier as we haven’t given a value to any of our parameters.</paragraph>
            <container classes="shortlist">
                <paragraph>These values should be:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Potassium channel parameters:</paragraph>
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>E_K = -85 [mV]</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>g_K = 36 [milliS_per_cm2]</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>nGate parameters:</paragraph>
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>n = 0.325 [dimensionless]</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>7.f</strong> Use the <literal classes="code">setInitialValue</literal> function to set these parameter values.
                    Analyse the model again, expecting that the calculation errors related to these constants have been solved.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  7.f
    //      Set the constant values on the variables.  Analyse the model again, expecting 
    //      that the calculation errors related to these constants have been solved.
    kChannelParameters-&gt;variable("E_K")-&gt;setInitialValue(-87);
    kChannelParameters-&gt;variable("g_K")-&gt;setInitialValue(36);
    nGateParameters-&gt;variable("n")-&gt;setInitialValue(0.325);

    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  7.f
    #      Set the constant values on the variables.  Analyse the model again, expecting 
    #      that the calculation errors related to these constants have been solved.
    k_channel_parameters.variable('E_K').setInitialValue(-87)
    k_channel_parameters.variable('g_K').setInitialValue(36)
    n_gate_parameters.variable('n').setInitialValue(0.325)

    analyser.analyseModel(model)
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-8-connect-the-input-variables" names="step\ 8:\ connect\ the\ input\ variables">
            <title>Step 8: Connect the input variables</title>
            <paragraph>Looking at the variables listed in the issues above we can see that some of our “external” or “input” variables are listed more than once.
                These are the voltage, V, and time, t.
                Time is needed in every equations component, including the imported gate component.
                Voltage is needed by the potassium channel and nGate equations components.</paragraph>
            <container classes="dothis">
                <paragraph><strong>8.a</strong> Print the model to the terminal and notice the components which contain V and t variables.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'PotassiumChannelModel'
    UNITS: 7 custom units
        [0]: ms
        [1]: mV
        [2]: mM
        [3]: microA_per_cm2
        [4]: milliS_per_cm2
        [5]: per_ms
        [6]: per_mV_ms
    COMPONENTS: 2 components
        [0]: potassiumChannel
            VARIABLES: 0 variables
            COMPONENT potassiumChannel has 2 child components:
                [0]: potassiumChannelEquations
                    VARIABLES: 6 variables
                        [0]: E_K [mV]
                            └──&gt; potassiumChannelParameters:E_K [mV]
                        [1]: i_K [microA_per_cm2]
                        [2]: g_K [milliS_per_cm2]
                            └──&gt; potassiumChannelParameters:g_K [milliS_per_cm2]
                        [3]: V [mV]
                        [4]: t [ms]
                        [5]: n [dimensionless]
                    COMPONENT potassiumChannelEquations has 1 child components:
                        [0]: nGate
                            VARIABLES: 1 variables
                                [0]: n [dimensionless]
                                    └──&gt; nGateEquations:n [dimensionless]
                            COMPONENT nGate has 2 child components:
                                [0]: nGateEquations
                                    VARIABLES: 5 variables
                                        [0]: t [ms]
                                        [1]: V [mV]
                                        [2]: alpha_n [per_ms]
                                        [3]: beta_n [per_ms]
                                        [4]: n [dimensionless]
                                            └──&gt; nGate:n [dimensionless]
                                    COMPONENT nGateEquations has 1 child components:
                                        [0]: importedGate &lt;--- imported from: 'gateEquations' in 'GateModel.cellml'
                                            VARIABLES: 0 variables
                                [1]: nGateParameters
                                    VARIABLES: 1 variables
                                        [0]: n [dimensionless], initial = 0.325
                [1]: potassiumChannelParameters
                    VARIABLES: 2 variables
                        [0]: E_K [mV], initial = -85
                            └──&gt; potassiumChannelEquations:E_K [mV]
                        [1]: g_K [milliS_per_cm2], initial = 36
                            └──&gt; potassiumChannelEquations:g_K [milliS_per_cm2]
        [1]: controller &lt;--- imported from: 'controller' in 'PotassiumChannelController.cellml'
            VARIABLES: 0 variables</literal_block>
            <paragraph>Connections between the variables in any two components are only possible when those components are in a sibling-sibling or parent-child relationship.
                We can see from the printed structure that the top-level potassium channel component doesn’t have any variables, and neither does the nGate component.
                We’ll need to create intermediate variables in those components to allow connections to be made through them.</paragraph>
            <container classes="dothis">
                <paragraph><strong>8.b</strong> Create dummy variables for time and voltage using the cloning technique described in Step 7.b, and add a clone to each appropriate component.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  8.a
    //      Use the printModel function to print your model to the terminal.
    printModel(model);

    //  8.b 
    //      Create dummy variables for time and voltage using the cloning technique described in 
    //      Step 7.b, and add a clone to each appropriate component.
    kChannel-&gt;addVariable(kChannelEquations-&gt;variable("t")-&gt;clone());
    kChannel-&gt;addVariable(kChannelEquations-&gt;variable("V")-&gt;clone());
    nGate-&gt;addVariable(kChannelEquations-&gt;variable("t")-&gt;clone());
    nGate-&gt;addVariable(kChannelEquations-&gt;variable("V")-&gt;clone());
    kChannelParameters-&gt;addVariable(kChannelEquations-&gt;variable("V")-&gt;clone());

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  8.a
    #      Use the print_model function to print your model to the terminal.
    print_model(model)

    #  8.b 
    #      Create dummy variables for time and voltage using the cloning technique described in 
    #      Step 7.b, and add a clone to each appropriate component.
    k_channel.addVariable(k_channel_equations.variable('t').clone())
    k_channel.addVariable(k_channel_equations.variable('V').clone())
    n_gate.addVariable(k_channel_equations.variable('t').clone())
    n_gate.addVariable(k_channel_equations.variable('V').clone())
    k_channel_parameters.addVariable(k_channel_equations.variable('V').clone())

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.c</strong> Connect these variables to their counterparts as needed.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.d</strong> Fix the variable interfaces and validate the model, expecting no errors.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.e</strong> Analyse the model and expect that errors related to voltage and time now occur only in the top-level potassium channel component.
                    Because this needs to be connected to the imported controller component, they’ll be addressed later in Step 10.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  8.c 
    //      Connect these variables to their counterparts as needed.
    libcellml::Variable::addEquivalence(nGate-&gt;variable("t"), nGateEquations-&gt;variable("t"));
    libcellml::Variable::addEquivalence(nGate-&gt;variable("V"), nGateEquations-&gt;variable("V"));
    libcellml::Variable::addEquivalence(nGate-&gt;variable("t"), kChannelEquations-&gt;variable("t"));
    libcellml::Variable::addEquivalence(nGate-&gt;variable("V"), kChannelEquations-&gt;variable("V"));
    libcellml::Variable::addEquivalence(kChannel-&gt;variable("t"), kChannelEquations-&gt;variable("t"));
    libcellml::Variable::addEquivalence(kChannel-&gt;variable("V"), kChannelEquations-&gt;variable("V"));
    libcellml::Variable::addEquivalence(kChannelParameters-&gt;variable("V"), kChannelEquations-&gt;variable("V"));

    //  8.d 
    //      Fix the variable interfaces and validate the model, expecting no errors.
    model-&gt;fixVariableInterfaces();

    validator-&gt;validateModel(model);
    printIssues(validator);

    //  8.e 
    //      Analyse the model and expect that errors related to voltage and time now occur only in the
    //      top-level potassium channel component.  Because this needs to be connected to the imported
    //      controller component, they'll be addressed later in Step 10.
    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  8.c 
    #      Connect these variables to their counterparts as needed.
    Variable.addEquivalence(n_gate.variable('t'), n_gate_equations.variable('t'))
    Variable.addEquivalence(n_gate.variable('V'), n_gate_equations.variable('V'))
    Variable.addEquivalence(n_gate.variable('t'), k_channel_equations.variable('t'))
    Variable.addEquivalence(n_gate.variable('V'), k_channel_equations.variable('V'))
    Variable.addEquivalence(k_channel.variable('t'), k_channel_equations.variable('t'))
    Variable.addEquivalence(k_channel.variable('V'), k_channel_equations.variable('V'))
    Variable.addEquivalence(k_channel_parameters.variable('V'), k_channel_equations.variable('V'))

    #  8.d 
    #      Fix the variable interfaces and validate the model, expecting no errors.
    model.fixVariableInterfaces()

    validator.validateModel(model)
    print_issues(validator)

    #  8.e 
    #      Analyse the model and expect that errors related to voltage and time now occur only in the
    #      top-level potassium channel component.  Because this needs to be connected to the imported
    #      controller component, they'll be addressed later in Step 10.
    analyser.analyseModel(model)
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-9-connect-the-calculated-variables" names="step\ 9:\ connect\ the\ calculated\ variables">
            <title>Step 9: Connect the calculated variables</title>
            <paragraph>Now we need to make sure that all of the calculated variables can move through the model properly.
                In this example, the only calculated variable is n, the gate status.
                This is calculated by solving the ODE in the nGate equations component, but needs to be initialised by the nGate parameters component, and its value passed back to the potassium channel equations component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>9.a</strong> Make the required variable connections as described above.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>9.b</strong> Fix the variable interfaces for the model, and validate, expecting no errors.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>9.c</strong> Analyse the model, expecting that the errors related to the n variable have been resolved.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  9.a 
    //      Make the required variable connections as described above.
    libcellml::Variable::addEquivalence(nGateParameters-&gt;variable("n"), nGateEquations-&gt;variable("n"));
    libcellml::Variable::addEquivalence(kChannelEquations-&gt;variable("n"), nGate-&gt;variable("n"));
    libcellml::Variable::addEquivalence(nGate-&gt;variable("n"), nGateEquations-&gt;variable("n"));

    //  9.b 
    //      Fix the variable interfaces for the model, and validate, expecting no errors.
    model-&gt;fixVariableInterfaces();

    validator-&gt;validateModel(model);
    printIssues(validator);

    //  9.c 
    //      Analyse the model, expecting that the errors related to the n variable have been resolved.
    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  9.a 
    #      Make the required variable connections as described above.
    Variable.addEquivalence(n_gate_parameters.variable('n'), n_gate_equations.variable('n'))
    Variable.addEquivalence(k_channel_equations.variable('n'), n_gate.variable('n'))
    Variable.addEquivalence(n_gate.variable('n'), n_gate_equations.variable('n'))

    #  9.b 
    #      Fix the variable interfaces for the model, and validate, expecting no errors.
    model.fixVariableInterfaces()
    validator.validateModel(model)
    print_issues(validator)

    #  9.c 
    #      Analyse the model, expecting that the errors related to the n variable have been resolved.
    analyser.analyseModel(model)
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-10-connect-to-imported-components" names="step\ 10:\ connect\ to\ imported\ components">
            <title>Step 10: Connect to imported components</title>
            <paragraph>At this point, we have made all the connections we can between existing variables and components.
                (You can verify this for yourself by printing your model to the terminal again if you like.)
                Now the problem we have is that we need to connect to variables inside imported components, but these don’t exist in our model yet: the import sources that we created in Steps 4 and 5 are simply a recipe; they don’t actually create anything here.</paragraph>
            <paragraph>In order to connect to variables in imported components, we can create dummy variables inside them.
                These will be overwritten when the imports are resolved and the model flattened, at which time the imported variables will replace the dummy ones.
                As with other steps, we have a choice here.
                We can manually create variables or clone existing ones into the destination components we have already created; or we can make use of the <literal classes="code">Importer</literal> class to help us manage these.
                We’re going to do the latter now.</paragraph>
            <container classes="dothis">
                <paragraph><strong>10.a</strong> Create an <literal classes="code">Importer</literal> item.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.a 
    //      Create an Importer item.
    auto importer = libcellml::Importer::create();

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.a 
    #      Create an Importer item.
    importer = Importer()

</literal_block>
            </container>
            <paragraph>Resolving the imports in a model triggers the importer to go searching for all of the information required by this model’s imports, even through multiple generations of import layers.
                It also instantiates each of those requirements into its own library.
                You could use the model’s <literal classes="code">hasUnresolvedImports</literal> function to test whether the operation was successful or not; expecting it to be true before resolution, and false afterwards.</paragraph>
            <container classes="dothis">
                <paragraph><strong>10.b</strong> Pass the model and the path to the GateModel.cellml file into the importer’s <literal classes="code">resolveImports</literal> function.</paragraph>
            </container>
            <paragraph>The <literal classes="code">Importer</literal> class has a logger (just like the <literal classes="code">Validator</literal>), so needs to be checked for issues.</paragraph>
            <container classes="dothis">
                <paragraph><strong>10.c</strong> Check for issues and print any found to the terminal - we do not expect any at this stage.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.b
    //      Pass the model and the path to the GateModel.cellml file into the Importer::resolveImports
    //      function.
    importer-&gt;resolveImports(model, "");

    //  10.c  
    //      Check the Importer for issues and print any found to the terminal - we do not expect any at this stage.
    printIssues(importer);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.b
    #      Pass the model and the path to the GateModel.cellml file into the Importer.resolveImports
    #      function.
    importer.resolveImports(model, '')

    #  10.c  
    #       Check the Importer for issues and print any found to the terminal - we do not expect any at this stage.
    print_issues(importer)

</literal_block>
            </container>
            <paragraph>The models which have the source components that we wanted to reuse from the GateModel.cellml and PotassiumChannelController.cellml files are now available to us in two ways:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>through the <literal classes="code">model</literal> function of the destination component’s <literal classes="code">ImportSource</literal> item; or</paragraph>
                </list_item>
                <list_item>
                    <paragraph>as an item in the importer’s library.
                        The library items can be retrieved either by index or by key, where the key is the name of the file that was resolved.</paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>10.d</strong> Iterate through the items in the library (<literal classes="code">libraryCount</literal> will give you the total), and print its keys to the terminal.
                    The keys can be retrieved as a string from the <literal classes="code">key(index)</literal> function.
                    This should contain two models.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.d
    //       Iterate through the items in the library (Importer::libraryCount() will give you
    //       the total), and print its keys to the terminal.  The keys can be retrieved as a 
    //       string from the Importer::key(index) function.  At this stage we expect only one model in the library.
    std::cout &lt;&lt; "The importer has " &lt;&lt; importer-&gt;libraryCount() &lt;&lt; " models in the library." &lt;&lt; std::endl;
    for(size_t i = 0; i &lt; importer-&gt;libraryCount(); ++i) {
        std::cout &lt;&lt; " library("&lt;&lt;i&lt;&lt;") = " &lt;&lt; importer-&gt;key(i) &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; std::endl;

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.d
    #       Iterate through the items in the library (Importer.libraryCount() will give you
    #       the total), and print its keys to the terminal.  The keys can be retrieved as a 
    #       string from the Importer.key(index) function.  At this stage we expect only one model in the library.
    print('The importer has {} models in the library.'.format(importer.libraryCount()))
    for i in range(0, importer.libraryCount()):
        print(' library({}) = {}'.format(i, importer.key(i)))
    print()

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The importer has 2 models in the library.
    library(0) = GateModel.cellml
    library(1) = PotassiumChannelController.cellml</literal_block>
            <container classes="dothis">
                <paragraph><strong>10.e</strong> We can simply use a clone of the imported components to define dummy variables in the destination component.
                    Create dummy components from the resolved imported components.
                    You can get these from the library or from the import source’s model (or one of each, to prove to yourself that it works either way!).</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.e
    //      We can simply use a clone of the imported components to define dummy variables in the 
    //      destination component.
    //      Create dummy components from the resolved imported components. You can get these from the 
    //      library or from the import source's model (or one of each, to prove to yourself that it works
    //      either way!).
    auto dummyGate = importedGate-&gt;importSource()-&gt;model()-&gt;component(importedGate-&gt;importReference())-&gt;clone();
    auto dummyController = importer-&gt;library("PotassiumChannelController.cellml")-&gt;component(controller-&gt;importReference())-&gt;clone();
    
    //      GOTCHA: Note that when an item is added to a new parent, it is automatically removed from 
    //         its original parent.  Iterating through a set of children is best done in descending
    //         index order or using a while loop so that child items are not skipped as the indices change.
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.e
    #      We can simply use a clone of the imported components to define dummy variables in the 
    #      destination component.
    #      Create dummy components from the resolved imported components. You can get these from the 
    #      library or from the import source's model (or one of each, to prove to yourself that it works
    #      either way!).
    dummy_gate = imported_gate.importSource().model().component(imported_gate.importReference()).clone()
    dummy_controller = importer.library('PotassiumChannelController.cellml').component(controller.importReference()).clone()
    
    #      GOTCHA: Note that when an item is added to a new parent, it is automatically removed from 
    #         its original parent.  Iterating through a set of children is best done in descending
    #         index order or using a while loop so that child items are not skipped as the indices change.
</literal_block>
            </container>
            <container classes="nb">
                <paragraph><strong>GOTCHA:</strong> Note that when an item is added to a new parent, it is automatically removed from its original parent.
                    Iterating through a set of children is best done in descending index order or using a while loop so that child items are not skipped as the indices change.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>10.f</strong> Iterate through the variables in each dummy component, and add a clone of each variable to the destination component.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.f
    //      Iterate through the variables in each dummy component, and add a clone of each variable 
    //      to the destination component. 
    while(dummyGate-&gt;variableCount()) {
        importedGate-&gt;addVariable(dummyGate-&gt;variable(0));
    }
    while(dummyController-&gt;variableCount()) {
        controller-&gt;addVariable(dummyController-&gt;variable(0));
    }

    //      More connections are needed.  These should include:
    //          - (nGate equations component : imported gate component)
    //          - n : X
    //          - alpha_n : alpha_X
    //          - beta_n : beta_X
    //          - t : t

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.f
    #      Iterate through the variables in each dummy component, and add a clone of each variable 
    #      to the destination component. 
    while(dummy_gate.variableCount()):
        imported_gate.addVariable(dummy_gate.variable(0))
    
    while(dummy_controller.variableCount()):
        controller.addVariable(dummy_controller.variable(0))

    #      More connections are needed.  These should include:
    #          - (n_gate equations component : imported gate component)
    #          - n : X
    #          - alpha_n : alpha_X
    #          - beta_n : beta_X
    #          - t : t

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>10.g</strong> Connect all the variables in the nGate equations component to the dummy variables in the imported gate component.
                    These connections should be:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><emphasis>nGate equations component : imported gate component</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>n : X</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>alpha_n : alpha_X</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>beta_n : beta_X</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>t : t</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Repeat for the controller component and the potassium channel component.
                    Fix the variable interfaces and validate the model, expecting there to be no errors.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.g
    //      Connect all the variables in the nGate equations component to the dummy variables
    //      in the imported gate component.
    //      Repeat for the controller component and the potassium channel component.
    //      Fix the variable interfaces and validate the model, expecting there to be no errors.
    libcellml::Variable::addEquivalence(nGateEquations-&gt;variable("n"), importedGate-&gt;variable("X"));
    libcellml::Variable::addEquivalence(nGateEquations-&gt;variable("alpha_n"), importedGate-&gt;variable("alpha_X"));
    libcellml::Variable::addEquivalence(nGateEquations-&gt;variable("beta_n"), importedGate-&gt;variable("beta_X"));
    libcellml::Variable::addEquivalence(nGateEquations-&gt;variable("t"), importedGate-&gt;variable("t"));
    libcellml::Variable::addEquivalence(controller-&gt;variable("t"), kChannel-&gt;variable("t"));
    libcellml::Variable::addEquivalence(controller-&gt;variable("V"), kChannel-&gt;variable("V"));

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.g
    #      Connect all the variables in the n_gate equations component to the dummy variables
    #      in the imported gate component.
    #      Repeat for the controller component and the potassium channel component.
    #      Fix the variable interfaces and validate the model, expecting there to be no errors.
    Variable.addEquivalence(n_gate_equations.variable('n'), imported_gate.variable('X'))
    Variable.addEquivalence(n_gate_equations.variable('alpha_n'), imported_gate.variable('alpha_X'))
    Variable.addEquivalence(n_gate_equations.variable('beta_n'), imported_gate.variable('beta_X'))
    Variable.addEquivalence(n_gate_equations.variable('t'), imported_gate.variable('t'))
    Variable.addEquivalence(controller.variable('t'), k_channel.variable('t'))
    Variable.addEquivalence(controller.variable('V'), k_channel.variable('V'))

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>10.h</strong> Make sure that the output variable from this component - the potassium current - is available at the top level, and with a public and private interface.
                    You’ll need to create a dummy variable in the potassium channel component and link it appropriately.
                    Validate your model and expect no errors.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.h
    //      Make sure that the output variable from this component - the potassium current - 
    //      is available at the top level, and with a public interface.  You'll need to create
    //      a dummy variable in the potassium channel component and link it appropriately.
    kChannel-&gt;addVariable(kChannelEquations-&gt;variable("i_K")-&gt;clone());
    libcellml::Variable::addEquivalence(kChannelEquations-&gt;variable("i_K"), kChannel-&gt;variable("i_K"));
    kChannel-&gt;variable("i_K")-&gt;setInterfaceType("public_and_private");
    model-&gt;fixVariableInterfaces();

    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.h
    #      Make sure that the output variable from this component - the potassium current - 
    #      is available at the top level, and with a public interface.  You'll need to create
    #      a dummy variable in the potassium channel component and link it appropriately.
    k_channel.addVariable(k_channel_equations.variable('i_K').clone())
    Variable.addEquivalence(k_channel_equations.variable('i_K'), k_channel.variable('i_K'))
    k_channel.variable('i_K').setInterfaceType('public_and_private')
    model.fixVariableInterfaces()

    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <paragraph>The <literal classes="code">Analyser</literal> class can only operate on a flat (ie: import-free) model.
                In order to do the final check before serialising our model for output, we will use the importer to create a flattened version of the model to submit for analysis.</paragraph>
            <container classes="dothis">
                <paragraph><strong>10.i</strong> Create a flat version of the model and submit it for analysis.  Print the errors</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  10.i 
    //      Create a flattened version of the final model using the Importer::flattenModel(model)
    //      function.  Run this through the analyser and expect there to be no issues reported.
    auto flatModel = importer-&gt;flattenModel(model);
    analyser-&gt;analyseModel(flatModel);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  10.i 
    #      Create a flattened version of the final model using the Importer.flattenModel(model)
    #      function.  Run this through the analyser and expect there to be no issues reported.
    flatModel = importer.flattenModel(model)
    analyser.analyseModel(flatModel)
    print_issues(analyser)

</literal_block>
            </container>
            <container classes="nb">
                <paragraph>Note that at this point an analysis of the unflattened model will still show errors, but that’s totally fine.</paragraph>
            </container>
        </section>
        <section ids="step-11-output-the-model" names="step\ 11:\ output\ the\ model">
            <title>Step 11: Output the model</title>
            <container classes="dothis">
                <paragraph><strong>11.a</strong> Create a <literal classes="code">Printer</literal> instance and use it to serialise the model.
                    This creates a string containing the CellML-formatted version of the model.
                    Write this to a file called “PotassiumChannelModel.cellml”; you will need this in <reference internal="True" refuri="../hh_tutorial4/index#generatemembranemodel"><inline classes="std std-ref">Tutorial 4</inline></reference>.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.cpp" xml:space="preserve">    //  11.a 
    //      Create a Printer instance and use it to serialise the model.  This creates a string
    //      containing the CellML-formatted version of the model.  Write this to a file called
    //      "PotassiumChannelModel.cellml".
    auto printer = libcellml::Printer::create();
    std::ofstream outFile("PotassiumChannelModel.cellml");
    outFile &lt;&lt; printer-&gt;printModel(model);
    outFile.close();

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial2/createPotassiumChannelModel_completed.py" xml:space="preserve">    #  11.a 
    #      Create a Printer instance and use it to serialise the model.  This creates a string
    #      containing the CellML-formatted version of the model.  Write this to a file called
    #      'PotassiumChannelModel.cellml'.
    printer = Printer()
    write_file = open('PotassiumChannelModel.cellml', 'w')
    write_file.write(printer.printModel(model))
    write_file.close()

</literal_block>
            </container>
        </section>
    </section>
</document>
