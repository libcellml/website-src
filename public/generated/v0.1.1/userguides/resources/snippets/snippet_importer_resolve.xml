<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/resources/snippets/snippet_importer_resolve.rst">
    <target refid="snippet-importer-resolve"></target>
    <container classes="sphinx-tabs" ids="snippet-importer-resolve" names="snippet_importer_resolve">
        <container>
            <container classes="item">
                <container>
                    <paragraph>C++</paragraph>
                </container>
            </container>
            <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/resources/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Resolve the import dependencies (if any) and flatten the model.

    if(model-&gt;hasUnresolvedImports()) {
        auto importer = libcellml::Importer::create();

        // Submit the model to the importer and the absolute location 
        // against which the import reference paths will be resolved.
        importer-&gt;resolveImports(model, "");

        printIssues(importer);

        // Print a list of dependencies for the current unflattened model.
        printImportDependencies(model);

        // Retrieve a "flattened" (ie: import-free) model from the importer,
        // and use it to over-write the current model.
        model = importer-&gt;flattenModel(model);

        printImportDependencies(model);
    }

</literal_block>
                <paragraph>Full context: <download_reference filename="89c84d26a969eb1182bbdc7a0ffbaf8a/simulationToolDev.cpp" refdoc="resources/snippets/snippet_importer_resolve" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
            </container>
        </container>
        <container>
            <container classes="item">
                <container>
                    <paragraph>Python</paragraph>
                </container>
            </container>
            <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/resources/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Resolve any import dependencies (if present) in the model.

    if(model.hasUnresolvedImports()) {

        # Create an Importer instance.
        importer = Importer()

        # Submit the model to the importer and the absolute location 
        # against which the import reference paths will be resolved.
        importer.resolveModelImports(model, "resources/")
        print_issues_to_terminal(importer)

        # Print a list of sources that this model requires. This list will 
        # be empty after the model has been flattened.
        print_import_dependencies(model)

        # Retrieve a "flattened" (ie: import-free) model from the importer,
        # and use it to over-write the current model.
        model = importer.flattenModel(model)
    }

</literal_block>
                <paragraph>Full context: <download_reference filename="b302646fbd7722934aed90a32900e1e2/simulationToolDev.py" refdoc="resources/snippets/snippet_importer_resolve" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
            </container>
        </container>
    </container>
</document>
