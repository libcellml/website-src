<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/hsor001/Projects/cellml/documentation/tutorials/resources/snippets/snippet_generator_generate_and_output.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="snippet-generator-generate-and-output"></target>
    <container classes="sphinx-tabs" ids="snippet-generator-generate-and-output" names="snippet_generator_generate_and_output" type="tab-element">
        <div aria-label="Tabbed content" classes="closeable" role="tablist">
            <button aria-controls="panel-0-0-0" aria-selected="true" classes="sphinx-tabs-tab" ids="tab-0-0-0" name="0-0" role="tab" tabindex="0">C++ snippet</button>
            <button aria-controls="panel-0-0-1" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-1" name="0-1" role="tab" tabindex="-1">Python snippet</button>
        </div>
        <div aria-labelledby="tab-0-0-0" classes="sphinx-tabs-panel" ids="panel-0-0-0" name="0-0" role="tabpanel" tabindex="0">
            <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/hsor001/Projects/cellml/documentation/tutorials/resources/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Generate runnable code in other language formats for this model.

    // Create a Generator instance.  Note that by default this uses the C language profile.
    auto generator = libcellml::Generator::create();

    // Pass the generator the model for processing.
    generator-&gt;setModel(analyser-&gt;model());
    printIssues(generator);

</literal_block>
            <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/hsor001/Projects/cellml/documentation/tutorials/resources/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Retrieve and write the interface code (*.h) and implementation code (*.c) to files.
    std::ofstream outFile("sineComparisonExample.h");
    outFile &lt;&lt; generator-&gt;interfaceCode();
    outFile.close();

    outFile.open("sineComparisonExample.c");
    outFile &lt;&lt; generator-&gt;implementationCode();
    outFile.close();

    // If required, change the generator profile to Python.
    auto profile = libcellml::GeneratorProfile::create(libcellml::GeneratorProfile::Profile::PYTHON);
    generator-&gt;setProfile(profile);

    // Retrieve and write the implementation code (*.py) to a file.
    outFile.open("sineComparisonExample.py");
    outFile &lt;&lt; generator-&gt;implementationCode();
    outFile.close();

</literal_block>
            <paragraph>Full context: <download_reference filename="89c84d26a969eb1182bbdc7a0ffbaf8a/simulationToolDev.cpp" refdoc="resources/snippets/snippet_generator_generate_and_output" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
        </div>
        <div aria-labelledby="tab-0-0-1" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-1" name="0-1" role="tabpanel" tabindex="0">
            <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/hsor001/Projects/cellml/documentation/tutorials/resources/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Generate runnable code in other language formats for this model.

    # Create a Generator instance.  Note that by default this is the C language.
    generator = Generator()

    # Pass the generator the analysed model for processing.
    generator.processModel(analyser.model())
    print_issues_to_terminal(generator)

</literal_block>
            <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/hsor001/Projects/cellml/documentation/tutorials/resources/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Retrieve and write the interface code (*.h) and implementation code (*.cpp) to files.
    write_file = open("sineComparisonExample.h", "w")
    write_file.write(generator.interfaceCode())
    write_file.close()

    write_file = open("sineComparisonExample.cpp", "w")
    write_file.write(generator.implementationCode())
    write_file.close()

    # If required, change the generator profile to Python and reprocess the model.
    profile = GeneratorProfile(GeneratorProfile.Profile.PYTHON)
    generator.setProfile(profile)
    generator.processModel(model)

    # Retrieve and write the implementation code (*.py) to a file.
    write_file = open("sineComparisonExample.py", "w")
    write_file.write(generator.implementationCode())
    write_file.close()

</literal_block>
            <paragraph>Full context: <download_reference filename="b302646fbd7722934aed90a32900e1e2/simulationToolDev.py" refdoc="resources/snippets/snippet_generator_generate_and_output" refdomain="" refexplicit="True" reftarget="/resources/code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
        </div>
    </container>
</document>
