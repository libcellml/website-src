<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/src/docs/dev_building_web_assembly.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <section ids="building-libcellml-for-use-in-the-browser" names="building\ libcellml\ for\ use\ in\ the\ browser">
        <title>Building <emphasis>libCellML</emphasis> for use in the Browser</title>
        <paragraph>To build <emphasis>libCellML</emphasis> for the browser, we use the emscripten toolchain to create web assembly binaries.
            Here, we will go through the process of building web assembly binaries on macOS.
            For other operating systems, modifications to these instructions will have to be made.
            Any modifications required are expected to be self evident – with this in mind these instructions should be universally applicable.</paragraph>
        <section ids="preparation" names="preparation">
            <title>Preparation</title>
            <paragraph>To build <emphasis>libCellML</emphasis> for the browser, we will need the following tools ready for use.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Emscripten</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Compiler toolchain</paragraph>
                </list_item>
                <list_item>
                    <paragraph>CMake (at least version 3.14)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Git</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="building" names="building">
            <title>Building</title>
            <paragraph><emphasis>libCellML</emphasis> requires two dependencies to be built before <emphasis>libCellML</emphasis> itself can be built.
                We will clone and build those first and then move on to building <emphasis>libCellML</emphasis>.</paragraph>
            <section ids="dependencies" names="dependencies">
                <title>Dependencies</title>
                <paragraph>Start by creating a directory under which all our files will live and make it our current directory for subsequent commands:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">mkdir emscripten
cd emscripten</literal_block>
                <paragraph>Now, we can clone our dependencies (we suggest using these exact repositories other repositories may work but these repositories are known to work):</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">git clone https://github.com/OpenCMISS-Dependencies/zlib.git -b v1.2.3
git clone https://github.com/OpenCMISS-Dependencies/libxml2.git -b v2.9.10</literal_block>
                <paragraph>We will create two directories to hold the build files:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">mkdir build-zlib-release
mkdir build-libxml2-release</literal_block>
                <paragraph>Then, we will configure, build, and install <emphasis>zlib</emphasis> as this is required by <emphasis>libxml2</emphasis>.
                    We will install <emphasis>zlib</emphasis> under our emscripten working directory and <strong>not</strong> into the system directories:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">emcmake cmake -S zlib -B build-zlib-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=usr/local -DBUILD_SHARED_LIBS=OFF</literal_block>
                <paragraph>Here, we have configured the project using the emscripten wrapper script <literal classes="code" language="">emcmake</literal>.
                    This script sets up environment variables for us to make building with the emscripten compilers easy.
                    We also configure the <emphasis>zlib</emphasis> library to be built in <strong>Release</strong> mode and set the install prefix relative to the <strong>current</strong> directory.
                    However, this is not an issue for us as the <strong>source</strong> and <strong>build</strong> directories are sibling directories.</paragraph>
                <paragraph>To build and install the <emphasis>zlib</emphasis> library, we simply issue these commands:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd build-zlib-release
make
make install</literal_block>
                <paragraph>Next, we follow a similar procedure for building <emphasis>libxml2</emphasis>.
                    Start by making the current directory the parent of the zlib build directory:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd ..</literal_block>
                <paragraph>Then, as before, configure the library:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">emcmake cmake -S libxml2 -B build-libxml2-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=usr/local -DZLIB_DIR=../usr/local/lib/cmake/ZLIB-1.2.3/ -DBUILD_SHARED_LIBS=OFF -DLIBXML2_WITH_ICONV=OFF -DLIBXML2_WITH_LZMA=OFF -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_TESTS=OFF -DLIBXML2_WITH_PROGRAMS=OFF</literal_block>
                <paragraph>There are seven additions to the configure command this time:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>We set <literal classes="code" language="">ZLIB_DIR</literal> to enable the configuration to find our <emphasis>zlib</emphasis> library we just installed, <literal classes="code" language="">-DZLIB_DIR=../usr/local/lib/cmake/ZLIB-1.2.3/</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building a shared <emphasis>libxml2</emphasis> library, -DBUILD_SHARED_LIBS=OFF.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building <emphasis>libxml2</emphasis> with iconv, -DLIBXML2_WITH_ICONV=OFF.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building <emphasis>libxml2</emphasis> with lzma compression, -DLIBXML2_WITH_LZMA=OFF.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building <emphasis>libxml2</emphasis> with Python, -DLIBXML2_WITH_PYTHON.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building <emphasis>libxml2</emphasis> with tests, -DLIBXML2_WITH_TESTS=OFF; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>We turn off building <emphasis>libxml2</emphasis> with programs, -DLIBXML2_WITH_PROGRAMS=OFF.</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>As a general note, it is better to specify the variable <literal classes="code" language="">ZLIB_DIR</literal> as an absolute path and not a relative path as we have done here.
                    Feel free to use the absolute path when you are configuring <emphasis>libxml2</emphasis>.</paragraph>
                <paragraph>Then, as before, we simply issue the build and install commands:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd build-libxml2-release
make
make install</literal_block>
                <paragraph>That is all that is required for preparing the dependencies ready for <emphasis>libCellML</emphasis>.</paragraph>
            </section>
            <section ids="libcellml" names="libcellml">
                <title>libCellML</title>
                <paragraph>Following a similar approach to building the dependencies, we can now configure and build <emphasis>libCellML</emphasis>.
                    We don’t install <emphasis>libCellML</emphasis> when building for web assembly, so there is no install command in the instructions.</paragraph>
                <paragraph>To get started, we will make our current directory the <literal classes="code" language="">emscripten</literal> directory we made at the start.
                    Assuming we are in the directory where we left off from preparing the dependencies, we simply change to the parent directory:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd ..</literal_block>
                <paragraph>If your current directory is not where the dependency instructions left off then modify the command as appropriate for your situation.</paragraph>
                <paragraph>Now, let’s get the source code using <literal classes="code" language="">git clone</literal>:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">git clone https://github.com/cellml/libcellml.git</literal_block>
                <paragraph>Now, we will create a build directory:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">mkdir build-libcellml-release</literal_block>
                <paragraph>We can now configure the library:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">emcmake cmake -S libcellml -B build-libcellml-release -DLibXml2_DIR=../usr/local/lib/cmake/libxml2-2.9.10/ -DBUILD_TYPE=Release</literal_block>
                <paragraph>As with the earlier note, it is best if <literal classes="code" language="">LibXml2_DIR</literal> is an absolute path and not a relative path as shown here.</paragraph>
                <paragraph>The last thing we have to do is build the library:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd build-libcellml-release
make</literal_block>
                <paragraph>That should be everything done.</paragraph>
            </section>
        </section>
        <section ids="outcome" names="outcome">
            <title>Outcome</title>
            <paragraph>Given that all of the above worked you should have the following four files <literal classes="code" language="">libcellml.js</literal>, <literal classes="code" language="">libcellml.wasm</literal>, <literal classes="code" language="">libcellml.common.js</literal>, and <literal classes="code" language="">libcellml.common.wasm</literal> in the <literal classes="code" language="">src/bindings/javascript/</literal> relative to the <emphasis>libCellML</emphasis> build directory where we left off above.</paragraph>
        </section>
        <section ids="test" names="test">
            <title>Test</title>
            <paragraph>We can test the <emphasis>libCellML</emphasis> WebAssembly to make sure everything works.
                From the <emphasis>libCellML</emphasis> build directory <literal classes="code" language="">build-libcellml-release</literal>, we can run the test command:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">ctest -V</literal_block>
            <paragraph>The first time the tests are run the node modules required for running the tests are installed.
                This can take a while to complete, please be patient while the node modules install.
                Subsequent running of the tests will not require node modules to be installed and the tests will be run in a much more timely manner.
                If all the tests passed, you should see:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">100% tests passed, 0 tests failed out of 1</literal_block>
            <paragraph>A few lines up from the bottom of the output from the above command.</paragraph>
        </section>
    </section>
</document>
