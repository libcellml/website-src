<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classlibcellml_1_1VariablePair" kind="class" language="C++" prot="public">
    <compoundname>libcellml::VariablePair</compoundname>
    <includes refid="types_8h" local="no">types.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibcellml_1_1VariablePair_1a14d7da4da7855937a3a0a5a861bfa918" prot="private" static="no" mutable="no">
        <type>VariablePairImpl *</type>
        <definition>VariablePairImpl* libcellml::VariablePair::mPimpl</definition>
        <argsstring></argsstring>
        <name>mPimpl</name>
        <qualifiedname>libcellml::VariablePair::mPimpl</qualifiedname>
        <briefdescription>
<para>Forward declaration for pImpl idiom,. </para>
        </briefdescription>
        <detaileddescription>
<para>Private member to implementation pointer,. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="213" column="22" bodyfile="libcellml/types.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a7445b205d1b9b2f6861fa6ca6a78ad44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::VariablePair::~VariablePair</definition>
        <argsstring>()</argsstring>
        <name>~VariablePair</name>
        <qualifiedname>libcellml::VariablePair::~VariablePair</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="163" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a8a851ae762cdb1053afed8be5a17d4e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref></type>
        <definition>VariablePtr libcellml::VariablePair::variable1</definition>
        <argsstring>() const</argsstring>
        <name>variable1</name>
        <qualifiedname>libcellml::VariablePair::variable1</qualifiedname>
        <briefdescription>
<para>Get the first variable in the pair. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the first variable in the pair.</para>
<para><simplesect kind="return"><para>The first variable in the pair. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="188" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a8cd61be70dacae8d2126ff2c3972321f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref></type>
        <definition>VariablePtr libcellml::VariablePair::variable2</definition>
        <argsstring>() const</argsstring>
        <name>variable2</name>
        <qualifiedname>libcellml::VariablePair::variable2</qualifiedname>
        <briefdescription>
<para>Get the second variable in the pair. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the second variable in the pair.</para>
<para><simplesect kind="return"><para>The second variable in the pair. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="197" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a49788fd1c4ba53985643a3f5c4cb27a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::VariablePair::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>libcellml::VariablePair::isValid</qualifiedname>
        <briefdescription>
<para>Test to see if this variable pair is valid. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to see if both the variables in this variable pair are not <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this variable pair is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="207" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a1f22e34948666fbb0d7ac5a32df7cd0c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::VariablePair::VariablePair</definition>
        <argsstring>()=delete</argsstring>
        <name>VariablePair</name>
        <qualifiedname>libcellml::VariablePair::VariablePair</qualifiedname>
        <briefdescription>
<para>Constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="164" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a15342d12a27b19fba80c172bcfa80904" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::VariablePair::VariablePair</definition>
        <argsstring>(const VariablePair &amp;rhs)=delete</argsstring>
        <name>VariablePair</name>
        <qualifiedname>libcellml::VariablePair::VariablePair</qualifiedname>
        <param>
          <type>const <ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="165" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a811ff291bb0410398b1fa1ca5b3be4da" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>libcellml::VariablePair::VariablePair</definition>
        <argsstring>(VariablePair &amp;&amp;rhs) noexcept=delete</argsstring>
        <name>VariablePair</name>
        <qualifiedname>libcellml::VariablePair::VariablePair</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="166" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a1475d80aa459a754080de8a61f913fe1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref> &amp;</type>
        <definition>VariablePair &amp; libcellml::VariablePair::operator=</definition>
        <argsstring>(VariablePair rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>libcellml::VariablePair::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="167" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a46b9895de338d9a5d02f1878d771d269" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::VariablePair::VariablePair</definition>
        <argsstring>(const VariablePtr &amp;variable1, const VariablePtr &amp;variable2)</argsstring>
        <name>VariablePair</name>
        <qualifiedname>libcellml::VariablePair::VariablePair</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable2</declname>
        </param>
        <briefdescription>
<para>Constructor with two variables as parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="210" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibcellml_1_1VariablePair_1a670afdcbd8183fcec944f6b5499752c5" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a6b568d1251dec59e864e6ea189da9320" kindref="member">VariablePairPtr</ref></type>
        <definition>static VariablePairPtr libcellml::VariablePair::create</definition>
        <argsstring>(const VariablePtr &amp;variable1, const VariablePtr &amp;variable2) noexcept</argsstring>
        <name>create</name>
        <qualifiedname>libcellml::VariablePair::create</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable2</declname>
        </param>
        <briefdescription>
<para>Create a variable pair object. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory method to create a <ref refid="namespacelibcellml_1a6b568d1251dec59e864e6ea189da9320" kindref="member">VariablePairPtr</ref>. Create a variable pair with variable 1 and variable 2 with::</para>
<para>VariablePairPtr variablePair = libcellml::VariablePairPtr::create(variable1, variable2);</para>
<para><simplesect kind="return"><para>A smart pointer to a <ref refid="namespacelibcellml_1a6b568d1251dec59e864e6ea189da9320" kindref="member">VariablePairPtr</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/types.h" line="179" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classlibcellml_1_1VariablePair" kindref="compound">VariablePair</ref> is a class containing two <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref>. It may be used to define:<itemizedlist>
<listitem><para>a connection between parent components; or</para>
</listitem><listitem><para>an equivalence between two variables; </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>libcellml::VariablePair</label>
        <link refid="classlibcellml_1_1VariablePair"/>
      </node>
    </collaborationgraph>
    <location file="libcellml/types.h" line="160" column="1" bodyfile="libcellml/types.h" bodystart="161" bodyend="214"/>
    <listofallmembers>
      <member refid="classlibcellml_1_1VariablePair_1a670afdcbd8183fcec944f6b5499752c5" prot="public" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>create</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a49788fd1c4ba53985643a3f5c4cb27a6" prot="public" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>isValid</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a14d7da4da7855937a3a0a5a861bfa918" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>mPimpl</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a1475d80aa459a754080de8a61f913fe1" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>operator=</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a8a851ae762cdb1053afed8be5a17d4e4" prot="public" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>variable1</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a8cd61be70dacae8d2126ff2c3972321f" prot="public" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>variable2</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a1f22e34948666fbb0d7ac5a32df7cd0c" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>VariablePair</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a15342d12a27b19fba80c172bcfa80904" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>VariablePair</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a811ff291bb0410398b1fa1ca5b3be4da" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>VariablePair</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a46b9895de338d9a5d02f1878d771d269" prot="private" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>VariablePair</name></member>
      <member refid="classlibcellml_1_1VariablePair_1a7445b205d1b9b2f6861fa6ca6a78ad44" prot="public" virt="non-virtual"><scope>libcellml::VariablePair</scope><name>~VariablePair</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
