<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classlibcellml_1_1Units" kind="class" language="C++" prot="public">
    <compoundname>libcellml::Units</compoundname>
    <basecompoundref refid="classlibcellml_1_1NamedEntity" prot="public" virt="non-virtual">libcellml::NamedEntity</basecompoundref>
    <basecompoundref refid="classlibcellml_1_1ImportedEntity" prot="public" virt="non-virtual">libcellml::ImportedEntity</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Units &gt;</basecompoundref>
    <includes refid="units_8h" local="no">units.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00" prot="public" static="no" strong="yes">
        <type></type>
        <name>Prefix</name>
        <qualifiedname>libcellml::Units::Prefix</qualifiedname>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a22b5eaafe6fb938b3b2891d0f3906ad2" prot="public">
          <name>YOTTA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a0519b9f7263b02d9e3893bcbc303612a" prot="public">
          <name>ZETTA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00aea4545dc0b3e4cf4d918e774c2a628fd" prot="public">
          <name>EXA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a715760353fbc0c6d786307ad2b49a4c1" prot="public">
          <name>PETA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a9618ae4ea9a9674a9d984c15dd141a3e" prot="public">
          <name>TERA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00ac236475a2d098d9e27c22aefc4a371ee" prot="public">
          <name>GIGA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00af589eafcf087c11af27e475bafb047fa" prot="public">
          <name>MEGA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a5d4e3412b9b63156d7aa43ad2002656d" prot="public">
          <name>KILO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a190c1d95158fa444fbdecda03df6718f" prot="public">
          <name>HECTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a4c58909e3e346d760020821544e98065" prot="public">
          <name>DECA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a269f2327044f7e909294034f5fe0ffc7" prot="public">
          <name>DECI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00aaa5c9d297f93dedc4deb80d745006319" prot="public">
          <name>CENTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a8f06f9f0a1efa42a2ad3ec880b0a1f70" prot="public">
          <name>MILLI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a14cb593ad5e4233d8e92219001350821" prot="public">
          <name>MICRO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a10f8d0bbfdc321f233df0a2d98bdcd35" prot="public">
          <name>NANO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00acb918ce26c8f5aca35e80022078babd7" prot="public">
          <name>PICO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00aefe80440d7ef4bc74b95230ecb7a1104" prot="public">
          <name>FEMTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00aa9ab72edf6d1981e900ac1607a2ff266" prot="public">
          <name>ATTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00a706f4385df22b62e4c5895fafe519c03" prot="public">
          <name>ZEPTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00ab8ee75a6587ec02e78a2169abd890733" prot="public">
          <name>YOCTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The Prefix enum class. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum describing the prefixes that are available for units. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="86" column="5" bodyfile="libcellml/units.h" bodystart="87" bodyend="108"/>
      </memberdef>
      <memberdef kind="enum" id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" prot="public" static="no" strong="yes">
        <type></type>
        <name>StandardUnit</name>
        <qualifiedname>libcellml::Units::StandardUnit</qualifiedname>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a9eb458d6ca6ff22260e9e51b88790c61" prot="public">
          <name>AMPERE</name>
          <briefdescription>
<para>Base SI unit ampere. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a322769c382a604a77db3c2a1f8cad412" prot="public">
          <name>BECQUEREL</name>
          <briefdescription>
<para>Derived SI unit becquerel. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a1a551ee5f15c2759470d5b8336ca9875" prot="public">
          <name>CANDELA</name>
          <briefdescription>
<para>Base SI unit candela. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09af90920e9f881a8b5ec473031e82aadf1" prot="public">
          <name>COULOMB</name>
          <briefdescription>
<para>Derived SI unit coulomb. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a926e302e733f127c24c9b42dd320ada3" prot="public">
          <name>DIMENSIONLESS</name>
          <briefdescription>
<para>Convenience unit dimensionless. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a3c8bc70b3a5332d0b04a6b3bf6750b78" prot="public">
          <name>FARAD</name>
          <briefdescription>
<para>Derived SI unit farad. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a6f4862a9a705c7dea77f97b43ebfb7df" prot="public">
          <name>GRAM</name>
          <briefdescription>
<para>Convenience unit gram. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a48bf014c704c9eaae100a98006a37bf7" prot="public">
          <name>GRAY</name>
          <briefdescription>
<para>Derived SI unit gray. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a450ed2e34e0bf66f0aed387cf4585341" prot="public">
          <name>HENRY</name>
          <briefdescription>
<para>Derived SI unit henry. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ac68e2571811124f759bb7bdf050a9814" prot="public">
          <name>HERTZ</name>
          <briefdescription>
<para>Derived SI unit hertz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a55965cb2e44a4d04e5825ca8be3fd253" prot="public">
          <name>JOULE</name>
          <briefdescription>
<para>Derived SI unit joule. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a70c8e01fa745ac1a1a8e0d4fa2dd6d52" prot="public">
          <name>KATAL</name>
          <briefdescription>
<para>Derived SI unit katal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ac0315574fefc0a9fd9295c02a2a0813f" prot="public">
          <name>KELVIN</name>
          <briefdescription>
<para>Base SI unit kelvin. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a996c00b1bbbb63ff592053227258d511" prot="public">
          <name>KILOGRAM</name>
          <briefdescription>
<para>Base SI unit kilogram. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ab1181e65a1d86e656199c10246874ac5" prot="public">
          <name>LITRE</name>
          <briefdescription>
<para>Convenience unit litre. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a901707be2dc5dfa56c98c904047f33b2" prot="public">
          <name>LUMEN</name>
          <briefdescription>
<para>Derived SI unit lumen. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09aedd8153edfbf90e24bb5b1fa78d62450" prot="public">
          <name>LUX</name>
          <briefdescription>
<para>Derived SI unit lux. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a98e754b78dfe23409a3827e42e3be892" prot="public">
          <name>METRE</name>
          <briefdescription>
<para>Base SI unit metre. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a19e18628a526b3a71237c775f522193d" prot="public">
          <name>MOLE</name>
          <briefdescription>
<para>Base SI unit mole. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a543a80c769aa267bbf02f31e2d7e07e6" prot="public">
          <name>NEWTON</name>
          <briefdescription>
<para>Derived SI unit newton. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a5040f9d5c3a37f7a91b1f3587cab103b" prot="public">
          <name>OHM</name>
          <briefdescription>
<para>Derived SI unit ohm. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09af80da8a4f16f14db3157cf220fe04402" prot="public">
          <name>PASCAL</name>
          <briefdescription>
<para>Derived SI unit pascal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a04dd61a45bf5136473a3453fae3c8457" prot="public">
          <name>RADIAN</name>
          <briefdescription>
<para>Derived SI unit radian. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a2200becb80f0019c4a2ccecec350d0db" prot="public">
          <name>SECOND</name>
          <briefdescription>
<para>Base SI unit second. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a64eeced6cae6abd85f7dd2278bfa86ba" prot="public">
          <name>SIEMENS</name>
          <briefdescription>
<para>Derived SI unit siemens. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ae85cca1b2d01ce4521c09814dbc9e065" prot="public">
          <name>SIEVERT</name>
          <briefdescription>
<para>Derived SI unit sievert. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a3741ff2e31be4faed635c72d6114cf72" prot="public">
          <name>STERADIAN</name>
          <briefdescription>
<para>Derived SI unit steradian. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ab371953ebe9d2fa4b3bc5229c42c97c4" prot="public">
          <name>TESLA</name>
          <briefdescription>
<para>Derived SI unit tesla. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ad99987f942ecbf2eea5d50ebf50723e6" prot="public">
          <name>VOLT</name>
          <briefdescription>
<para>Derived SI unit volt. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09ab3f66ef250236846e5e3801ada2c0061" prot="public">
          <name>WATT</name>
          <briefdescription>
<para>Derived SI unit watt. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09a2b75058430d6bdf39dceea3acc5b9de2" prot="public">
          <name>WEBER</name>
          <briefdescription>
<para>Derived SI unit weber. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The Standard Unit enum class. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard units that are suitable for variable declarations or attached to bare numbers in mathematics. This list of comprises the SI base units, the SI derived units with special names and symbols, and some additional units commonly used in the types of biological models likely to be defined using CellML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="119" column="5" bodyfile="libcellml/units.h" bodystart="120" bodyend="152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlibcellml_1_1Units_1a2bf2a0e9b454c55aa5dcb5aa4698697b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Model</definition>
        <argsstring></argsstring>
        <name>Model</name>
        <qualifiedname>libcellml::Units::Model</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="51" column="18" bodyfile="libcellml/units.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibcellml_1_1Units_1afc146f8dc2dd955212134244f2676120" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::Units::~Units</definition>
        <argsstring>() override</argsstring>
        <name>~Units</name>
        <qualifiedname>libcellml::Units::~Units</qualifiedname>
        <briefdescription>
<para>Destructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a814e8e3ab8aac11d8e2ab3c1179c8307" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::Units::Units</definition>
        <argsstring>(const Units &amp;rhs)=delete</argsstring>
        <name>Units</name>
        <qualifiedname>libcellml::Units::Units</qualifiedname>
        <param>
          <type>const <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a3eeeca62d9998a308d4add586ce20a2f" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>libcellml::Units::Units</definition>
        <argsstring>(Units &amp;&amp;rhs) noexcept=delete</argsstring>
        <name>Units</name>
        <qualifiedname>libcellml::Units::Units</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a1a377f28e5a9f92d179059d89f9460a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> &amp;</type>
        <definition>Units &amp; libcellml::Units::operator=</definition>
        <argsstring>(Units rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>libcellml::Units::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="57" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1adc1df676f9179770507ae8857144bb5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::Units::Units</definition>
        <argsstring>()</argsstring>
        <name>Units</name>
        <qualifiedname>libcellml::Units::Units</qualifiedname>
        <briefdescription>
<para>Constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="572" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a81ce881c672e56d12f2483d84711e2b8" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::Units::Units</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Units</name>
        <qualifiedname>libcellml::Units::Units</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor with std::string parameter,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="573" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a0ab2e0efb3e04323f15cb623344ecc91" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::doIsResolved</definition>
        <argsstring>() const override</argsstring>
        <name>doIsResolved</name>
        <qualifiedname>libcellml::Units::doIsResolved</qualifiedname>
        <reimplements refid="classlibcellml_1_1ImportedEntity_1acb6abf695325f1b364957fdb7e8ed118">doIsResolved</reimplements>
        <briefdescription>
<para>Virtual method for implementing isResolved,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="575" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a49be567efb11b5a757f29651829b9188" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::doEquals</definition>
        <argsstring>(const EntityPtr &amp;other) const override</argsstring>
        <name>doEquals</name>
        <qualifiedname>libcellml::Units::doEquals</qualifiedname>
        <reimplements refid="classlibcellml_1_1NamedEntity_1abbfab9f85d6fdb71383a4ed1be25859d">doEquals</reimplements>
        <param>
          <type>const <ref refid="namespacelibcellml_1abc54532bee96378fd9caabd0d50f615e" kindref="member">EntityPtr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Virtual implementation method for equals,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="577" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1ad78ca3627138dd721623a4de81f34fe2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitsImpl *</type>
        <definition>UnitsImpl * libcellml::Units::pFunc</definition>
        <argsstring>()</argsstring>
        <name>pFunc</name>
        <qualifiedname>libcellml::Units::pFunc</qualifiedname>
        <briefdescription>
<para>Forward declaration for pImpl idiom,. </para>
        </briefdescription>
        <detaileddescription>
<para>Getter for private implementation pointer,. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="581" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a700c45f680b5db005604ccaa4bfe9edc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const UnitsImpl *</type>
        <definition>const UnitsImpl * libcellml::Units::pFunc</definition>
        <argsstring>() const</argsstring>
        <name>pFunc</name>
        <qualifiedname>libcellml::Units::pFunc</qualifiedname>
        <briefdescription>
<para>Const getter for private implementation pointer,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="582" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibcellml_1_1Units_1af27a180eae0574782368f60447a43528" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref></type>
        <definition>static UnitsPtr libcellml::Units::create</definition>
        <argsstring>() noexcept</argsstring>
        <name>create</name>
        <qualifiedname>libcellml::Units::create</qualifiedname>
        <briefdescription>
<para>Create a <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory method to create a <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. Create a blank units with::</para>
<para>UnitsPtr units = <ref refid="classlibcellml_1_1Units_1af27a180eae0574782368f60447a43528" kindref="member">libcellml::Units::create()</ref>;</para>
<para>or a named units with name &quot;Units&quot; with::</para>
<para>UnitsPtr units = <ref refid="classlibcellml_1_1Units_1af27a180eae0574782368f60447a43528" kindref="member">libcellml::Units::create</ref>(&quot;Units&quot;);</para>
<para><simplesect kind="return"><para>A smart pointer to a <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="73" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1ac8d785ee75deacf8c1f57ed9991bee58" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref></type>
        <definition>static UnitsPtr libcellml::Units::create</definition>
        <argsstring>(const std::string &amp;name) noexcept</argsstring>
        <name>create</name>
        <qualifiedname>libcellml::Units::create</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="78" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1af8d21b1e69350e6ef873af66cc66033e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double libcellml::Units::scalingFactor</definition>
        <argsstring>(const UnitsPtr &amp;units1, const UnitsPtr &amp;units2, bool checkCompatibility=true)</argsstring>
        <name>scalingFactor</name>
        <qualifiedname>libcellml::Units::scalingFactor</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkCompatibility</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return the scaling factor difference between two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be interpreted as <computeroutput>factor</computeroutput>, where units2 = factor*units1. If compatibility checking is turned on and the units are not compatible the factor returned is 0.0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first units to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second units to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkCompatibility</parametername>
</parameternamelist>
<parameterdescription>
<para>Set <computeroutput>true</computeroutput> for compatibility checking, or <computeroutput>false</computeroutput> to ignore base units. The default is <computeroutput>true</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The factor units2/units1. Where the units are incompatible and <computeroutput>checkCompatibility</computeroutput> is <computeroutput>true</computeroutput> then the factor returned is 0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="505" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a75442487f2f10d34adc608c8e1f58961" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool libcellml::Units::compatible</definition>
        <argsstring>(const UnitsPtr &amp;units1, const UnitsPtr &amp;units2)</argsstring>
        <name>compatible</name>
        <qualifiedname>libcellml::Units::compatible</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units2</declname>
        </param>
        <briefdescription>
<para>Test to determine whether two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are compatible or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are considered to be compatible if they share the same units, independently of their scaling (e.g. volt and volt are compatible as are volt and millivolt).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first units to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second units to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are compatible, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="519" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1af34482d549c1c86ab12fd85e676b5371" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool libcellml::Units::equivalent</definition>
        <argsstring>(const UnitsPtr &amp;units1, const UnitsPtr &amp;units2)</argsstring>
        <name>equivalent</name>
        <qualifiedname>libcellml::Units::equivalent</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> &amp;</type>
          <declname>units2</declname>
        </param>
        <briefdescription>
<para>Test to determine whether two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are equivalent or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are considered to be equivalent if they share the same unit base as well as a scaling factor of 1.0 (e.g. volt and volt are equivalent but volt and millivolt are not).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first units to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second units to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> are equivalent, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="534" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibcellml_1_1Units_1ae94131ba8bc6ef395dbf59f7a122859e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::isBaseUnit</definition>
        <argsstring>() const</argsstring>
        <name>isBaseUnit</name>
        <qualifiedname>libcellml::Units::isBaseUnit</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> is a base unit. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> is a base unit, return <computeroutput>true</computeroutput> if it is a base unit and <computeroutput>false</computeroutput> otherwise. A unit is an &quot;irreducible unit&quot; or &quot;base unit&quot; for the model by virtue of the fact that it is not derived from any other unit(s).</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> is a base unit, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a3f043b44338f8a7857772e0bf366dd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(const std::string &amp;reference, const std::string &amp;prefix, double exponent=1.0, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes optional arguments <computeroutput>exponent</computeroutput>, and <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The string prefix for the unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="178" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a7a5a3c5e1de8ac1ba14fd8a968a82c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(const std::string &amp;reference, Prefix prefix, double exponent=1.0, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00" kindref="member">Prefix</ref></type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes optional arguments <computeroutput>exponent</computeroutput>, and <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for the unit, one of Prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="195" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a07b60ae393b388c305a7ad188f001b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(const std::string &amp;reference, int prefix, double exponent, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes an optional argument <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for the unit expressed as an integer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="212" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a1c471ea1ba39da25203e2f0d046c0948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(const std::string &amp;reference, double exponent, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This variant takes the <computeroutput>std::string</computeroutput> units <computeroutput>reference</computeroutput> and an <computeroutput>exponent</computeroutput> only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent for the unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="227" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1ab066195bbb394f508536c7c0eafc6e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(const std::string &amp;reference)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>, this variant specified with only a <computeroutput>std::string</computeroutput> units <computeroutput>reference</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> units reference to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="239" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a878a4f836ee51c046f1f0607100f28eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(StandardUnit standardUnit, const std::string &amp;prefix, double exponent=1.0, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes optional arguments <computeroutput>exponent</computeroutput>, and <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The string prefix for the unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a8c6cf1bb2e813790dd9bddb2677e1b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(StandardUnit standardUnit, Prefix prefix, double exponent=1.0, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00" kindref="member">Prefix</ref></type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes optional arguments <computeroutput>exponent</computeroutput>, and <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for the unit, one of Prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="272" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1ac68eb89c7b50ab2097552c264543561d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(StandardUnit standardUnit, int prefix, double exponent, double multiplier=1.0, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This method takes an optional argument <computeroutput>multiplier</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for the unit expressed as a double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="289" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1aa137ddc82e8d5baf51f782427bd1bc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(StandardUnit standardUnit, double exponent, const std::string &amp;id=&quot;&quot;)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This variant takes the <computeroutput>StandardUnit</computeroutput> enum units <computeroutput>reference</computeroutput> and an <computeroutput>exponent</computeroutput> only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum units reference to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent for the unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional <computeroutput>std::string</computeroutput> identifier to set for this unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="304" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a55fa79c5f734e0a609a1c0fb2b35c491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::addUnit</definition>
        <argsstring>(StandardUnit standardUnit)</argsstring>
        <name>addUnit</name>
        <qualifiedname>libcellml::Units::addUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a unit to this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>.</para>
<para>Add a unit as a child of this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>, this variant specified with only a <computeroutput>StandardUnit</computeroutput> enum units <computeroutput>reference</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum units reference to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="316" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a6cfae83bc8eafd369a53c71226e28197" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::unitAttributes</definition>
        <argsstring>(size_t index, std::string &amp;reference, std::string &amp;prefix, double &amp;exponent, double &amp;multiplier, std::string &amp;id) const</argsstring>
        <name>unitAttributes</name>
        <qualifiedname>libcellml::Units::unitAttributes</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the <computeroutput>unit</computeroutput> attributes at the given <computeroutput>index</computeroutput> of this units. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the attributes for the <computeroutput>unit</computeroutput> at the index <computeroutput>index</computeroutput> of this units. If no attributes are set, default attribute values will be returned. The index must be in the range [0, #unit).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <computeroutput>unit</computeroutput> in this units to get attributes for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> reference for this <computeroutput>unit</computeroutput>. Defaults to empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for this <computeroutput>unit</computeroutput>. Defaults to empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> identifier for this <computeroutput>unit</computeroutput>. Defaults to the empty string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="332" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1af4092c9ceecd950f81eba908417ff2f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string libcellml::Units::unitAttributeReference</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>unitAttributeReference</name>
        <qualifiedname>libcellml::Units::unitAttributeReference</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the reference attribute for the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the reference attribute for the unit at the given <computeroutput>index</computeroutput>. The index must be in the range [0, #unit). Defaults to an empty string if there is no reference set or if the <computeroutput>index</computeroutput> is out of range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <computeroutput>unit</computeroutput> in this units to get the reference attribute for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>std::string</computeroutput> reference for the unit at index <computeroutput>index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="345" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a46ac5f236d766a5cef5edb8d4e82229c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string libcellml::Units::unitAttributePrefix</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>unitAttributePrefix</name>
        <qualifiedname>libcellml::Units::unitAttributePrefix</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the prefix attribute for the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the prefix attribute for the unit at the given <computeroutput>index</computeroutput>. The index must be in the range [0, #unit). Defaults to an empty string if there is no prefix set or if the <computeroutput>index</computeroutput> is out of range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <computeroutput>unit</computeroutput> in this units to get the prefix attribute for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>std::string</computeroutput> reference for the unit at index <computeroutput>index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="357" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a357166375cfd43656c7c472b7cff45cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libcellml::Units::unitAttributeExponent</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>unitAttributeExponent</name>
        <qualifiedname>libcellml::Units::unitAttributeExponent</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the exponent attribute for the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the exponent attribute for the unit at the given <computeroutput>index</computeroutput>. The index must be in the range [0, #unit). Defaults to 1.0 if there is no exponent set or if the <computeroutput>index</computeroutput> is out of range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <computeroutput>unit</computeroutput> in this units to get the exponent attribute for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>double</computeroutput> exponent for the unit at index <computeroutput>index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="369" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a046e3f4bb4b11509ef7a5a45398e0d65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libcellml::Units::unitAttributeMultiplier</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>unitAttributeMultiplier</name>
        <qualifiedname>libcellml::Units::unitAttributeMultiplier</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the multiplier attribute for the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the multiplier attribute for the unit at the given <computeroutput>index</computeroutput>. The index must be in the range [0, #unit). Defaults to 1.0 if there is no multiplier set or if the <computeroutput>index</computeroutput> is out of range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <computeroutput>unit</computeroutput> in this units to get the multiplier attribute for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>double</computeroutput> multiplier for the unit at index <computeroutput>index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="381" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a98570e6da12b2004cabf1d5233ce7105" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::unitAttributes</definition>
        <argsstring>(const std::string &amp;reference, std::string &amp;prefix, double &amp;exponent, double &amp;multiplier, std::string &amp;id) const</argsstring>
        <name>unitAttributes</name>
        <qualifiedname>libcellml::Units::unitAttributes</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the <computeroutput>unit</computeroutput> attributes for the given <computeroutput>reference</computeroutput>.</para>
<para>Get the attributes for the first <computeroutput>unit</computeroutput> that matches the reference <computeroutput>reference</computeroutput>. If no attributes are set, default attribute values will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> reference for the <computeroutput>unit</computeroutput> attributes to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for this <computeroutput>unit</computeroutput>. Defaults to empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> identifier for this <computeroutput>unit</computeroutput>. Defaults to the empty string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="397" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a4842d120d26330c48e8572d12397b459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::unitAttributes</definition>
        <argsstring>(StandardUnit standardUnit, std::string &amp;prefix, double &amp;exponent, double &amp;multiplier, std::string &amp;id) const</argsstring>
        <name>unitAttributes</name>
        <qualifiedname>libcellml::Units::unitAttributes</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>exponent</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the <computeroutput>unit</computeroutput> attributes for the given <computeroutput>standardUnit</computeroutput>.</para>
<para>Get the attributes for the first <computeroutput>unit</computeroutput> that matches the reference <computeroutput>standardUnit</computeroutput>. If no attributes are set, default attribute values will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum unit reference attributes to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix for this <computeroutput>unit</computeroutput>. Defaults to empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier for this <computeroutput>unit</computeroutput>. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> identifier for this <computeroutput>unit</computeroutput>. Defaults to the empty string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="413" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a1c9c8ac6e1e28a6f736f5ede77cef0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::removeUnit</definition>
        <argsstring>(size_t index)</argsstring>
        <name>removeUnit</name>
        <qualifiedname>libcellml::Units::removeUnit</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Remove the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes the unit at the given <computeroutput>index</computeroutput> position. <computeroutput>index</computeroutput> must be in the range [0, #unit).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the unit to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the units were replaced, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="425" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1ab394d45d6a1f3a2525dbb68b366b6f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::removeUnit</definition>
        <argsstring>(const std::string &amp;reference)</argsstring>
        <name>removeUnit</name>
        <qualifiedname>libcellml::Units::removeUnit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the unit with the given reference.</para>
<para>Remove the first unit found that matches the <computeroutput>std::string</computeroutput> reference <computeroutput>reference</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>std::string</computeroutput> unit reference of the unit to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the units were replaced, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="438" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1aaca3f037c86ff9591cd448e850824527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::removeUnit</definition>
        <argsstring>(StandardUnit standardUnit)</argsstring>
        <name>removeUnit</name>
        <qualifiedname>libcellml::Units::removeUnit</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" kindref="member">StandardUnit</ref></type>
          <declname>standardUnit</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the unit with the given reference.</para>
<para>Remove the first unit found that matches <computeroutput>StandardUnit</computeroutput> enum reference <computeroutput>reference</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>standardUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>StandardUnit</computeroutput> enum unit reference of the unit to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the units were replaced, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="451" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1af07482ba4161ddb1375fc9060c464d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::removeAllUnits</definition>
        <argsstring>()</argsstring>
        <name>removeAllUnits</name>
        <qualifiedname>libcellml::Units::removeAllUnits</qualifiedname>
        <briefdescription>
<para>Remove all units stored in this units object. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears all units that have been added to this units object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="458" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a4f458792b572c57dbef9bbeea8a58258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libcellml::Units::setSourceUnits</definition>
        <argsstring>(ImportSourcePtr &amp;importSource, const std::string &amp;name)</argsstring>
        <name>setSourceUnits</name>
        <qualifiedname>libcellml::Units::setSourceUnits</qualifiedname>
        <param>
          <type><ref refid="namespacelibcellml_1ac2c4e6d1793d7214616c1548d8a9f502" kindref="member">ImportSourcePtr</ref> &amp;</type>
          <declname>importSource</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the source of the units for this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Make this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> an imported units by defining an import model from which to extract the named <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. This <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> will be added to the importSource&apos;s list of dependent entities.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>importSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The import source from which the named <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> originates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> in the imported model to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="470" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a9e448209c749774e18546c785e03e34d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::Units::unitCount</definition>
        <argsstring>() const</argsstring>
        <name>unitCount</name>
        <qualifiedname>libcellml::Units::unitCount</qualifiedname>
        <briefdescription>
<para>Get the number of units that compose this units. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of units contained by this units object.</para>
<para><simplesect kind="return"><para>The number of units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="479" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a07e14a3449ca878e2bdd622d8285ab5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::requiresImports</definition>
        <argsstring>() const</argsstring>
        <name>requiresImports</name>
        <qualifiedname>libcellml::Units::requiresImports</qualifiedname>
        <briefdescription>
<para>Check whether there are any imported child <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine whether this units has any imported units.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> when this <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> relies on <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> which are imported, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="489" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1af798571cbd187e074f6e6a87d343709b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref></type>
        <definition>UnitsPtr libcellml::Units::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>libcellml::Units::clone</qualifiedname>
        <briefdescription>
<para>Create a clone of this units. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a full separate copy of this units without copying the parent. Thus the cloned (returned) version of this units will not have a parent set even if this units does.</para>
<para><simplesect kind="return"><para>a new <ref refid="namespacelibcellml_1a3259debe09f915678b203e98100ea10a" kindref="member">UnitsPtr</ref> to the cloned units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="545" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a1e806f8b1d8b6657d9d8367f4adc85ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::Units::setUnitId</definition>
        <argsstring>(size_t index, const std::string &amp;id)</argsstring>
        <name>setUnitId</name>
        <qualifiedname>libcellml::Units::setUnitId</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Set the identifier of the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The operation will return <computeroutput>true</computeroutput> if the identifier is assigned, or <computeroutput>false</computeroutput> if the <computeroutput>index</computeroutput> is out of range.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="555" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1Units_1a6762e9a839fe05e230c97cdc05383fc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string libcellml::Units::unitId</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>unitId</name>
        <qualifiedname>libcellml::Units::unitId</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the identifier string of the unit at the given <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the identifier string of the unit at the given <computeroutput>index</computeroutput>. If the given index is out of range then the empty string is returned.</para>
<para><simplesect kind="return"><para>An identifier string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/units.h" line="565" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>Class for <ref refid="classlibcellml_1_1Units" kindref="compound">Units</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>libcellml::Entity</label>
        <link refid="classlibcellml_1_1Entity"/>
      </node>
      <node id="5">
        <label>libcellml::ImportedEntity</label>
        <link refid="classlibcellml_1_1ImportedEntity"/>
      </node>
      <node id="2">
        <label>libcellml::NamedEntity</label>
        <link refid="classlibcellml_1_1NamedEntity"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>libcellml::ParentedEntity</label>
        <link refid="classlibcellml_1_1ParentedEntity"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>libcellml::Units</label>
        <link refid="classlibcellml_1_1Units"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>std::enable_shared_from_this&lt; Units &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>libcellml::Entity</label>
        <link refid="classlibcellml_1_1Entity"/>
      </node>
      <node id="5">
        <label>libcellml::ImportedEntity</label>
        <link refid="classlibcellml_1_1ImportedEntity"/>
      </node>
      <node id="2">
        <label>libcellml::NamedEntity</label>
        <link refid="classlibcellml_1_1NamedEntity"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>libcellml::ParentedEntity</label>
        <link refid="classlibcellml_1_1ParentedEntity"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>libcellml::Units</label>
        <link refid="classlibcellml_1_1Units"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>std::enable_shared_from_this&lt; Units &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libcellml/units.h" line="45" column="1" bodyfile="libcellml/units.h" bodystart="50" bodyend="583"/>
    <listofallmembers>
      <member refid="classlibcellml_1_1Units_1a3f043b44338f8a7857772e0bf366dd4a" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a7a5a3c5e1de8ac1ba14fd8a968a82c5c" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a07b60ae393b388c305a7ad188f001b50" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a1c471ea1ba39da25203e2f0d046c0948" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1ab066195bbb394f508536c7c0eafc6e00" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a878a4f836ee51c046f1f0607100f28eb" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a8c6cf1bb2e813790dd9bddb2677e1b06" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1ac68eb89c7b50ab2097552c264543561d" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1aa137ddc82e8d5baf51f782427bd1bc2f" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a55fa79c5f734e0a609a1c0fb2b35c491" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>addUnit</name></member>
      <member refid="classlibcellml_1_1Units_1af798571cbd187e074f6e6a87d343709b" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>clone</name></member>
      <member refid="classlibcellml_1_1Units_1a75442487f2f10d34adc608c8e1f58961" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>compatible</name></member>
      <member refid="classlibcellml_1_1Units_1af27a180eae0574782368f60447a43528" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>create</name></member>
      <member refid="classlibcellml_1_1Units_1ac8d785ee75deacf8c1f57ed9991bee58" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>create</name></member>
      <member refid="classlibcellml_1_1Units_1a49be567efb11b5a757f29651829b9188" prot="private" virt="virtual"><scope>libcellml::Units</scope><name>doEquals</name></member>
      <member refid="classlibcellml_1_1Units_1a0ab2e0efb3e04323f15cb623344ecc91" prot="private" virt="virtual"><scope>libcellml::Units</scope><name>doIsResolved</name></member>
      <member refid="classlibcellml_1_1Entity_1aaf1f5a51be3e2fcc22113b2c2428967c" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>Entity</name></member>
      <member refid="classlibcellml_1_1Entity_1a5ccd682791b20cc0431cd3abe265f734" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>Entity</name></member>
      <member refid="classlibcellml_1_1Entity_1ae20d00ec2f8b44c6874ca43a46fb84a1" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>equals</name></member>
      <member refid="classlibcellml_1_1Units_1af34482d549c1c86ab12fd85e676b5371" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>equivalent</name></member>
      <member refid="classlibcellml_1_1ParentedEntity_1abe6ca3f56655c2d1ea97d18712f78c22" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>hasAncestor</name></member>
      <member refid="classlibcellml_1_1ParentedEntity_1a24d037686b4ccd86539a35c84c267813" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>hasParent</name></member>
      <member refid="classlibcellml_1_1Entity_1a05439119b7eeab2fc61f8aa5a86eb092" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>id</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a4a489fc27bfdc0ffeda7dc13bc874ab3" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>ImportedEntity</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a6136c548bd3634a5b6b553d8cf97926a" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>ImportedEntity</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a14451a2854699b2e31c67f0afc4d28d3" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>importReference</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1af9db33dab9b6151683656b9f4744188a" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>importSource</name></member>
      <member refid="classlibcellml_1_1Units_1ae94131ba8bc6ef395dbf59f7a122859e" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>isBaseUnit</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a25f7d4abe5d3ca67c97ad341cb4853e7" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>isImport</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a46f296ae869244d37926acb5b25aff12" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>isResolved</name></member>
      <member refid="classlibcellml_1_1Units_1a2bf2a0e9b454c55aa5dcb5aa4698697b" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>Model</name></member>
      <member refid="classlibcellml_1_1NamedEntity_1ab643dec674588048b4532c3f2819726a" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>name</name></member>
      <member refid="classlibcellml_1_1Units_1a1a377f28e5a9f92d179059d89f9460a8" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>operator=</name></member>
      <member refid="classlibcellml_1_1ParentedEntity_1ac662ca494335a944f845b1a432822292" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>parent</name></member>
      <member refid="classlibcellml_1_1Units_1ad78ca3627138dd721623a4de81f34fe2" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>pFunc</name></member>
      <member refid="classlibcellml_1_1Units_1a700c45f680b5db005604ccaa4bfe9edc" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>pFunc</name></member>
      <member refid="classlibcellml_1_1Units_1acf9016eebccfe85a10288a3b3051da00" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>Prefix</name></member>
      <member refid="classlibcellml_1_1Units_1af07482ba4161ddb1375fc9060c464d14" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>removeAllUnits</name></member>
      <member refid="classlibcellml_1_1Entity_1a959de09716024274913a396cf76b9076" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>removeId</name></member>
      <member refid="classlibcellml_1_1Units_1a1c9c8ac6e1e28a6f736f5ede77cef0b0" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>removeUnit</name></member>
      <member refid="classlibcellml_1_1Units_1ab394d45d6a1f3a2525dbb68b366b6f8c" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>removeUnit</name></member>
      <member refid="classlibcellml_1_1Units_1aaca3f037c86ff9591cd448e850824527" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>removeUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a07e14a3449ca878e2bdd622d8285ab5e" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>requiresImports</name></member>
      <member refid="classlibcellml_1_1Units_1af8d21b1e69350e6ef873af66cc66033e" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>scalingFactor</name></member>
      <member refid="classlibcellml_1_1Entity_1a13bdf688cdf007be5abad5dc628fd4ad" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setId</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1ab5e0d32cc24fced7cd19362f08e162eb" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setImportReference</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1a0c9e48f04f3039f5538d9d86d59a479e" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setImportSource</name></member>
      <member refid="classlibcellml_1_1NamedEntity_1a2528924ae9b2a69d8ff3b5b9b6f31d88" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setName</name></member>
      <member refid="classlibcellml_1_1Units_1a4f458792b572c57dbef9bbeea8a58258" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setSourceUnits</name></member>
      <member refid="classlibcellml_1_1Units_1a1e806f8b1d8b6657d9d8367f4adc85ce" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>setUnitId</name></member>
      <member refid="classlibcellml_1_1Units_1a0d2387a42a6df513cfa55d6ee8e6bf09" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>StandardUnit</name></member>
      <member refid="classlibcellml_1_1Units_1a357166375cfd43656c7c472b7cff45cb" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributeExponent</name></member>
      <member refid="classlibcellml_1_1Units_1a046e3f4bb4b11509ef7a5a45398e0d65" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributeMultiplier</name></member>
      <member refid="classlibcellml_1_1Units_1a46ac5f236d766a5cef5edb8d4e82229c" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributePrefix</name></member>
      <member refid="classlibcellml_1_1Units_1af4092c9ceecd950f81eba908417ff2f5" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributeReference</name></member>
      <member refid="classlibcellml_1_1Units_1a6cfae83bc8eafd369a53c71226e28197" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributes</name></member>
      <member refid="classlibcellml_1_1Units_1a98570e6da12b2004cabf1d5233ce7105" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributes</name></member>
      <member refid="classlibcellml_1_1Units_1a4842d120d26330c48e8572d12397b459" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitAttributes</name></member>
      <member refid="classlibcellml_1_1Units_1a9e448209c749774e18546c785e03e34d" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitCount</name></member>
      <member refid="classlibcellml_1_1Units_1a6762e9a839fe05e230c97cdc05383fc0" prot="public" virt="non-virtual"><scope>libcellml::Units</scope><name>unitId</name></member>
      <member refid="classlibcellml_1_1Units_1a814e8e3ab8aac11d8e2ab3c1179c8307" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>Units</name></member>
      <member refid="classlibcellml_1_1Units_1a3eeeca62d9998a308d4add586ce20a2f" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>Units</name></member>
      <member refid="classlibcellml_1_1Units_1adc1df676f9179770507ae8857144bb5c" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>Units</name></member>
      <member refid="classlibcellml_1_1Units_1a81ce881c672e56d12f2483d84711e2b8" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>Units</name></member>
      <member refid="classlibcellml_1_1Entity_1a5f2e6419f17f23f551bcd1ada87986b3" prot="public" virt="pure-virtual"><scope>libcellml::Units</scope><name>~Entity</name></member>
      <member refid="classlibcellml_1_1ImportedEntity_1aae51f703ab7b5b36264f03eba9d27744" prot="public" virt="pure-virtual"><scope>libcellml::Units</scope><name>~ImportedEntity</name></member>
      <member refid="classlibcellml_1_1Units_1afc146f8dc2dd955212134244f2676120" prot="private" virt="non-virtual"><scope>libcellml::Units</scope><name>~Units</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
