<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/Users/hsor001/Projects/cellml/sandbox/userguides/resources/snippets/snippet_edit_encapsulation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="snippet-edit-encapsulation1"></target>
    <container classes="toggle" ids="snippet-edit-encapsulation1" names="snippet_edit_encapsulation1">
        <container classes="header-left">
            <paragraph>Edit encapsulation structure of a model</paragraph>
        </container>
        <paragraph>This example shows how the component <literal classes="code">tomatoes</literal> which was orininally a child of the <literal classes="code">vegetables</literal> component, could be moved to become a child of the <literal classes="code">fruit</literal> component instead.
            When run, this snippet will give the output:</paragraph>
        <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Model 'quickstart_editEncapsulation' has 2 components
  - Component 'fruit' has 0 child components
  - Component 'vegetables' has 1 child components
      - Component 'tomatoes' has 0 child components

Model 'quickstart_editEncapsulation' has 2 components
  - Component 'fruit' has 1 child components
      - Component 'tomatoes' has 0 child components
  - Component 'vegetables' has 0 child components</literal_block>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" classes="closeable" role="tablist">
                <button aria-controls="panel-0-Qysr" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-Qysr" name="Qysr" role="tab" tabindex="0">C++</button>
                <button aria-controls="panel-0-UHl0aG9u" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-UHl0aG9u" name="UHl0aG9u" role="tab" tabindex="-1">Python</button>
            </div>
            <div aria-labelledby="tab-0-Qysr" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-Qysr" name="Qysr" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;libcellml&gt;
#include "../../utilities/utilities.h"

int main()
{
    // Parse example model and component from the file provided.
    std::string inFileName = "/resources/quickstart_editEncapsulation1.cellml";
    std::ifstream inFile(inFileName);
    std::stringstream inFileContents;
    inFileContents &lt;&lt; inFile.rdbuf();
    auto parser = libcellml::Parser::create();
    auto model = parser-&gt;parseModel(inFileContents.str());

    printEncapsulationStructureToTerminal(model);

    auto fruit = model-&gt;component("fruit");
    auto veges = model-&gt;component("vegetables");

    // The tomatoes component starts off as a child of the vegetables component.
    auto tomatoes = veges-&gt;component("tomatoes");

    // Move the tomatoes into its correct fruit component, and check the return boolean is true.
    auto success = fruit-&gt;addComponent(tomatoes);
    assert(success);

    printEncapsulationStructureToTerminal(model);
}</literal_block>
            </div>
            <div aria-labelledby="tab-0-UHl0aG9u" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-UHl0aG9u" name="UHl0aG9u" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">from libcellml import Parser
from utilities import print_encapsulation_structure_to_terminal

if __name__ == "__main__":

    read_file = open("/resources/quickstart_editEncapsulation.cellml", "r")

    #  Create a parser and read the file.
    parser = Parser()
    model = parser.parseModel(read_file.read())

    # Print the current encapsulation structure to the terminal.
    print_encapsulation_structure_to_terminal(model)

    # Retrieve the components.  Note that the "tomatoes" component starts
    # out as a child of the "vegetables" component.
    vegetables = model.component("vegetables")
    fruit = model.component("fruit")
    tomatoes = model.component("tomatoes")

    # Move the "tomatoes" component into "fruit".
    success = fruit.addComponent(tomatoes)

    # Print the structure and check that the components have
    # been transferred as expected.
    print_encapsulation_structure_to_terminal(model)</literal_block>
            </div>
        </container>
    </container>
</document>
