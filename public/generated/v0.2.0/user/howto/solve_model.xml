<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/Users/hsor001/Projects/cellml/sandbox/tmp/userguides/howto/solve_model.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="solve-model"></target>
    <section ids="interact-with-generated-code" names="interact\ with\ generated\ code">
        <title>Interact with generated code</title>
        <topic classes="contents local" ids="contents" names="contents">
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="interface-with-the-generated-code">Interface with the generated code</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id2" refid="set-solution-parameters">Set solution parameters</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id3" refid="initialise-solution-variables">Initialise solution variables</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id4" refid="compute-the-starting-values-of-variables">Compute the starting values of variables</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id5" refid="prepare-files-for-output">Prepare files for output</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id6" refid="perform-the-integration">Perform the integration</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="interface-with-the-generated-code" names="interface\ with\ the\ generated\ code">
            <title refid="id1">Interface with the generated code</title>
            <paragraph>The generated code only represents the mathematical formulation of the model, so in order to find its solution it must be connected to an integration algorithm.
                This integration is not provided, but some basic functions to interact with the model are.
                Depending on whether youâ€™re using C++ or Python, the generated code must either be compiled with your solver, or imported as a module.</paragraph>
            <target refid="snippet-build-solver"></target>
            <container classes="toggle" ids="snippet-build-solver" names="snippet_build_solver">
                <container classes="header-left">
                    <paragraph>Build a solver using generated code</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>This file should be saved as a CMakeLists.txt file for generation with CMake.</paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
        </section>
        <section ids="set-solution-parameters" names="set\ solution\ parameters">
            <title refid="id2">Set solution parameters</title>
            <paragraph>In this very simple example we take the parameters for the integration step size and number of steps from command line arguments.
                Calling the function below at the start of your program retrieves the command line arguments for use at runtime.</paragraph>
            <target refid="snippet-command-line"></target>
            <container classes="toggle" ids="snippet-command-line" names="snippet_command_line">
                <container classes="header-left">
                    <paragraph>Retrieve command line parameters</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
            <paragraph>The specific parameters related to the model are available within the generated code, and can be retrieved from their structures as shown below.</paragraph>
            <target refid="snippet-get-parameters"></target>
            <container classes="toggle" ids="snippet-get-parameters" names="snippet_get_parameters">
                <container classes="header-left">
                    <paragraph>Retrieve model parameters</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
        </section>
        <section ids="initialise-solution-variables" names="initialise\ solution\ variables">
            <title refid="id3">Initialise solution variables</title>
            <paragraph>As well as setting the number and size of the steps, the basic integration algorithm needs to store the state variables and their rates, as well as any other variables that are independent of the integration.</paragraph>
            <target refid="snippet-allocate-arrays"></target>
            <container classes="toggle" ids="snippet-allocate-arrays" names="snippet_allocate_arrays">
                <container classes="header-left">
                    <paragraph>Allocate solution arrays</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
            <paragraph>Note that since the number of state variables must be identical to the number of rates, the same <emphasis>create states array</emphasis> function can be used to allocate storage for both of them.</paragraph>
            <paragraph>Following allocation, the states and constants can be initialised using the function provided.</paragraph>
        </section>
        <section ids="compute-the-starting-values-of-variables" names="compute\ the\ starting\ values\ of\ variables">
            <title refid="id4">Compute the starting values of variables</title>
            <paragraph>There are two kinds of variables stored in the generated code: those that require updating each step (the rates, but also any other variables which these depend upon); and those which do not affect the progress of the solution (everything else).
                The former kind is updated when the <emphasis>compute rates</emphasis> function is called, and the latter when the <emphasis>compute variables</emphasis> function is called.
                Constants clearly need be calculated only once, using the <emphasis>compute computed constants</emphasis> function.</paragraph>
            <paragraph>In this example we compute everything at the initial point so as to be able to output the starting values to the terminal.</paragraph>
            <target refid="snippet-initialise-solver"></target>
            <container classes="toggle" ids="snippet-initialise-solver" names="snippet_initialise_solver">
                <container classes="header-left">
                    <paragraph>Initialise variables</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
        </section>
        <section ids="prepare-files-for-output" names="prepare\ files\ for\ output">
            <title refid="id5">Prepare files for output</title>
            <paragraph>The solution is to be written directly to an output file during the iteration process, and this step is simply the preparation for that.
                The file is created and opened, and the columns labelled with information from the model.</paragraph>
            <target refid="snippet-create-output"></target>
            <container classes="toggle" ids="snippet-create-output" names="snippet_create_output">
                <container classes="header-left">
                    <paragraph>Prepare for output</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
        </section>
        <section ids="perform-the-integration" names="perform\ the\ integration">
            <title refid="id6">Perform the integration</title>
            <paragraph>There are myriad stepping schemes for numerical integration, but here we use the very basic Euler method.
                At each step, new rates are calculated by calling the <emphasis>compute rates</emphasis> function.
                The states are then extrapolated from the rates using the Euler approximation step.
                In this example we are writing the output at every step, so we also need to update the variables too using the <emphasis>compute variables</emphasis> function, and everything is written to the output file.</paragraph>
            <target refid="snippet-solve"></target>
            <container classes="toggle" ids="snippet-solve" names="snippet_solve">
                <container classes="header-left">
                    <paragraph>Perform the integration and output</paragraph>
                </container>
                <container classes="sphinx-tabs" type="tab-element">
                    <container>
                        <container>
                            <container>
                                <paragraph>C++ snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                        </container>
                    </container>
                    <container>
                        <container>
                            <container>
                                <paragraph>Python snippet</paragraph>
                            </container>
                        </container>
                        <container>
                            <paragraph>Full context: <download_reference refdoc="howto/solve_model" refdomain="" refexplicit="True" reftarget="/resources/code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                        </container>
                    </container>
                </container>
            </container>
        </section>
    </section>
</document>
