<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classlibcellml_1_1AnalyserEquation" kind="class" language="C++" prot="public">
    <compoundname>libcellml::AnalyserEquation</compoundname>
    <includes refid="analyserequation_8h" local="no">analyserequation.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <qualifiedname>libcellml::AnalyserEquation::Type</qualifiedname>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3a9a8afbb6ec254d5e66d39f7b4d7e33e5" prot="public">
          <name>TRUE_CONSTANT</name>
          <briefdescription>
<para>An equation that defines a true constant, e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>x = 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3ab8befa98ee1426656b1b200d3eceea1e" prot="public">
          <name>VARIABLE_BASED_CONSTANT</name>
          <briefdescription>
<para>An equation that describes a variable-based constant, e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>x = y+z where y and z are true constants. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3a96f459e16830e7d7620bdbd8cfe660b7" prot="public">
          <name>ODE</name>
          <briefdescription>
<para>An equation that describes an ordinary differential equation, e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>d(y)/dt = f(t, x). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3a6cabb83d4a0a16b0ab0f536d81220bac" prot="public">
          <name>NLA</name>
          <briefdescription>
<para>An equation that is used to compute one or several algebraic variables, e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>x+y = f(z) where x and y are known, but not z. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3a5c5e440cc3d6aed1fada5b21a045e2fe" prot="public">
          <name>ALGEBRAIC</name>
          <briefdescription>
<para>An equation that is used to compute an algebraic variable, e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>y = f(x). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3a3932d629fb5e2be9d09b3a4485b3cc9d" prot="public">
          <name>EXTERNAL</name>
          <briefdescription>
<para>A placeholder equation to capture the dependency of the model on an external variable. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The type of an equation. </para>
        </briefdescription>
        <detaileddescription>
<para>The type of an equation, i.e. whether it is used to compute a true constant, a variable-based constant, a rate, an algebraic variable, or whether it is placeholder for an external variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="41" column="5" bodyfile="libcellml/analyserequation.h" bodystart="42" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlibcellml_1_1AnalyserEquation_1a8fc045316ed5fb70e4aabbca5f40d8ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Analyser</definition>
        <argsstring></argsstring>
        <name>Analyser</name>
        <qualifiedname>libcellml::AnalyserEquation::Analyser</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Analyser" kindref="compound">Analyser</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="31" column="18" bodyfile="libcellml/analyserequation.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibcellml_1_1AnalyserEquation_1ac8eaf366f631dc8f97059fd3b2b04cbf" prot="private" static="no" mutable="no">
        <type>AnalyserEquationImpl *</type>
        <definition>AnalyserEquationImpl* libcellml::AnalyserEquation::mPimpl</definition>
        <argsstring></argsstring>
        <name>mPimpl</name>
        <qualifiedname>libcellml::AnalyserEquation::mPimpl</qualifiedname>
        <briefdescription>
<para>Private member to implementation pointer,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="201" column="26" bodyfile="libcellml/analyserequation.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a9352b7e8219481b101f2b9c9d69593ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserEquation::~AnalyserEquation</definition>
        <argsstring>()</argsstring>
        <name>~AnalyserEquation</name>
        <qualifiedname>libcellml::AnalyserEquation::~AnalyserEquation</qualifiedname>
        <briefdescription>
<para>Destructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="51" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a0a08557704d85eff8467d6660b90f574" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserEquation::AnalyserEquation</definition>
        <argsstring>(const AnalyserEquation &amp;rhs)=delete</argsstring>
        <name>AnalyserEquation</name>
        <qualifiedname>libcellml::AnalyserEquation::AnalyserEquation</qualifiedname>
        <param>
          <type>const <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a37dec8235a4b676e882bab81a74db973" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserEquation::AnalyserEquation</definition>
        <argsstring>(AnalyserEquation &amp;&amp;rhs) noexcept=delete</argsstring>
        <name>AnalyserEquation</name>
        <qualifiedname>libcellml::AnalyserEquation::AnalyserEquation</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1ad71fb060026d4a2aef2f0b046f878976" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> &amp;</type>
        <definition>AnalyserEquation &amp; libcellml::AnalyserEquation::operator=</definition>
        <argsstring>(AnalyserEquation rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>libcellml::AnalyserEquation::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="54" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1af4b960a77b5435be063c2b1af39e7db7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserEquation::AnalyserEquation</definition>
        <argsstring>()</argsstring>
        <name>AnalyserEquation</name>
        <qualifiedname>libcellml::AnalyserEquation::AnalyserEquation</qualifiedname>
        <briefdescription>
<para>Constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="198" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1abab0c917b46d6f12181833d36ba4bc06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref></type>
        <definition>Type libcellml::AnalyserEquation::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>libcellml::AnalyserEquation::type</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref> of this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref> of this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a9f6bbbcc3d024238463f72085e0ba338" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1ac0baf0fbed265d4ccb07118569060148" kindref="member">AnalyserEquationAstPtr</ref></type>
        <definition>AnalyserEquationAstPtr libcellml::AnalyserEquation::ast</definition>
        <argsstring>() const</argsstring>
        <name>ast</name>
        <qualifiedname>libcellml::AnalyserEquation::ast</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classlibcellml_1_1AnalyserEquationAst" kindref="compound">AnalyserEquationAst</ref> for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the <ref refid="classlibcellml_1_1AnalyserEquationAst" kindref="compound">AnalyserEquationAst</ref> for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The <ref refid="classlibcellml_1_1AnalyserEquationAst" kindref="compound">AnalyserEquationAst</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="83" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1af8bd6fa91b4c4cdae351c4819ef07a4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserEquation::dependencyCount</definition>
        <argsstring>() const</argsstring>
        <name>dependencyCount</name>
        <qualifiedname>libcellml::AnalyserEquation::dependencyCount</qualifiedname>
        <briefdescription>
<para>Get the number of dependencies for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of dependencies for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The number of dependencies for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="92" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a695e5c0102277c82d1498a9e9d300d5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserEquationPtr &gt; libcellml::AnalyserEquation::dependencies</definition>
        <argsstring>() const</argsstring>
        <name>dependencies</name>
        <qualifiedname>libcellml::AnalyserEquation::dependencies</qualifiedname>
        <briefdescription>
<para>Get the list of <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> dependencies. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the list of <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> items which correspond to the equations on which this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> depends.</para>
<para><simplesect kind="return"><para>The dependencies as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="102" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1afe6917439f199b8b9b8aa5b250b2caca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref></type>
        <definition>AnalyserEquationPtr libcellml::AnalyserEquation::dependency</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>dependency</name>
        <qualifiedname>libcellml::AnalyserEquation::dependency</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the dependency, at <computeroutput>index</computeroutput>, for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the dependency, at <computeroutput>index</computeroutput>, for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the dependency to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dependency, at <computeroutput>index</computeroutput>, on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="113" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1af29a1524a6ef14ab15f378b18842b80c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserEquation::nlaSystemIndex</definition>
        <argsstring>() const</argsstring>
        <name>nlaSystemIndex</name>
        <qualifiedname>libcellml::AnalyserEquation::nlaSystemIndex</qualifiedname>
        <briefdescription>
<para>Get the index of the NLA system of this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the index of the NLA system where this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> is used. A value of MAX_SIZE_T indicates that this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> is not used in an NLA system.</para>
<para><simplesect kind="return"><para>The index of the NLA system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="124" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1aa7c1a8f5a865d5fd6a3a29d14b039c23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserEquation::nlaSiblingCount</definition>
        <argsstring>() const</argsstring>
        <name>nlaSiblingCount</name>
        <qualifiedname>libcellml::AnalyserEquation::nlaSiblingCount</qualifiedname>
        <briefdescription>
<para>Get the number of NLA siblings for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of NLA siblings for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The number of NLA siblings for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="133" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1aa700ee1f09bdb21eb5616c8c227aa5f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserEquationPtr &gt; libcellml::AnalyserEquation::nlaSiblings</definition>
        <argsstring>() const</argsstring>
        <name>nlaSiblings</name>
        <qualifiedname>libcellml::AnalyserEquation::nlaSiblings</qualifiedname>
        <briefdescription>
<para>Get the list of <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> NLA siblings. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the list of <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> items which are NLA siblings of this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The NLA siblings as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="143" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a4b8e40bcf4e830bc78a9389a0e500dff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref></type>
        <definition>AnalyserEquationPtr libcellml::AnalyserEquation::nlaSibling</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>nlaSibling</name>
        <qualifiedname>libcellml::AnalyserEquation::nlaSibling</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the NLA sibling, at <computeroutput>index</computeroutput>, for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the NLA sibling, at <computeroutput>index</computeroutput>, for this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the NLA sibling to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The NLA sibling, at <computeroutput>index</computeroutput>, on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="154" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a02408bc59683ad03ad5815b37843815a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserEquation::isStateRateBased</definition>
        <argsstring>() const</argsstring>
        <name>isStateRateBased</name>
        <qualifiedname>libcellml::AnalyserEquation::isStateRateBased</qualifiedname>
        <briefdescription>
<para>Test to determine if this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> relies on states and/or rates. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> relies on states and/or rates, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> relies on states and/or rates, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="166" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1af73fe4007e9a38317cc32e3d731f65bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserEquation::variableCount</definition>
        <argsstring>() const</argsstring>
        <name>variableCount</name>
        <qualifiedname>libcellml::AnalyserEquation::variableCount</qualifiedname>
        <briefdescription>
<para>Get the number of variables computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of variables computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The number of variables. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="175" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1ac6f74e8ad56da226f4161059f82b2acd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserVariablePtr &gt; libcellml::AnalyserEquation::variables</definition>
        <argsstring>() const</argsstring>
        <name>variables</name>
        <qualifiedname>libcellml::AnalyserEquation::variables</qualifiedname>
        <briefdescription>
<para>Get the variables computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the variables computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><simplesect kind="return"><para>The variables as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="184" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1ae6f1f3c73c0542222e21b8929ae99cec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref></type>
        <definition>AnalyserVariablePtr libcellml::AnalyserEquation::variable</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>variable</name>
        <qualifiedname>libcellml::AnalyserEquation::variable</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the variable, at <computeroutput>index</computeroutput>, computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the variable, at <computeroutput>index</computeroutput>, computed by this <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the variable to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The variable, at <computeroutput>index</computeroutput>, on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="195" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserEquation_1a06351cd4796ea6a99f0b1fe595f54a78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string libcellml::AnalyserEquation::typeAsString</definition>
        <argsstring>(Type type)</argsstring>
        <name>typeAsString</name>
        <qualifiedname>libcellml::AnalyserEquation::typeAsString</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the string version of a <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the string version of a <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for which we want the string version.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string version of the <ref refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" kindref="member">Type</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analyserequation.h" line="74" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classlibcellml_1_1AnalyserEquation" kindref="compound">AnalyserEquation</ref> class is for representing an equation in the context of a CellML <ref refid="classlibcellml_1_1Analyser" kindref="compound">Analyser</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>libcellml::AnalyserEquation</label>
        <link refid="classlibcellml_1_1AnalyserEquation"/>
      </node>
    </collaborationgraph>
    <location file="libcellml/analyserequation.h" line="29" column="1" bodyfile="libcellml/analyserequation.h" bodystart="30" bodyend="202"/>
    <listofallmembers>
      <member refid="classlibcellml_1_1AnalyserEquation_1a8fc045316ed5fb70e4aabbca5f40d8ec" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>Analyser</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a0a08557704d85eff8467d6660b90f574" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>AnalyserEquation</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a37dec8235a4b676e882bab81a74db973" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>AnalyserEquation</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1af4b960a77b5435be063c2b1af39e7db7" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>AnalyserEquation</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a9f6bbbcc3d024238463f72085e0ba338" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>ast</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a695e5c0102277c82d1498a9e9d300d5d" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>dependencies</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1afe6917439f199b8b9b8aa5b250b2caca" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>dependency</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1af8bd6fa91b4c4cdae351c4819ef07a4d" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>dependencyCount</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a02408bc59683ad03ad5815b37843815a" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>isStateRateBased</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1ac8eaf366f631dc8f97059fd3b2b04cbf" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>mPimpl</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a4b8e40bcf4e830bc78a9389a0e500dff" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>nlaSibling</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1aa7c1a8f5a865d5fd6a3a29d14b039c23" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>nlaSiblingCount</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1aa700ee1f09bdb21eb5616c8c227aa5f8" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>nlaSiblings</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1af29a1524a6ef14ab15f378b18842b80c" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>nlaSystemIndex</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1ad71fb060026d4a2aef2f0b046f878976" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>operator=</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1ac9db03968826b12d9cf9130f95b8edc3" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>Type</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1abab0c917b46d6f12181833d36ba4bc06" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>type</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a06351cd4796ea6a99f0b1fe595f54a78" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>typeAsString</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1ae6f1f3c73c0542222e21b8929ae99cec" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>variable</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1af73fe4007e9a38317cc32e3d731f65bb" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>variableCount</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1ac6f74e8ad56da226f4161059f82b2acd" prot="public" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>variables</name></member>
      <member refid="classlibcellml_1_1AnalyserEquation_1a9352b7e8219481b101f2b9c9d69593ca" prot="private" virt="non-virtual"><scope>libcellml::AnalyserEquation</scope><name>~AnalyserEquation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
