<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classlibcellml_1_1AnalyserModel" kind="class" language="C++" prot="public">
    <compoundname>libcellml::AnalyserModel</compoundname>
    <includes refid="analysermodel_8h" local="no">analysermodel.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <qualifiedname>libcellml::AnalyserModel::Type</qualifiedname>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
<para>The type of the model is unknown. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda5c5e440cc3d6aed1fada5b21a045e2fe" prot="public">
          <name>ALGEBRAIC</name>
          <briefdescription>
<para>The model defines a system of algebraic equations that can be solved directly. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda2b25dd65bb2cc89a2a6b151c9a3221b4" prot="public">
          <name>DAE</name>
          <briefdescription>
<para>The model defines a system of differential algebraic equations that require both an external ODE solver (e.g., CVODE) and an external NLA solver (e.g., KINSOL) to solve. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfdaccc0377a8afbf50e7094f5c23a8af223" prot="public">
          <name>INVALID</name>
          <briefdescription>
<para>The model is invalid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda6cabb83d4a0a16b0ab0f536d81220bac" prot="public">
          <name>NLA</name>
          <briefdescription>
<para>The model defines a system of (potentially non-linear) algebraic equations that require an external NLA solver (e.g., KINSOL) to solve. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda96f459e16830e7d7620bdbd8cfe660b7" prot="public">
          <name>ODE</name>
          <briefdescription>
<para>The model defines a system of ordinary differential equations that require an external ODE solver (e.g., CVODE) to solve. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda4a202316ca5ddd9ae46ec336f2cf5101" prot="public">
          <name>OVERCONSTRAINED</name>
          <briefdescription>
<para>The model is overconstrained. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfda63078ad1ad4f2e1007b7b8f451cf63ae" prot="public">
          <name>UNDERCONSTRAINED</name>
          <briefdescription>
<para>The model is underconstrainted. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfdaccd505c354dd1f201ca471b888d24604" prot="public">
          <name>UNSUITABLY_CONSTRAINED</name>
          <briefdescription>
<para>The model is unsuitably constrained. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The type of a model. </para>
        </briefdescription>
        <detaileddescription>
<para>The type of a model, i.e. whether it is unknown, invalid, underconstrained, overconstrained, or unsuitably constrained, or whether it defines a system of algebraic equations, a system of non-linear algebraic equations, a system of ordinary differential equations, or a system of differential algebraic equations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="43" column="5" bodyfile="libcellml/analysermodel.h" bodystart="44" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlibcellml_1_1AnalyserModel_1a8fc045316ed5fb70e4aabbca5f40d8ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Analyser</definition>
        <argsstring></argsstring>
        <name>Analyser</name>
        <qualifiedname>libcellml::AnalyserModel::Analyser</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1Analyser" kindref="compound">Analyser</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="31" column="18" bodyfile="libcellml/analysermodel.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibcellml_1_1AnalyserModel_1a7e7aef8a776cda3953a4e1261cb795b9" prot="private" static="no" mutable="no">
        <type>AnalyserModelImpl *</type>
        <definition>AnalyserModelImpl* libcellml::AnalyserModel::mPimpl</definition>
        <argsstring></argsstring>
        <name>mPimpl</name>
        <qualifiedname>libcellml::AnalyserModel::mPimpl</qualifiedname>
        <briefdescription>
<para>Private member to implementation pointer,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="516" column="23" bodyfile="libcellml/analysermodel.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a2bbfac8378e572deee5ff59fad77f617" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserModel::~AnalyserModel</definition>
        <argsstring>()</argsstring>
        <name>~AnalyserModel</name>
        <qualifiedname>libcellml::AnalyserModel::~AnalyserModel</qualifiedname>
        <briefdescription>
<para>Destructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a0a00aa114303227562c1deee95904cab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserModel::AnalyserModel</definition>
        <argsstring>(const AnalyserModel &amp;rhs)=delete</argsstring>
        <name>AnalyserModel</name>
        <qualifiedname>libcellml::AnalyserModel::AnalyserModel</qualifiedname>
        <param>
          <type>const <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a2bc623943a00d1860759da08f5c2bd91" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserModel::AnalyserModel</definition>
        <argsstring>(AnalyserModel &amp;&amp;rhs) noexcept=delete</argsstring>
        <name>AnalyserModel</name>
        <qualifiedname>libcellml::AnalyserModel::AnalyserModel</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1aa5e9c3b12698531b16885006ea6a38f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> &amp;</type>
        <definition>AnalyserModel &amp; libcellml::AnalyserModel::operator=</definition>
        <argsstring>(AnalyserModel rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>libcellml::AnalyserModel::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="59" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a7dbdbbbff1bbe087dadbdb8f197da35b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libcellml::AnalyserModel::AnalyserModel</definition>
        <argsstring>(const ModelPtr &amp;model)</argsstring>
        <name>AnalyserModel</name>
        <qualifiedname>libcellml::AnalyserModel::AnalyserModel</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a8964f62e8f622cfd511f6a3acd9ce628" kindref="member">ModelPtr</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Constructor,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="513" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a18748768c90b87452ef7213512736346" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>libcellml::AnalyserModel::isValid</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> is a valid model. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> is a valid model, return <computeroutput>true</computeroutput> if it is a valid model (i.e. either an algebraic or an ODE model) and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> is a valid model, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="70" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1af6f0fabf59f1782d1e29ef37e7934765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref></type>
        <definition>Type libcellml::AnalyserModel::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>libcellml::AnalyserModel::type</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref> of the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref> of the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="79" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a89f12472fcaf204eeba02dea7b753b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::hasExternalVariables</definition>
        <argsstring>() const</argsstring>
        <name>hasExternalVariables</name>
        <qualifiedname>libcellml::AnalyserModel::hasExternalVariables</qualifiedname>
        <briefdescription>
<para>Test to determine if this <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> has external variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if this <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> has external variables, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> has external variables, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a278afb0909cdfa9d4dcc8b5838fb796d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref></type>
        <definition>AnalyserVariablePtr libcellml::AnalyserModel::voi</definition>
        <argsstring>() const</argsstring>
        <name>voi</name>
        <qualifiedname>libcellml::AnalyserModel::voi</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref> of integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref> of integration of the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>, in the case of an ODE model, <computeroutput>nullptr</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para>The <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref> of integration, if an ODE model, <computeroutput>nullptr</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="112" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a716c7d786a3657e2cb591956d181d1b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserModel::stateCount</definition>
        <argsstring>() const</argsstring>
        <name>stateCount</name>
        <qualifiedname>libcellml::AnalyserModel::stateCount</qualifiedname>
        <briefdescription>
<para>Get the number of states. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of states in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The number of states. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="121" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a3d367685c74bcb824519d756405fddb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserVariablePtr &gt; libcellml::AnalyserModel::states</definition>
        <argsstring>() const</argsstring>
        <name>states</name>
        <qualifiedname>libcellml::AnalyserModel::states</qualifiedname>
        <briefdescription>
<para>Get the states. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the states in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The states as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="130" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a1ddaf43386baa67abacce03c09c37bfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref></type>
        <definition>AnalyserVariablePtr libcellml::AnalyserModel::state</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>state</name>
        <qualifiedname>libcellml::AnalyserModel::state</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the state at <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the state at the index <computeroutput>index</computeroutput> for the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the state to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The state at the given <computeroutput>index</computeroutput> on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="142" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a1d358f89dc568ae0081f3f2a7ac2cd0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserModel::variableCount</definition>
        <argsstring>() const</argsstring>
        <name>variableCount</name>
        <qualifiedname>libcellml::AnalyserModel::variableCount</qualifiedname>
        <briefdescription>
<para>Get the number of variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of variables in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The number of variables. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="151" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1abc93d7f15e54b56520b7385d2ce8f6a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserVariablePtr &gt; libcellml::AnalyserModel::variables</definition>
        <argsstring>() const</argsstring>
        <name>variables</name>
        <qualifiedname>libcellml::AnalyserModel::variables</qualifiedname>
        <briefdescription>
<para>Get the variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the variables in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The variables as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="160" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a4074fe6796d171b958b82cb22805bc33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1acfd2932a24a4fe8b5e9147ccf0a23a11" kindref="member">AnalyserVariablePtr</ref></type>
        <definition>AnalyserVariablePtr libcellml::AnalyserModel::variable</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>variable</name>
        <qualifiedname>libcellml::AnalyserModel::variable</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the variable at <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the variable at the index <computeroutput>index</computeroutput> for the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the variable to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The variable at the given <computeroutput>index</computeroutput> on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="172" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a267a1450663d071038c6db414e944cfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t libcellml::AnalyserModel::equationCount</definition>
        <argsstring>() const</argsstring>
        <name>equationCount</name>
        <qualifiedname>libcellml::AnalyserModel::equationCount</qualifiedname>
        <briefdescription>
<para>Get the number of equations. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of equations in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The number of equations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="181" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1aaf090b4d0d92a358c3dbfae9c8ed8ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref> &gt;</type>
        <definition>std::vector&lt; AnalyserEquationPtr &gt; libcellml::AnalyserModel::equations</definition>
        <argsstring>() const</argsstring>
        <name>equations</name>
        <qualifiedname>libcellml::AnalyserModel::equations</qualifiedname>
        <briefdescription>
<para>Get the equations. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the equations in the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><simplesect kind="return"><para>The equations as a <computeroutput>std::vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="190" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1acd84360a9dc930ea74f08cee4dd7a9d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelibcellml_1a077e0ba912fc57b70090ab980aba2e25" kindref="member">AnalyserEquationPtr</ref></type>
        <definition>AnalyserEquationPtr libcellml::AnalyserModel::equation</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>equation</name>
        <qualifiedname>libcellml::AnalyserModel::equation</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the equation at <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the equation at the index <computeroutput>index</computeroutput> for the <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the equation to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The equation at the given <computeroutput>index</computeroutput> on success, <computeroutput>nullptr</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="202" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1ad886c8b0e48cdfcff6fa2ba77c4358dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needEqFunction</definition>
        <argsstring>() const</argsstring>
        <name>needEqFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needEqFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;equal to&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;equal to&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;equal to&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="214" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a9433cbdeada230108c8f4460a4275123" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needNeqFunction</definition>
        <argsstring>() const</argsstring>
        <name>needNeqFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needNeqFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not equal to&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not equal to&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not equal to&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="226" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a271f3e2e2962cbed266bfc93797cd53b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needLtFunction</definition>
        <argsstring>() const</argsstring>
        <name>needLtFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needLtFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="238" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1aebeec3b9de037196de9661c76765d839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needLeqFunction</definition>
        <argsstring>() const</argsstring>
        <name>needLeqFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needLeqFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than or equal
to&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than or equal to&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;less than or equal to&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="250" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a39aae00c33cc99ac6f2c4fdf3f8c47fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needGtFunction</definition>
        <argsstring>() const</argsstring>
        <name>needGtFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needGtFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="262" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1ab4bd72e5e6aa3c886dbf6d70132e10f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needGeqFunction</definition>
        <argsstring>() const</argsstring>
        <name>needGeqFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needGeqFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than or
equal to&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than or equal to&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;greater than or equal to&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="274" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1adc242db56da221a1a7be4c75f2559816" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAndFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAndFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAndFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;and&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;and&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;and&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="285" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a5207fef52526f41cceaeef79a3f68d6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needOrFunction</definition>
        <argsstring>() const</argsstring>
        <name>needOrFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needOrFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;or&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;or&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;or&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="296" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a5975c16ac4a0d4fed3a1272a73c1ee61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needXorFunction</definition>
        <argsstring>() const</argsstring>
        <name>needXorFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needXorFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;exclusive or&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;exclusive or&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;exclusive or&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="308" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a55c852112af915e9d514930589f603a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needNotFunction</definition>
        <argsstring>() const</argsstring>
        <name>needNotFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needNotFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;not&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="319" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1ae936fbb0dda5ab43fa3f23bd59a9bf96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needMinFunction</definition>
        <argsstring>() const</argsstring>
        <name>needMinFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needMinFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;minimum&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;minimum&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;minimum&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="330" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a811fb5054989fffa85dfc13f74026b24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needMaxFunction</definition>
        <argsstring>() const</argsstring>
        <name>needMaxFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needMaxFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;maximum&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;maximum&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;maximum&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="341" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a8aa0e9544cc0e724dfb491ca4808ac06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needSecFunction</definition>
        <argsstring>() const</argsstring>
        <name>needSecFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needSecFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;secant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;secant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;secant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="352" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a1a13974abba24196e0d0eddcbc62b476" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needCscFunction</definition>
        <argsstring>() const</argsstring>
        <name>needCscFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needCscFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cosecant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cosecant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cosecant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="363" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a46216bae7b2ced7009517ccf381743d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needCotFunction</definition>
        <argsstring>() const</argsstring>
        <name>needCotFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needCotFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cotangent&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cotangent&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;cotangent&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="375" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a7ed82fd1c9dfa7463c9c36d0f3b1396f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needSechFunction</definition>
        <argsstring>() const</argsstring>
        <name>needSechFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needSechFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic secant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic secant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic secant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="387" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1aaf02ca5eda5c045f6128560cd1d4ff8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needCschFunction</definition>
        <argsstring>() const</argsstring>
        <name>needCschFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needCschFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic
cosecant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic cosecant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic cosecant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="399" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1accd202c2af3e89461070c4ce433d7157" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needCothFunction</definition>
        <argsstring>() const</argsstring>
        <name>needCothFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needCothFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic
cotangent&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic cotangent&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs a &quot;hyperbolic cotangent&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="411" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a849ccb412bea78174390afb559d85f5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAsecFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAsecFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAsecFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc secant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc secant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc secant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a220f8099c1aadbb227906dc4ce20bdd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAcscFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAcscFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAcscFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cosecant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cosecant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cosecant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="435" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a02563540dc67dbc5698a96128a8cc954" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAcotFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAcotFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAcotFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cotangent&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cotangent&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc cotangent&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="447" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a2954d22849c9473cc469835594f51abd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAsechFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAsechFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAsechFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic
secant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic secant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic secant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="459" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a92f596ed1c8ee64feda59811054fb8fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAcschFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAcschFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAcschFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic
cosecant&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic cosecant&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic cosecant&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="471" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1a6132ebb067c45d7e5afb3abaaec540e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::needAcothFunction</definition>
        <argsstring>() const</argsstring>
        <name>needAcothFunction</name>
        <qualifiedname>libcellml::AnalyserModel::needAcothFunction</qualifiedname>
        <briefdescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic
cotangent&quot; function. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to determine if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic
cotangent&quot; function, return <computeroutput>true</computeroutput> if it does and <computeroutput>false</computeroutput> otherwise.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> needs an &quot;arc hyperbolic cotangent&quot; function, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="483" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1af8342b9f661ccf68c8c072017b20a8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool libcellml::AnalyserModel::areEquivalentVariables</definition>
        <argsstring>(const VariablePtr &amp;variable1, const VariablePtr &amp;variable2)</argsstring>
        <name>areEquivalentVariables</name>
        <qualifiedname>libcellml::AnalyserModel::areEquivalentVariables</qualifiedname>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacelibcellml_1a180b23de8fbe6f7e92890049d6dbdac8" kindref="member">VariablePtr</ref> &amp;</type>
          <declname>variable2</declname>
        </param>
        <briefdescription>
<para>Test to determine if <computeroutput>variable1</computeroutput> and <computeroutput>variable2</computeroutput> are equivalent. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to see if <computeroutput>variable1</computeroutput> is the same as or equivalent to <computeroutput>variable2</computeroutput>. Returns <computeroutput>true</computeroutput> if <computeroutput>variable1</computeroutput> is equivalent to <computeroutput>variable2</computeroutput> and <computeroutput>false</computeroutput> otherwise.</para>
<para>To test for equivalence is time consuming, so caching is used to speed things up. During the analysis of a model, various tests are performed and their result cached. So, if you test two variables that were tested during the analysis then the cached result will be returned otherwise the two variables will be properly tested and their result cached. This works because an <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> always refers to a static version of a <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref>. However, this might break if a <ref refid="classlibcellml_1_1Model" kindref="compound">Model</ref> is modified after it has been analysed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable1</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref> to test if it is equivalent to <computeroutput>variable2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variable2</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classlibcellml_1_1Variable" kindref="compound">Variable</ref> that is potentially equivalent to <computeroutput>variable1</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>variable1</computeroutput> is equivalent to <computeroutput>variable2</computeroutput> and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="509" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibcellml_1_1AnalyserModel_1ada53463a0da7fb9a26feda2f6fd45498" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string libcellml::AnalyserModel::typeAsString</definition>
        <argsstring>(Type type)</argsstring>
        <name>typeAsString</name>
        <qualifiedname>libcellml::AnalyserModel::typeAsString</qualifiedname>
        <param>
          <type><ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the string version of a <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the string version of a <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for which we want the string version.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string version of the <ref refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" kindref="member">Type</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libcellml/analysermodel.h" line="90" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classlibcellml_1_1AnalyserModel" kindref="compound">AnalyserModel</ref> class is for representing a model in the context of a CellML <ref refid="classlibcellml_1_1Analyser" kindref="compound">Analyser</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>libcellml::AnalyserModel</label>
        <link refid="classlibcellml_1_1AnalyserModel"/>
      </node>
    </collaborationgraph>
    <location file="libcellml/analysermodel.h" line="29" column="1" bodyfile="libcellml/analysermodel.h" bodystart="30" bodyend="517"/>
    <listofallmembers>
      <member refid="classlibcellml_1_1AnalyserModel_1a8fc045316ed5fb70e4aabbca5f40d8ec" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>Analyser</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a0a00aa114303227562c1deee95904cab" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>AnalyserModel</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a2bc623943a00d1860759da08f5c2bd91" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>AnalyserModel</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a7dbdbbbff1bbe087dadbdb8f197da35b" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>AnalyserModel</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1af8342b9f661ccf68c8c072017b20a8dd" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>areEquivalentVariables</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1acd84360a9dc930ea74f08cee4dd7a9d3" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>equation</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a267a1450663d071038c6db414e944cfa" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>equationCount</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1aaf090b4d0d92a358c3dbfae9c8ed8ac8" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>equations</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a89f12472fcaf204eeba02dea7b753b2f" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>hasExternalVariables</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a18748768c90b87452ef7213512736346" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>isValid</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a7e7aef8a776cda3953a4e1261cb795b9" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>mPimpl</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a02563540dc67dbc5698a96128a8cc954" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAcotFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a6132ebb067c45d7e5afb3abaaec540e0" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAcothFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a220f8099c1aadbb227906dc4ce20bdd5" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAcscFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a92f596ed1c8ee64feda59811054fb8fc" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAcschFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1adc242db56da221a1a7be4c75f2559816" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAndFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a849ccb412bea78174390afb559d85f5b" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAsecFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a2954d22849c9473cc469835594f51abd" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needAsechFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a46216bae7b2ced7009517ccf381743d2" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needCotFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1accd202c2af3e89461070c4ce433d7157" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needCothFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a1a13974abba24196e0d0eddcbc62b476" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needCscFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1aaf02ca5eda5c045f6128560cd1d4ff8c" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needCschFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1ad886c8b0e48cdfcff6fa2ba77c4358dc" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needEqFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1ab4bd72e5e6aa3c886dbf6d70132e10f8" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needGeqFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a39aae00c33cc99ac6f2c4fdf3f8c47fc" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needGtFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1aebeec3b9de037196de9661c76765d839" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needLeqFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a271f3e2e2962cbed266bfc93797cd53b" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needLtFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a811fb5054989fffa85dfc13f74026b24" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needMaxFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1ae936fbb0dda5ab43fa3f23bd59a9bf96" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needMinFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a9433cbdeada230108c8f4460a4275123" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needNeqFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a55c852112af915e9d514930589f603a7" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needNotFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a5207fef52526f41cceaeef79a3f68d6c" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needOrFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a8aa0e9544cc0e724dfb491ca4808ac06" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needSecFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a7ed82fd1c9dfa7463c9c36d0f3b1396f" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needSechFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a5975c16ac4a0d4fed3a1272a73c1ee61" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>needXorFunction</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1aa5e9c3b12698531b16885006ea6a38f8" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>operator=</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a1ddaf43386baa67abacce03c09c37bfb" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>state</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a716c7d786a3657e2cb591956d181d1b6" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>stateCount</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a3d367685c74bcb824519d756405fddb5" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>states</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a2df8a5f70631d57d478756180810adfd" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>Type</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1af6f0fabf59f1782d1e29ef37e7934765" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>type</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1ada53463a0da7fb9a26feda2f6fd45498" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>typeAsString</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a4074fe6796d171b958b82cb22805bc33" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>variable</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a1d358f89dc568ae0081f3f2a7ac2cd0c" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>variableCount</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1abc93d7f15e54b56520b7385d2ce8f6a3" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>variables</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a278afb0909cdfa9d4dcc8b5838fb796d" prot="public" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>voi</name></member>
      <member refid="classlibcellml_1_1AnalyserModel_1a2bbfac8378e572deee5ff59fad77f617" prot="private" virt="non-virtual"><scope>libcellml::AnalyserModel</scope><name>~AnalyserModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
