<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/index.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/" xmlns:todo="https://www.sphinx-doc.org/">
    <target refid="tutorial2"></target>
    <section ids="tutorial-2-debugging-issue-checking-and-validating tutorial2" names="tutorial\ 2:\ debugging,\ issue\ checking\ and\ validating tutorial2">
        <title>Tutorial 2: Debugging, issue checking and validating</title>
        <paragraph>In this tutorial you’ll explore how the <literal classes="code" language="">Validator</literal> object can be put to use as you create and interact with your models to help you debug and find issues ahead of submitting it for simulation.
            You’ll be taking a CellML2.0 file which has some mistakes in it, using the validation functionality to identify them, and then using the access and editing functions to fix them.</paragraph>
        <container classes="shortlist">
            <paragraph>By the time you have worked through Tutorial 2 you will be able to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Use the <literal classes="code" language="">Parser</literal> to report issues encountered when reading a file or deserialising a string; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the <literal classes="code" language="">Validator</literal> to check for issues related to a model’s description as compared to the CellML2.0 specifications.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <container classes="shortlist">
            <paragraph>This tutorial assumes that you can already:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Read and deserialise a CellML model from a file (as in <reference internal="True" refuri="../tutorial1/index#tutorial1"><inline classes="std std-ref">Tutorial 1</inline></reference>);</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Retrieve the name and id of models, components, and variables;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Navigate through the hierarchy of the model and its subsidiary elements (components, variables, units and MathML blocks); and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Serialise and print a <literal classes="code" language="">Model</literal> structure to a CellML file.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <section ids="requirements" names="requirements">
            <title>Requirements</title>
            <container classes="directorylist">
                <paragraph><strong>C++ resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="dd20dde845f72d41641ba27873d9833c/CMakeLists.txt" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="3f48af3f57d09a28f652d57f74d41b5f/tutorial2.cpp" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="tutorial2.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial2.cpp</literal></download_reference> The skeleton code or</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="409bd91829ca054fbc84fe8758d371eb/tutorial2_complete.cpp" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="tutorial2_complete.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial2_complete.cpp</literal></download_reference> the completed code; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="0ce19d601e38791d06861735a2cc883a/utilities.cpp" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">utilities.cpp</literal></download_reference> and <download_reference filename="671589e0c1b0eb2849b65b2f33b85d90/utilities.h" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.h" reftype="download" refwarn="False"><literal classes="xref download">utilities.h</literal></download_reference> Utility functions for use in the tutorials.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>Python resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="4ab0afea755a11dedb1615453938644e/tutorial2.py" refdoc="tutorial2/index" refdomain="" refexplicit="False" reftarget="tutorial2.py" reftype="download" refwarn="False"><literal classes="xref download">tutorial2.py</literal></download_reference> The skeleton code or</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="b9c1d44dc21ab0152f7f7d762b936a2b/tutorial2_complete.py" refdoc="tutorial2/index" refdomain="" refexplicit="False" reftarget="tutorial2_complete.py" reftype="download" refwarn="False"><literal classes="xref download">tutorial2_complete.py</literal></download_reference> or the completed code; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><download_reference filename="afb8c75e98c7d2c158a13c29a8d7995f/utilities.py" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="/resources/code/utilities/utilities.py" reftype="download" refwarn="False"><literal classes="xref download">utilities.py</literal></download_reference> Utility functions for use in the tutorials.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>CellML resources</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><download_reference filename="9d30c3f893da3e16c46c03e5daf02c34/tutorial2.cellml" refdoc="tutorial2/index" refdomain="" refexplicit="True" reftarget="tutorial2.cellml" reftype="download" refwarn="False"><literal classes="xref download">tutorial2.cellml</literal></download_reference> the input CellML file.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
        </section>
        <section ids="step-0-set-up" names="step\ 0:\ set-up">
            <title>Step 0: Set-up</title>
            <paragraph>The instructions here build and test the skeleton code.
                If you’d rather not work through the tutorial yourself and want to skip to the completed version, please rename the files removing the <literal classes="code" language="">_complete</literal> from their names.</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" classes="closeable" role="tablist">
                    <button aria-controls="panel-0-0-0" aria-selected="true" classes="sphinx-tabs-tab" ids="tab-0-0-0" name="0-0" role="tab" tabindex="0">C++</button>
                    <button aria-controls="panel-0-0-1" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-0-0-1" name="0-1" role="tab" tabindex="-1">Python</button>
                </div>
                <div aria-labelledby="tab-0-0-0" classes="sphinx-tabs-panel" ids="panel-0-0-0" name="0-0" role="tabpanel" tabindex="0">
                    <paragraph>Navigate into the directory and check that you can build the template against the libCellML library successfully:</paragraph>
                    <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">cmake -DINSTALL_PREFIX=../../install
make -j</literal_block>
                    <paragraph>Running the template:</paragraph>
                    <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">./tutorial2</literal_block>
                    <paragraph>… should give the output:</paragraph>
                    <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">-----------------------------------------------
TUTORIAL 2: ERROR CHECKING AND VALIDATION
-----------------------------------------------</literal_block>
                </div>
                <div aria-labelledby="tab-0-0-1" classes="sphinx-tabs-panel" hidden="true" ids="panel-0-0-1" name="0-1" role="tabpanel" tabindex="0">
                    <paragraph>Confirm that you’re able to run the <literal classes="code" language="">tutorial2.py</literal> template against the libCellML library.</paragraph>
                    <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">python3 tutorial2.py</literal_block>
                    <paragraph>This should give the output:</paragraph>
                    <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">------------------------------------------------------------
    TUTORIAL 2: ERROR CHECKING AND VALIDATION
------------------------------------------------------------</literal_block>
                </div>
            </container>
        </section>
        <section ids="step-1-parse-a-cellml-file-into-a-model" names="step\ 1:\ parse\ a\ cellml\ file\ into\ a\ model">
            <title>Step 1: Parse a CellML file into a model</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Parser">Parser class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Parser?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Parser?fName=parseModel">parseModel</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Utility functions (C++)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>printModel</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Utility functions (Python)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>print_model</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> As you did in <reference internal="True" refuri="../tutorial1/index#tutorial1"><inline classes="std std-ref">Tutorial 1</inline></reference>, create a <literal classes="code" language="">Parser</literal> and use it to create a model from the <literal classes="code" language="">tutorial2.cellml</literal> file provided.</paragraph>
            </container>
            <paragraph>Instead of duplicating the work you did throughout the middle steps of <reference internal="True" refuri="../tutorial1/index#tutorial1"><inline classes="std std-ref">Tutorial 1</inline></reference>, we’ve provided you with a set of utility functions in the <literal classes="code" language="">utilities.[cpp,h]</literal> files which will help with some of the repeated bits of these tutorials.</paragraph>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Use the utility function <literal classes="code" language="">printModel(yourModelHere)</literal> (in C++) or <literal classes="code" language="">print_model(your_model_here)</literal> to output the contents of the model you just created to the terminal so that you can see it all properly.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'tutorial_2_model', id: 'tutorial 2 id has spaces'
UNITS: 1 custom units
    [0]: i_am_a_units_item
COMPONENTS: 1 components
    [0]: i_am_a_component id: my_component_id
        VARIABLES: 4 variables
            [0]: 1st [dimensionless]
            [1]: b
            [2]: c [dimensionless], initial = this_variable_doesnt_exist
            [3]: d [i_dont_exist]
        Maths in the component is:
            &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
                &lt;apply&gt;
                    &lt;eq/&gt;
                    &lt;ci&gt;a&lt;/ci&gt;
                    &lt;apply&gt;
                    &lt;plus/&gt;
                    &lt;ci&gt;b&lt;/ci&gt;
                    &lt;ci&gt;c&lt;/ci&gt;
                    &lt;/apply&gt;
                &lt;/apply&gt;
            &lt;/math&gt;</literal_block>
        </section>
        <section ids="step-2-validate-the-model" names="step\ 2:\ validate\ the\ model">
            <title>Step 2: Validate the model</title>
            <paragraph>Within the libCellML library is the <literal classes="code" language="">Validator</literal> class.
                This has one job: to make sure that what you give it is <emphasis>valid</emphasis> in terms of its CellML2.0 compliance.
                Does it mean that your simulations will work the way you expect?
                Nope, you can still write rubbish!
                You can think of the validation being the spell-checker for your model.
                It doesn’t judge the meaning of <emphasis>what</emphasis> you’ve written, just the nitty-gritty of <emphasis>how</emphasis> you’ve written it.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator">Validator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=validateModel">validateModel</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>The validator can also help you as you create and edit models by pointing out what’s missing or incorrect as you go.
                This is really easy:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" classes="closeable" role="tablist">
                    <button aria-controls="panel-1-Qysr" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-Qysr" name="Qysr" role="tab" tabindex="0">C++</button>
                    <button aria-controls="panel-1-UHl0aG9u" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-UHl0aG9u" name="UHl0aG9u" role="tab" tabindex="-1">Python</button>
                </div>
                <div aria-labelledby="tab-1-Qysr" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-Qysr" name="Qysr" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">auto validator = libcellml::Validator::create();
validator-&gt;validateModel(yourModelHere);</literal_block>
                </div>
                <div aria-labelledby="tab-1-UHl0aG9u" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-UHl0aG9u" name="UHl0aG9u" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">from libcellml import Validator

validator = Validator()
validator.validateModel(your_model_here)</literal_block>
                </div>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create a validator instance and pass your model to it, as above.</paragraph>
            </container>
            <paragraph>When you’ve created a <literal classes="code" language="">Validator</literal> object and called it to check a model, a record of any issues is stored inside the validator.
                To figure out what’s going on, you need to retrieve the pointers to these <literal classes="code" language="">Issue</literal> objects.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator">Validator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=issueCount">issueCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=issue">issue</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=errorCount">errorCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=error">error</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=warningCount">warningCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=warning">warning</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=hintCount">hintCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=hint">hint</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=messageCount">messageCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Validator?fName=message">message</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>As in <reference internal="True" refuri="../tutorial1/index#tutorial1"><inline classes="std std-ref">Tutorial 1</inline></reference>, we can call a <literal classes="code" language="">count</literal> function (in the case of a validator, this is the <literal classes="code" language="">issueCount()</literal> function to determine whether any issues have been raised.
                Note that an issue a can have different levels: errors, warnings, hints, and messages.
                In the <literal classes="code" language="">Validator</literal>, only those issues which are errors indicate validation problems, but it’s usually a good idea to check all the issues anyway.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Retrieve the number of issues from the validator, and print it to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  2.a
    //      Create a Validator and pass the model into it.
    auto validator = libcellml::Validator::create();
    validator-&gt;validateModel(model);

    //  2.b   
    //      Check the number of issues returned from the validator.
    size_t numberOfValidationIssues = validator-&gt;issueCount();
    if (numberOfValidationIssues != 0) {
        std::cout &lt;&lt; "The validator has found " &lt;&lt; numberOfValidationIssues
                  &lt;&lt; " issues!" &lt;&lt; std::endl;

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  2.a
    #      Create a Validator and pass the model into it.
    validator = Validator()
    validator.validateModel(model)

    #  2.b   
    #      Check the number of issues returned from the validator.
    num_validation_issues = validator.issueCount()
    print('The validator has found {} issues!'.format(num_validation_issues))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The validator has found 5 issues!</literal_block>
            <paragraph>Now we need to create an iterative loop to retrieve all the issues (and there should be a few in this particular model!) from the validator.
                Again following the same retrieval idiom as in Tutorial 1 for items in sets, we can access the issues using an index:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" classes="closeable" role="tablist">
                    <button aria-controls="panel-2-Qysr" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-Qysr" name="Qysr" role="tab" tabindex="0">C++</button>
                    <button aria-controls="panel-2-UHl0aG9u" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-UHl0aG9u" name="UHl0aG9u" role="tab" tabindex="-1">Python</button>
                </div>
                <div aria-labelledby="tab-2-Qysr" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-Qysr" name="Qysr" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">auto theFifteenthIssue = validator-&gt;issue(14);</literal_block>
                </div>
                <div aria-labelledby="tab-2-UHl0aG9u" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-UHl0aG9u" name="UHl0aG9u" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">the_15th_issue = validator.issue(14)</literal_block>
                </div>
            </container>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue">Issue class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=description">description</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=url">url</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=referenceHeading">referenceHeading</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=cellmlElementType">cellmlElementType</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=cellmlElement">cellmlElement</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Utility functions (C++)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>getIssueLevelFromEnum</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Utility functions (Python)</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>get_issue_level_from_enum</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>Inside an <literal classes="code" language="">Issue</literal> structure are three fields which are really useful.
                These are the <literal classes="code" language="">description</literal> (which does what you’d think) and the <literal classes="code" language="">referenceHeading</literal>, which points you to the section in the CellML2.0 specification document for reference, and a <literal classes="code" language="">url</literal> with links to a relevant website for more information.</paragraph>
            <paragraph>Each issue also has a level indicator, one of:</paragraph>
            <container classes="shortlist">
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal classes="code" language="">ERROR</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">WARNING</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">HINT</literal>, and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">MESSAGE</literal>.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>As well as storing text-based information, the issue also keeps track of which item has the problem.
                This can be accessed using the <literal classes="code" language="">item</literal> function, and has a type given by the enumeration in <literal classes="code" language="">cellmlElementType</literal> function.
                The <literal classes="code" language="">CellmlElementType</literal> enumeration contains:</paragraph>
            <container classes="shortlist">
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal classes="code" language="">COMPONENT</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">COMPONENT_REF</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">CONNECTION</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">ENCAPSULATION</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">IMPORT</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">MAP_VARIABLES</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">MATH</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">MODEL</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">RESET</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">RESET_VALUE</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">TEST_VALUE</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">UNDEFINED</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">UNIT</literal> ,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">UNITS</literal> , and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code" language="">VARIABLE</literal> .</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>Two utility functions have been provided which will convert the enums for error level or element type into a string for printing.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Create a loop (to the number of issues found in 2.c) to retrieve each issue pointer.
                    For each issue, retrieve and print as much information as you can.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  2.c  
    //      Retrieve the issues, and print their description, url, reference, and
    //      type of item stored to the terminal.  The type of stored item is
    //      available as an enum, which can be turned into a string for output using
    //      the utility function, getItemTypeFromEnum(type).
        for (size_t e = 0; e &lt; numberOfValidationIssues; ++e) {
            libcellml::IssuePtr validatorIssue = validator-&gt;issue(e);
            std::string issueSpecificationReference =
                validatorIssue-&gt;referenceHeading();

            std::cout &lt;&lt; "  Validator issue[" &lt;&lt; e &lt;&lt; "]:" &lt;&lt; std::endl;
            std::cout &lt;&lt; "     Description: " &lt;&lt; validatorIssue-&gt;description()
                      &lt;&lt; std::endl;
            std::cout &lt;&lt; "     Type of item stored: " &lt;&lt; cellmlElementTypeAsString(validatorIssue-&gt;item()-&gt;type()) &lt;&lt; std::endl;
            std::cout &lt;&lt; "     URL: " &lt;&lt; validatorIssue-&gt;url() &lt;&lt; std::endl;
            if (issueSpecificationReference != "") {
                std::cout &lt;&lt; "    See section " &lt;&lt; issueSpecificationReference
                          &lt;&lt; " in the CellML specification." &lt;&lt; std::endl;
            }
        }
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  2.c  
    #      Retrieve the issues, and print their description, url, reference, and
    #      type of item stored to the terminal.  The type of stored item is
    #      available as an enum, which can be turned into a string for output using
    #      the utility function, getItemTypeFromEnum(type).
    for e in range(0, num_validation_issues):
        issue = validator.issue(e)
        reference = issue.referenceHeading()
        print('  Validator issue[{}]:'.format(e))
        print('     Description: {}'.format(issue.description()))
        print('     Type of item stored: {}'.format(cellmlElementTypeAsString(issue.item().type())))
        print('     URL: {}'.format(issue.url()))
        if reference != '':
            print('    See section {} in the CellML specification.'.format(reference))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[0]:
    Description: Variable '1st' in component 'i_am_a_component' does not have a valid name attribute. CellML identifiers must not begin with a European numeric character [0-9].
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.1
    See section 2.8.1.1 in the CellML specification.

Validator issue[1]:
    Description: Variable 'b' in component 'i_am_a_component' does not have any units specified.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.2
    See section 2.8.1.2 in the CellML specification.

Validator issue[2]:
    Description: Variable 'c' in component 'i_am_a_component' has an invalid initial value 'this_variable_doesnt_exist'. Initial values must be a real number string or a variable reference.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.2.2
    See section 2.8.2.2 in the CellML specification.

Validator issue[3]:
    Description: Variable 'd' in component 'i_am_a_component' has a units reference 'i_dont_exist' which is neither standard nor defined in the parent model.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.2
    See section 2.8.1.2 in the CellML specification.

Validator issue[4]:
    Description: MathML ci element has the child text 'a' which does not correspond with any variable names present in component 'i_am_a_component'.
    Type of item stored: MATH
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB12.html?issue=2.12.3
    See section 2.12.3 in the CellML specification.</literal_block>
        </section>
        <section ids="step-3-fix-the-issues-raised" names="step\ 3:\ fix\ the\ issues\ raised">
            <title>Step 3: Fix the issues raised</title>
            <paragraph>Now that we know what’s wrong with the model the next steps are to fix it!
                A useful feature of the <literal classes="code" language="">Issue</literal> items is as well as the textual information (which is more valuable to a <emphasis>reader</emphasis>), we also have a pointer to the item itself (which is more valuable to a <emphasis>programmer</emphasis> or user).
                This section will work through the issues reported by the validator, and demonstrate different ways of accessing and repairing each of the problems.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue">Issue class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=item">item</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=variable">variable</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Issue?fName=math">math</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Variable?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Variable?fName=setUnits">setUnits</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Variable?fName=setInitialValue">setInitialValue</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/v0.5.0/api/classlibcellml_1_1Model?fName=component">component(name, True)</reference> Retrieving a component by its name with the optional second argument true will search the entire component tree for the component name.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>The first issue raised involves the name of a variable.
                Note that even though the name is invalid (as per CellML specification), it can still be used to access the item.
                Our first step is to retrieve the badly named variable from the model, then we can use the <literal classes="code" language="">setName</literal> function to repair it.
                You’ll notice that the name of the component is given too.
                Because component names are unique in the model, this means that we can use the combination of component name and variable name to retrieve the variable.
                The <literal classes="code" language="">component</literal> function of the <literal classes="code" language="">Model</literal> class takes an optional second argument: this is a boolean indicating whether to search for the given component name in the model’s top level components (<literal classes="code" language="">false</literal>, the default), or the entirety of the component tree (<literal classes="code" language="">true</literal>).</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[0]:
    Description: Variable '1st' in component 'i_am_a_component' does not have a valid name attribute. CellML identifiers must not begin with a European numeric character [0-9].
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.1
    See section 2.8.1.1 in the CellML specification.</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Retrieve the variable named “1st” from the component named “i_am_a_component” and change its name to “a”.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  3.a
    //      Retrieve the variable named '1st' from the component named 'i_am_a_component' and change its name
    //      to 'a'.
    auto iAmAComponent = model-&gt;component("i_am_a_component", true);
    auto a = iAmAComponent-&gt;variable("1st");
    a-&gt;setName("a");
    //  This could be done in a chain without instantiating the component and variable:
    //      model-&gt;component("i_am_a_component", true)-&gt;variable("1st")-&gt;setName("a");

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  3.a
    #      Retrieve the variable named '1st' from the component named 'i_am_a_component' and change its name
    #      to 'a'.
    component = model.component('i_am_a_component', True)
    a = component.variable('1st')
    a.setName('a')
    #  This could be done in a chain without instantiating the component and variable:
    #      model.component('i_am_a_component', True).variable('1st').setName('a')

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[1]:
    Description: Variable 'b' in component 'i_am_a_component' does not have any units specified.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.2
    See section 2.8.1.2 in the CellML specification.</literal_block>
            <paragraph>Inside the <literal classes="code" language="">Issue</literal> class are helper functions which allow you to access the item which needs to be fixed.
                The naming of these functions is pretty straightforward, but there’s a catch.
                Not all of the “items” returned actually exist as independent libCellML entities; some are referenced by their parent item instead.
                For example, calling the <literal classes="code" language="">math()</literal> function on an issue which reports storing an item with type <literal classes="code" language="">MATH</literal> returns a pointer to the component item that the maths sits within.
                The functions and the types they return are shown below.</paragraph>
            <table>
                <tgroup cols="3">
                    <colspec colwidth="19"></colspec>
                    <colspec colwidth="18"></colspec>
                    <colspec colwidth="102"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Enumeration value</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Function to call</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Type returned from function</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>COMPONENT</paragraph>
                            </entry>
                            <entry>
                                <paragraph>component()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ComponentPtr</literal> a pointer to a component.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>COMPONENT_REF</paragraph>
                            </entry>
                            <entry>
                                <paragraph>componentRef()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ComponentPtr</literal> a pointer to the component referenced via a <literal classes="code" language="">component_ref</literal>.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>CONNECTION</paragraph>
                            </entry>
                            <entry>
                                <paragraph>connection()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">VariablePair</literal> containing pointers to two <literal classes="code" language="">VariablePtr</literal> items which span the connection.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>ENCAPSULATION</paragraph>
                            </entry>
                            <entry>
                                <paragraph>encapsulation()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ModelPtr</literal> a pointer to the model containing the encapsulation.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>IMPORT</paragraph>
                            </entry>
                            <entry>
                                <paragraph>importSource()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ImportSource</literal> pointer to an import source item.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>MAP_VARIABLES</paragraph>
                            </entry>
                            <entry>
                                <paragraph>mapVariables()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">VariablePair</literal> containing the two <literal classes="code" language="">VariablePtr</literal> items connected by a variable
                                    equivalence.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>MODEL</paragraph>
                            </entry>
                            <entry>
                                <paragraph>model()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ModelPtr</literal> a pointer to a model.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>RESET</paragraph>
                            </entry>
                            <entry>
                                <paragraph>reset()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ResetPtr</literal> a pointer to a reset.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>RESET_VALUE</paragraph>
                            </entry>
                            <entry>
                                <paragraph>resetValue()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ResetPtr</literal> a pointer to the parent reset item.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>TEST_VALUE</paragraph>
                            </entry>
                            <entry>
                                <paragraph>testValue()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">ResetPtr</literal> a pointer to the parent reset item.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>UNIT</paragraph>
                            </entry>
                            <entry>
                                <paragraph>unit()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">UnitPtr</literal> a pointer to a unit item.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>UNITS</paragraph>
                            </entry>
                            <entry>
                                <paragraph>units()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">UnitsPtr</literal> a pointer to a units item.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>VARIABLE</paragraph>
                            </entry>
                            <entry>
                                <paragraph>variable()</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal classes="code" language="">VariablePtr</literal> a pointer to a variable item.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Retrieve the variable directly from the issue using the <literal classes="code" language="">variable</literal> function.
                    Set its units to be “dimensionless”.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  3.b
    //      Retrieve the variable directly from the issue using the Issue::variable() function to return it.
    //      Note that we can only do this because we know that the item type stored is a VARIABLE.
    //      Set its units to be "dimensionless".
    auto issue1 = validator-&gt;issue(1);
    auto b = issue1-&gt;item()-&gt;variable();
    b-&gt;setUnits("dimensionless");

    //  This can be done in a chain too: validator-&gt;issue(1)-&gt;variable()-&gt;setUnits("dimensionless");
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  3.b
    #      Retrieve the variable directly from the issue using the Issue.variable() function to return it.
    #      Note that we can only do this because we know that the item type stored is a VARIABLE.
    #      Set its units to be 'dimensionless'.
    issue1 = validator.issue(1)
    b = issue1.item().variable()
    b.setUnits('dimensionless')

    #  This can be done in a chain too: validator.issue(1).variable().setUnits('dimensionless')
</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[2]:
    Description: Variable 'c' in component 'i_am_a_component' has an invalid initial value 'this_variable_doesnt_exist'. Initial values must be a real number string or a variable reference.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.2.2
    See section 2.8.2.2 in the CellML specification.</literal_block>
            <paragraph>For this next issue we’re going to show how to use the <literal classes="code" language="">item()</literal> function on an issue.</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" classes="closeable" role="tablist">
                    <button aria-controls="panel-3-3-0" aria-selected="true" classes="sphinx-tabs-tab" ids="tab-3-3-0" name="3-0" role="tab" tabindex="0">C++</button>
                    <button aria-controls="panel-3-3-1" aria-selected="false" classes="sphinx-tabs-tab" ids="tab-3-3-1" name="3-1" role="tab" tabindex="-1">Python</button>
                </div>
                <div aria-labelledby="tab-3-3-0" classes="sphinx-tabs-panel" ids="panel-3-3-0" name="3-0" role="tabpanel" tabindex="0">
                    <paragraph>You will need to call the <literal classes="code" language="">cellmlElementType()</literal> function to verify the correct API to call for returning a valid object.</paragraph>
                    <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">//  Retrieve an issue pointer from the validator.
auto myFirstIssue = validator-&gt;issue(0);

// Check the type of the item stored.  If you don't know ahead of time this would be a
// switch statement to check them all.
myFirstIssue-&gt;item()-&gt;type() == libcellml::CellmlElementType::VARIABLE);

// Use the element specific API to return a VariablePtr for use as normal.
auto myVariable = myFirstIssue-&gt;item()-&gt;variable();</literal_block>
                </div>
                <div aria-labelledby="tab-3-3-1" classes="sphinx-tabs-panel" hidden="true" ids="panel-3-3-1" name="3-1" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">#  Retrieve an issue pointer from the validator.
my_first_issue = validator.issue(0)

# Retrieve the item from the issue.
item = my_first_issue.item()

# Check the type of the item stored.  If you don't know ahead of time this would be a
# switch statement to check them all.
my_first_issue-&gt;item()-&gt;type() == CellmlElementType.VARIABLE

# Use the element specific API to return a VariablePtr for use as normal.
my_variable = my_first_issue.item().variable()</literal_block>
                </div>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Retrieve the third issue and its item from the validator.
                    This should be a <literal classes="code" language="">VARIABLE</literal> item, so in C++ you will need to cast it appropriately.
                    Set the variable’s initial conditions to 20.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  3.c
    //      Use the item() function to retrieve a std::any cast of the item from the third issue.  
    //      Use the cellmlElementType() to check that its type is a VARIABLE, and then cast
    //      into a VariablePtr using std::any_cast so that you can use it as normal.
    //      Set its initial value to 20.
    auto issue2 = validator-&gt;issue(2);
    auto item = issue2-&gt;item();
    auto c = item-&gt;variable();
    c-&gt;setInitialValue(20.0);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  3.c
    #      Use the item() function to retrieve a std.any cast of the item from the third issue.  
    #      Use the cellmlElementType() to check that its type is a VARIABLE, and then cast
    #      into a VariablePtr using std.any_cast so that you can use it as normal.
    #      Set its initial value to 20.
    issue2 = validator.issue(2)
    c = issue2.item().variable()
    c.setInitialValue(20.0)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[3]:
    Description: Variable 'd' in component 'i_am_a_component' has a units reference 'i_dont_exist' which is neither standard nor defined in the parent model.
    Type of item stored: VARIABLE
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB08.html?issue=2.8.1.2
    See section 2.8.1.2 in the CellML specification.</literal_block>
            <paragraph>This error is similar in implication to that in 3.b: the validator is reporting that it can’t find the units required by a variable.
                It could be fixed in two different ways: either by supplying units called “i_dont_exist”; or by changing the name of the units which the variable requires to one that is available.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.d</strong> Retrieve the units named “i_am_a_units_item” from the model, and set them to be used by variable “d”.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  3.d
    //      Change the name of the units required by variable 'd' to be those which are called 'i_am_a_units_item'.
    //      You will need to retrieve these units from the model in order to pass them to the variable.
    auto iAmAUnitsItem = model-&gt;units("i_am_a_units_item");
    validator-&gt;issue(3)-&gt;item()-&gt;variable()-&gt;setUnits(iAmAUnitsItem);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  3.d
    #      Change the name of the units required by variable 'd' to be those which are called 'i_am_a_units_item'.
    #      You will need to retrieve these units from the model in order to pass them to the variable.
    iAmAUnitsItem = model.units('i_am_a_units_item')
    validator.issue(3).item().variable().setUnits(iAmAUnitsItem)

</literal_block>
            </container>
            <paragraph>This issue was actually also caught by the parser, which, like the validator, is a <literal classes="code" language="">Logger</literal> class.
                This means that it will keep track of anything it encounters when parsing a model.
                You can try calling the <literal classes="code" language="">issueCount</literal> and <literal classes="code" language="">issue</literal> functions on the parser and iterating through them (just like in 2.c) to see what you find.</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Validator issue[4]:
    Description: MathML ci element has the child text 'a' which does not correspond with any variable names present in component 'i_am_a_component'.
    Type of item stored: MATH
    URL: https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specB12.html?issue=2.12.3
    See section 2.12.3 in the CellML specification.</literal_block>
            <paragraph>As discussed earlier, the type of item stored doesn’t always match the type of item returned.
                In this final example, the type stored is <literal classes="code" language="">MATH</literal> but, according to the table above, the type returned from both the <literal classes="code" language="">math()</literal> and <literal classes="code" language="">item()</literal> functions is (after casting, if required) a <literal classes="code" language="">ComponentPtr</literal>.
                We don’t need to take action to resolve this issue, since our earlier change of the variable name to become “a” will have sorted out the problem already.</paragraph>
        </section>
        <section ids="step-4-check-and-output-the-model" names="step\ 4:\ check\ and\ output\ the\ model">
            <title>Step 4: Check and output the model</title>
            <paragraph>Now that (we hope) the issues have been resolved, it’s time to check that the model is free of validation errors.</paragraph>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Validate the model again, and check that there are no more issues.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Print the corrected model to the terminal so that you can see your changes.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.c</strong> Just as you have done in <reference internal="True" refuri="../tutorial1/index#tutorial1"><inline classes="std std-ref">Tutorial 1</inline></reference>, create a <literal classes="code" language="">Printer</literal> instance and use it to serialise the model into a string.
                    Print the string to a .cellml file.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.cpp" xml:space="preserve">    //  4.a
    //      Validate the corrected model again and check that there are no more issues.
    validator-&gt;validateModel(model);
    std::cout &lt;&lt; "The validator found " &lt;&lt; validator-&gt;issueCount()
              &lt;&lt; " issues in the model." &lt;&lt; std::endl;

    //  4.b
    //      Print the corrected model to the terminal.
    printModel(model, true);

    //  4.c
    //      Print corrected model to a file.
    auto printer = libcellml::Printer::create();
    std::string serialisedModelString = printer-&gt;printModel(model);

    std::string outFileName = "tutorial2_printed.cellml";
    std::ofstream outFile(outFileName);
    outFile &lt;&lt; serialisedModelString;
    outFile.close();

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/libcellml/BuildbotWorker/Finalise_Release_Builder/tutorials-tested-docs/tutorial2/tutorial2_complete.py" xml:space="preserve">    #  4.a
    #      Validate the corrected model again and check that there are no more issues.
    validator.validateModel(model)
    print('The validator found {} issues in the model.'.format(validator.issueCount()))

    #  4.b
    #      Print the corrected model to the terminal.
    print_model(model, True)

    #  4.c
    #      Print corrected model to a file.
    printer = Printer()
    serialised_model = printer.printModel(model)

    out_filename = 'tutorial2_printed.cellml'
    with open(out_filename, 'w') as f:
      f.write(serialised_model)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.d</strong> Go and have a cuppa, you’re done!</paragraph>
            </container>
        </section>
    </section>
</document>
