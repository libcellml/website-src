<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code_snippets/snippet_create_output.rst">
    <target refid="snippet-create-output"></target>
    <container classes="toggle" ids="snippet-create-output" names="snippet_create_output">
        <container classes="header-left">
            <paragraph>Prepare for output</paragraph>
        </container>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++ snippet</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/solver/solveGeneratedModel.cpp" xml:space="preserve">    // Prepare a file for writing during the solution process.
    std::cout &lt;&lt; "   INITIAL CONDITIONS" &lt;&lt; std::endl;
    std::cout &lt;&lt; "-------------------------------------------------------------" &lt;&lt; std::endl;
    for (size_t i = 0; i &lt; STATE_COUNT; ++i) {
        std::cout &lt;&lt; "      " &lt;&lt; STATE_INFO[i].name &lt;&lt; "(" &lt;&lt; VOI_INFO.name &lt;&lt; " = 0) = " &lt;&lt; myStateVariables[i] &lt;&lt; std::endl;
    }
    for (size_t i = 0; i &lt; VARIABLE_COUNT; ++i) {
        std::cout &lt;&lt; "      " &lt;&lt; VARIABLE_INFO[i].name &lt;&lt; "(" &lt;&lt; VOI_INFO.name &lt;&lt; " = 0) = " &lt;&lt; myVariables[i] &lt;&lt; std::endl;
    }

    std::cout &lt;&lt; std::endl;
    std::string outFileName = args["input"] + "_solution.txt";
    std::ofstream outFile(outFileName);

    // Header line for output file
    outFile &lt;&lt; "iteration";
    outFile &lt;&lt; "\t" &lt;&lt; VOI_INFO.name &lt;&lt; " (" &lt;&lt; VOI_INFO.units &lt;&lt; ")";
    for (size_t s = 0; s &lt; STATE_COUNT; ++s) {
        outFile &lt;&lt; "\t" &lt;&lt; STATE_INFO[s].name;
    }
    for (size_t s = 0; s &lt; VARIABLE_COUNT; ++s) {
        outFile &lt;&lt; "\t" &lt;&lt; VARIABLE_INFO[s].name;
    }
    outFile &lt;&lt; std::endl;

    // Initial conditions in output file
    outFile &lt;&lt; 0;
    outFile &lt;&lt; "\t" &lt;&lt; 0;
    for (size_t s = 0; s &lt; STATE_COUNT; ++s) {
        outFile &lt;&lt; "\t" &lt;&lt; myStateVariables[s];
    }
    for (size_t s = 0; s &lt; VARIABLE_COUNT; ++s) {
        outFile &lt;&lt; "\t" &lt;&lt; myVariables[s];
    }
    outFile &lt;&lt; std::endl;

</literal_block>
                    <paragraph>Full context: <download_reference filename="a7dbe8fe8475e1fe24e8555329aec747/solveGeneratedModel.cpp" refdoc="howto/code_snippets/snippet_create_output" refdomain="" refexplicit="True" reftarget="../code/solver/solveGeneratedModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.cpp</literal></download_reference></paragraph>
                </container>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python snippet</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/solver/solveGeneratedModel.py" xml:space="preserve">    # Prepare to write output to a file during the solution process.
    row = 'iteration\t{}({})'.format(
        model.VOI_INFO['name'], model.VOI_INFO['units'])
    for s in range(0, model.STATE_COUNT):
        row += '\t{}({})'.format(model.STATE_INFO[s]
                                 ['name'], model.STATE_INFO[s]['units'])
    for s in range(0, model.VARIABLE_COUNT):
        row += '\t{}({})'.format(model.VARIABLE_INFO[s]
                                 ['name'], model.VARIABLE_INFO[s]['units'])
    row += '\n'

    write_file_name = '{}_solution.txt'.format(args['m'])
    write_file = open(write_file_name, 'w')
    write_file.write(row)

</literal_block>
                    <paragraph>Full context: <download_reference filename="7d9d1af31caf4d3023ce09f83b103903/solveGeneratedModel.py" refdoc="howto/code_snippets/snippet_create_output" refdomain="" refexplicit="True" reftarget="../code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">example_solveGeneratedModel.py</literal></download_reference></paragraph>
                </container>
            </container>
        </container>
    </container>
</document>
