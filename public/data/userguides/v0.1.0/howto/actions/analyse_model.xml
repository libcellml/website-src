<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/analyse_model.rst">
    <target refid="actions-analyse-model"></target>
    <section ids="analyse-a-model-item actions-analyse-model" names="analyse\ a\ model\ item actions_analyse_model">
        <title>Analyse a model item</title>
        <paragraph>The <literal classes="code">Analyser</literal> class takes an existing, valid <literal classes="code">Model</literal> item, and checks it for mathematical sense.
            This includes checking things like that all variables requiring initial values have them, that equations do not conflict with one another, and that any variables used in equations are actually defined in the model.</paragraph>
        <paragraph>The three basic steps to model analysis are:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Creating an <literal classes="code">Analyser</literal> item and passing in a <literal classes="code">Model</literal> for analysis;</paragraph>
            </list_item>
            <list_item>
                <paragraph>Checking for any <literal classes="code">Issues</literal> raised; and</paragraph>
            </list_item>
            <list_item>
                <paragraph>(optional: for code generation only) Retrieving a <literal classes="code">AnalysedModel</literal> item to pass to a <literal classes="code">Generator</literal>, if required.</paragraph>
            </list_item>
        </enumerated_list>
        <target refid="snippet-analyser-analyse"></target>
        <container classes="sphinx-tabs" ids="snippet-analyser-analyse" names="snippet_analyser_analyse">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Analyse the model: check for mathematical and modelling errors.
    auto analyser = libcellml::Analyser::create();
    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
                    <paragraph>Full context: <download_reference filename="6446c8b6fec8120c0fc7c0dc30ffdc04/simulationToolDev.cpp" refdoc="howto/actions/analyse_model" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
                </container>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Analyse a model: check for mathematical and modelling errors.
    analyser = Analyser()
    analyser.analyseModel(model)
    print_issues_to_terminal(analyser)

</literal_block>
                    <paragraph>Full context: <download_reference filename="0aa479c739e25e77890e20f1b26b4b3b/simulationToolDev.py" refdoc="howto/actions/analyse_model" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
                </container>
            </container>
        </container>
        <paragraph>Any issues or messages raised are stored within the classâ€™s logger.
            More information about accessing <literal classes="code">Issue</literal> items can be found on the <reference internal="True" refuri="get_issues#actions-get-issues"><inline classes="std std-ref">Common actions &gt; Retrieve Issue items</inline></reference> page.</paragraph>
        <paragraph>Use of the <literal classes="code">Analyser</literal> class is a prerequisite for the <literal classes="code">Generator</literal> class.
            The generator makes use of the structures created during the analysis process, so takes a <literal classes="code">AnalyserModel</literal> as an input.</paragraph>
        <target refid="snippet-analyser-output"></target>
        <container classes="sphinx-tabs" ids="snippet-analyser-output" names="snippet_analyser_output">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-1-0 active">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Generate runnable code in other language formats for this model.

    // Create a Generator instance.  Note that by default this uses the C language profile.
    auto generator = libcellml::Generator::create();

    // Pass the generator the model for processing.
    generator-&gt;setModel(analyser-&gt;model());
    printIssues(generator);

</literal_block>
                    <paragraph>Full context: <download_reference filename="6446c8b6fec8120c0fc7c0dc30ffdc04/simulationToolDev.cpp" refdoc="howto/actions/analyse_model" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
                </container>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-1-1">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Generate runnable code in other language formats for this model.

    # Create a Generator instance.  Note that by default this is the C language.
    generator = Generator()

    # Pass the generator the analysed model for processing.
    generator.processModel(analyser.model())
    print_issues_to_terminal(generator)

</literal_block>
                    <paragraph>Full context: <download_reference filename="0aa479c739e25e77890e20f1b26b4b3b/simulationToolDev.py" refdoc="howto/actions/analyse_model" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
                </container>
            </container>
        </container>
        <paragraph><strong>TODO</strong></paragraph>
    </section>
</document>
