<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/resolve_imports.rst">
    <target refid="actions-resolve-imports"></target>
    <section ids="resolve-the-imported-items-in-a-model" names="resolve\ the\ imported\ items\ in\ a\ model">
        <title>Resolve the imported items in a model</title>
        <paragraph>The import functionality for <literal classes="code">Units</literal> and <literal classes="code">Component</literal> items is key to enabling the reuse and sharing of models.
            The import statements are basically a recipe for how these imported items can be combined to make the present model.
            While models which contain import dependencies are perfectly valid, they cannot be used to generate runnable code.
            The process of resolving the imports (telling libCellML where to look for these ingredients) and flattening the model (creating instances of the ingredients and removing the dependency) is necessary before code generation can happen.</paragraph>
        <paragraph>The <literal classes="code">Importer</literal> class supports all functionality to do with imports, and contains its own logger which can be used to report anything that might have gone wrong.</paragraph>
        <target refid="snippet-resolve-imports"></target>
        <container classes="toggle" ids="snippet-resolve-imports" names="snippet_resolve_imports">
            <container classes="header-left">
                <paragraph>Resolve imports in a model</paragraph>
            </container>
            <container classes="sphinx-tabs">
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>C++ snippet</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Resolve the import dependencies (if any) and flatten the model.

    if(model-&gt;hasUnresolvedImports()) {
        auto importer = libcellml::Importer::create();

        // Submit the model to the importer and the absolute location 
        // against which the import reference paths will be resolved.
        importer-&gt;resolveImports(model, "");

        printIssues(importer);

        // Print a list of dependencies for the current unflattened model.
        printImportDependencies(model);

        // Retrieve a "flattened" (ie: import-free) model from the importer,
        // and use it to over-write the current model.
        model = importer-&gt;flattenModel(model);

        printImportDependencies(model);
    }

</literal_block>
                        <paragraph>Full context: <download_reference filename="6446c8b6fec8120c0fc7c0dc30ffdc04/simulationToolDev.cpp" refdoc="howto/actions/resolve_imports" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
                    </container>
                </container>
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>Python snippet</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Resolve any import dependencies (if present) in the model.

    if(model.hasUnresolvedImports()) {

        # Create an Importer instance.
        importer = Importer()

        # Submit the model to the importer and the absolute location 
        # against which the import reference paths will be resolved.
        importer.resolveModelImports(model, "resources/")
        print_issues_to_terminal(importer)

        # Print a list of sources that this model requires. This list will 
        # be empty after the model has been flattened.
        print_import_dependencies(model)

        # Retrieve a "flattened" (ie: import-free) model from the importer,
        # and use it to over-write the current model.
        model = importer.flattenModel(model)
    }

</literal_block>
                        <paragraph>Full context: <download_reference filename="0aa479c739e25e77890e20f1b26b4b3b/simulationToolDev.py" refdoc="howto/actions/resolve_imports" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
                    </container>
                </container>
            </container>
        </container>
    </section>
</document>
