<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/generate_code.rst">
    <target refid="actions-generate-code"></target>
    <section ids="generate-runnable-code-from-a-model" names="generate\ runnable\ code\ from\ a\ model">
        <title>Generate runnable code from a model</title>
        <paragraph>Code generation is the process of representing the CellML model in another language format.
            At the time of writing, two profiles are available: C (default) and Python.
            There are four steps to code generation:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Create a <literal classes="code">Generator</literal> item and select the profile language.
                    (The default profile is C).</paragraph>
            </list_item>
            <list_item>
                <paragraph>Pass a model to the generator for processing.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Retrieve the generated implementation code.
                    This is the contents of the <literal classes="code">*.c</literal> file (if C is the profile) or <literal classes="code">*.py</literal> if Python is selected.</paragraph>
            </list_item>
            <list_item>
                <paragraph>(optional) Retrieve the generated interface code.
                    This is the contents of the <literal classes="code">*.h</literal> file, and is not required for the Python profile.</paragraph>
            </list_item>
        </enumerated_list>
        <target refid="snippet-generate-code"></target>
        <container classes="toggle" ids="snippet-generate-code" names="snippet_generate_code">
            <container classes="header-left">
                <paragraph>Generate code from a model</paragraph>
            </container>
            <container classes="sphinx-tabs">
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>C++ snippet</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Generate runnable code in other language formats for this model.

    // Create a Generator instance.  Note that by default this uses the C language profile.
    auto generator = libcellml::Generator::create();

    // Pass the generator the model for processing.
    generator-&gt;setModel(analyser-&gt;model());
    printIssues(generator);

</literal_block>
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.cpp" xml:space="preserve">    // Retrieve and write the interface code (*.h) and implementation code (*.c) to files.
    std::ofstream outFile("sineComparisonExample.h");
    outFile &lt;&lt; generator-&gt;interfaceCode();
    outFile.close();

    outFile.open("sineComparisonExample.c");
    outFile &lt;&lt; generator-&gt;implementationCode();
    outFile.close();

    // If required, change the generator profile to Python.
    auto profile = libcellml::GeneratorProfile::create(libcellml::GeneratorProfile::Profile::PYTHON);
    generator-&gt;setProfile(profile);

    // Retrieve and write the implementation code (*.py) to a file.
    outFile.open("sineComparisonExample.py");
    outFile &lt;&lt; generator-&gt;implementationCode();
    outFile.close();

</literal_block>
                        <paragraph>Full context: <download_reference filename="6446c8b6fec8120c0fc7c0dc30ffdc04/simulationToolDev.cpp" refdoc="howto/actions/generate_code" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.cpp" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.cpp</literal></download_reference></paragraph>
                    </container>
                </container>
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>Python snippet</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Generate runnable code in other language formats for this model.

    # Create a Generator instance.  Note that by default this is the C language.
    generator = Generator()

    # Pass the generator the analysed model for processing.
    generator.processModel(analyser.model())
    print_issues_to_terminal(generator)

</literal_block>
                        <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/simulation_tool_dev/simulationToolDev.py" xml:space="preserve">    # Retrieve and write the interface code (*.h) and implementation code (*.cpp) to files.
    write_file = open("sineComparisonExample.h", "w")
    write_file.write(generator.interfaceCode())
    write_file.close()

    write_file = open("sineComparisonExample.cpp", "w")
    write_file.write(generator.implementationCode())
    write_file.close()

    # If required, change the generator profile to Python and reprocess the model.
    profile = GeneratorProfile(GeneratorProfile.Profile.PYTHON)
    generator.setProfile(profile)
    generator.processModel(model)

    # Retrieve and write the implementation code (*.py) to a file.
    write_file = open("sineComparisonExample.py", "w")
    write_file.write(generator.implementationCode())
    write_file.close()

</literal_block>
                        <paragraph>Full context: <download_reference filename="0aa479c739e25e77890e20f1b26b4b3b/simulationToolDev.py" refdoc="howto/actions/generate_code" refdomain="" refexplicit="True" reftarget="../code/simulation_tool_dev/simulationToolDev.py" reftype="download" refwarn="False"><literal classes="xref download">example_simulationToolDev.py</literal></download_reference></paragraph>
                    </container>
                </container>
            </container>
        </container>
    </section>
</document>
