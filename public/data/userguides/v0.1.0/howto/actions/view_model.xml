<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/view_model.rst">
    <target refid="view-model"></target>
    <section ids="view-the-contents-of-a-model view-model" names="view\ the\ contents\ of\ a\ model view_model">
        <title>View the contents of a <literal>Model</literal></title>
        <topic classes="contents local" ids="contents" names="contents">
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="about-viewing-models">About viewing models</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id2" refid="view-attributes-of-an-item">View attributes of an item</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id3" refid="view-collections-owned-by-an-item">View collections owned by an item</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id4" refid="some-gotchas">Some gotchas</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id5" refid="useful-snippets-for-viewing-a-model">Useful snippets for viewing a model</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="about-viewing-models" names="about\ viewing\ models">
            <title refid="id1">About viewing models</title>
            <paragraph>All CellML entities exist in a hierarchical structure as shown below.
                In some circumstances additional links are made between items (equivalent variables, for example), but on the whole it follows a basic tree structure.</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Model
  │
  ├─ Units item(s)
  │   └─ Unit item(s)
  │
  └─ Component item(s)
      │
      ├─ Variable item(s)
      │
      ├─ Reset item(s)
      │   ├─ ResetValue item
      │   └─ TestValue item
      │
      ├─ Math item
      │
      └─ Child Component item(s)
           │
           └─ Grandchild Component item(s)</literal_block>
            <paragraph>Within the structure each item has two parts:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>A set of <emphasis>attributes</emphasis> specific to itself.
                        Some of these attribute exist for many items (for example, the <literal classes="code">name</literal> attribute), and others are specific to the item type (for example, the <literal classes="code">initialValue</literal> attribute on a <literal classes="code">Variable</literal> item).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A set of <emphasis>collections</emphasis> which this - the parent item - curates.
                        For example, the collection of <literal classes="code">Variable</literal> items owned by a parent <literal classes="code">Component</literal>.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="view-attributes-of-an-item" names="view\ attributes\ of\ an\ item">
                <title refid="id2">View attributes of an item</title>
                <paragraph>Retrieving the value of an item’s attribute is simple, and follows the same general pattern throughout libCellML.
                    Get the attribute <literal classes="code">xyz</literal> using the camelCase function <literal classes="code">xyx()</literal> without arguments.</paragraph>
                <paragraph>For example:</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Retrieving the name attribute from the myModel item:
std::string myModelName = myModel-&gt;name();

// Retrieving the initial value of the myVariable item:
std::string myInitialValue = myVariable-&gt;initialValue();</literal_block>
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Retrieving the name attribute from the my_model item:
my_model_name = my_model.name()

# Retrieving the initial value of the myVariable item:
my_initial_value = my_variable.initialValue()</literal_block>
                <paragraph>Note that the return value’s type will vary depending on the function.
                    For example, a <literal classes="code">Variable</literal> item pointer is returned as the <literal classes="code">testVariable()</literal> attribute value for a <literal classes="code">Reset</literal> item:</paragraph>
                <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Retrieve the test variable from the myReset item:
libcellml::VariablePtr myTestVariable = myReset-&gt;testVariable();</literal_block>
                <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># Retrieve the test variable from the my_reset item:
my_test_varible = my_reset-&gt;testVariable()</literal_block>
            </section>
            <section ids="view-collections-owned-by-an-item" names="view\ collections\ owned\ by\ an\ item">
                <title refid="id3">View collections owned by an item</title>
                <paragraph>In order to access items within a collection use the same general format as above, but with an indicator (name or index) of the child item to be retrieved from the collection.
                    In other words, get the child item of type <literal classes="code">xyz</literal> using the camelCase function <literal classes="code">xyx(myIndex)</literal> or <literal classes="code">xyz(myName)</literal>.</paragraph>
                <container classes="nb">
                    <paragraph>Before accessing a collection item using an index, you can use the <literal classes="code">xyzCount()</literal> function to return the number of items in the collection.</paragraph>
                </container>
                <paragraph>The following example shows how all variables in a component can be listed.</paragraph>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Loop through variables in the component myComponent and retrieve their names.
//    NOTE that indexing starts from zero.
for(size_t v = 0; v &lt; myComponent-&gt;variableCount(); ++v) {

  // Retrieve the Variable item at index v:
  auto myVariable = myComponent-&gt;variable(v);

  // Retrieve the name of the myVariable item:
  auto myVariableName = myVariable-&gt;name();
}

// Retrieve a variable called "helloThere" by name.
//    NOTE that a nullptr will be returned if no variable of that name is found.
auto myHelloThereVariable = myComponent-&gt;variable("helloThere");

// In this case, the myMissingVariable will be a nullptr:
auto myMissingVariable = myComponent-&gt;variable("nameThatDoesntExist");

// This will cause a segfault as myMissingVariable is null:
auto myMissingName = myMissingVariable-&gt;name();</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Loop through variables in the component myComponent and retrieve their names.
#    NOTE that indexing starts from zero:
for v in range(0, my_component.variableCount()):

  # Retrieve the Variable item at index v:
  my_variable = my_component.variable(v)

  # Retrieve the name of the myVariable item:
  my_variable_name = my_variable.name()

# Retrieve a variable called "helloThere" by name.
#    NOTE that None will be returned if no variable of that name is found.
my_hello_there_variable = my_component.variable("helloThere")

# In this case, the my_missing_variable will be None:
my_missing_variable = myComponent.variable("nameThatDoesntExist")

# This will cause a segfault as my_missing_variable is None:
my_missing_name = my_missing_variable.name()</literal_block>
                    </container>
                </container>
            </section>
            <section ids="some-gotchas" names="some\ gotchas">
                <title refid="id4">Some gotchas</title>
                <paragraph>The ownership of some collections can be a little counter-intuitive.
                    One example is that <literal classes="code">Units</literal> items are referenced by <literal classes="code">Variable</literal> items, but are owned by the <literal classes="code">Model</literal>; this is so that units can be reused across more than one component.
                    Another example involving encapsulation and <literal classes="code">Component</literal> item ownership is shown below.</paragraph>
                <paragraph>Consider the following model:</paragraph>
                <literal_block force="False" highlight_args="{}" language="default" linenos="False" xml:space="preserve">model: Grandfather
  component: Uncle
  component: Mother
    component: Daughter
    component: Son</literal_block>
                <paragraph>The raw CellML syntax stores each component individually as children of the model, and separately stores the encapsulation structure of the nested components.</paragraph>
                <container classes="toggle">
                    <container classes="header">
                        <paragraph>See CellML syntax</paragraph>
                    </container>
                    <literal_block force="False" highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;model&gt;

  &lt;!-- The components are listed individually as children of the model block. --&gt;
  &lt;component name="Uncle"/&gt;
  &lt;component name="Mother"/&gt;
  &lt;component name="Daughter"/&gt;
  &lt;component name="Son"/&gt;

  &lt;!-- The encapsulation structure is stored separate from the components. --&gt;
  &lt;encapsulation&gt;
    &lt;component_ref component="Mother"&gt;
      &lt;component_ref component="Daughter"/&gt;
      &lt;component_ref component="Son"/&gt;
    &lt;/component_ref&gt;
  &lt;/encapsulation&gt;
&lt;/model&gt;</literal_block>
                </container>
                <paragraph>In libCellML, the encapsulation structure is embedded in the ownership of the components, so that one component can be a parent of another.
                    This can be confusing if the simple <literal classes="code">componentCount()</literal> function on a model is called naively, as shown below.</paragraph>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// The number of components owned by the grandfather model refers *only* to its direct children:
auto grandfatherHasTwoKids = grandfather-&gt;componentCount(); // returns 2

// Each component must be interrogated individually to determine its children.
//    Note that the uncle component is the 0th child of the grandfather model.
auto uncleHasNoKids = grandfather-&gt;component(0)-&gt;componentCount();          // returns 0
auto motherHasTwoKids = grandfather-&gt;component("Mother")-&gt;componentCount(); // returns 2</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># The number of components owned by the grandfather model refers *only* to its direct children:
grandfather_has_two_kids = grandfather-&gt;componentCount() # returns 2

# Each component must be interrogated individually to determine its children.
#    Note that the uncle component is the 0th child of the grandfather model.
uncle_has_no_kids = grandfather.component(0).componentCount()          # returns 0
mother_has_two_kids = grandfather.component("Mother").componentCount() # returns 2</literal_block>
                    </container>
                </container>
            </section>
        </section>
        <section ids="useful-snippets-for-viewing-a-model" names="useful\ snippets\ for\ viewing\ a\ model">
            <title refid="id5">Useful snippets for viewing a model</title>
            <paragraph>Some useful snippets for viewing parts of your model are shown below.</paragraph>
            <target refid="snippet-print-units"></target>
            <container classes="toggle" ids="snippet-print-units" names="snippet_print_units">
                <container classes="header-left">
                    <paragraph>Retrieve units needed by a component: variables and mathematics</paragraph>
                </container>
                <paragraph>There are two places that need a reference to <literal classes="code">Units</literal> items.
                    The first is the set of <literal classes="code">Variable</literal> items stored in the <literal classes="code">Component</literal>: the units name for each of these is accessible in the <literal classes="code">name()</literal> attribute of its <literal classes="code">units()</literal> item.</paragraph>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// This example assumes you already have a component defined.
// You will need to #include &lt;unordered_set&gt; in your #include statements.
std::unordered_set&lt;std::string&gt; unitsNames;

// Iterate through the variables in this component, and add their units' names to the set.
for (size_t v = 0; v &lt; component-&gt;variableCount(); ++v) {
    // Get the units for this variable:
    auto myUnits = component-&gt;variable(v)-&gt;units();
    // Check that this is not the nullptr, otherwise skip.
    if (myUnits != nullptr) {
        // Add name to set if not already there.
        unitsNames.insert(myUnits-&gt;name());
    }
}

// Parse the MathML string to find any units used by &lt;cn&gt; constants:
std::string delimiter = "cellml:units=";
std::string maths = component-&gt;math();
size_t pos = maths.find(delimiter); // Start looking for the name after the first delimiter.
size_t pos2;
std::string segment;
std::string name;
while ((pos = maths.find(delimiter)) != std::string::npos) {
    segment = maths.substr(0, pos);
    segment.erase(0, segment.find("\"")); // Remove the first quote mark after the delimiter.
    pos2 = segment.find("\""); // Find the second quote mark.
    name = segment.substr(0, pos2); // Units name is between the two quotes.
    if (name.length()) { // Sanity check that the string is not empty.
        unitsNames.insert(name);
    }
    maths.erase(0, pos + delimiter.length()); // Remove this segment from the main string.
}
// Search the final remaining segment.
segment = maths;
segment.erase(0, 1);
pos2 = segment.find("\"");
name = segment.substr(0, pos2);
if (name.length()) {
    unitsNames.insert(name);
}

// Print the unique units for this component to the terminal.
for (const auto &amp;name : unitsNames) {
    std::cout &lt;&lt; "  - " &lt;&lt; name &lt;&lt; std::endl;
}</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># This example assumes that you have a component already, containing variables and MathML.

# Initialise an empty set to save the units names.
units_names = set()

# Iterate through the variables in this component, and add their units' names to the set.
for v in range(0, component.variableCount()):
    # Get the units for this variable:
    my_units = component.variable(v).units()
    # Check that this is not the nullptr, otherwise skip.
    if my_units is not None:
        # Add name to set if not already there.
        units_names.add(my_units.name())

# Parse the MathML string to find any units used by &lt;cn&gt; constants:
delimiter = "cellml:units="
maths_string = component.math()
segments = maths_string.split(delimiter)
# Start looking for the name after the first delimiter.
for segment in segments[1:]:
    # Split the segment at quotation marks, and take the one at index 1
    name = segment.split('"')[1]
    if (len(name)):  # Sanity check that the string is not empty.
        units_names.add(name)

# Print the unique units for this component to the terminal.
print("The units needed by component {c} are:".format(c=component.name()))
for name in units_names:
    print("  - {n}".format(n=name))</literal_block>
                    </container>
                </container>
            </container>
            <target refid="snippet-edit-mathml"></target>
            <container classes="toggle" ids="snippet-edit-mathml" names="snippet_edit_mathml">
                <container classes="header-left">
                    <paragraph>Edit MathML in a component</paragraph>
                </container>
                <paragraph>MathML is stored as a single string within a component.
                    Retrieving it is simple enough using the <literal classes="code">math()</literal> function, but any manipulation (change units used, changing variable names, adding additional relationships, etc) are a little more complicated.</paragraph>
                <comment xml:space="preserve"></comment>
                <block_quote>
                    <paragraph>TODO: Need more examples of useful mathml manipulation. Variable names? Need to remove whitespace first?</paragraph>
                </block_quote>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">void switchUnitsInMaths(std::string &amp;maths, std::string in, std::string out)
{
    //  Note that this function will replace any and all occurrences of the "in"
    //  string within the "maths" string with the "out" string.  It's worth noting that
    //  in order to be sure that only full name matches for units are replaced, we exploit
    //  the fact that the units names in the MathML string will be in quotation marks, and include
    //  these quotation marks on either side of the in and out strings for safety.

    std::string::size_type n = 0;
    std::string in_with_quotes = "\"" + in + "\"";
    std::string out_with_quotes = "\"" + out + "\"";

    while ((n = maths.find(in_with_quotes, n)) != std::string::npos) {
        maths.replace(n, in_with_quotes.size(), out_with_quotes);
        n += out_with_quotes.size();
    }

    std::cout &lt;&lt; "Switched units '" &lt;&lt; in &lt;&lt; "' for units '" &lt;&lt; out &lt;&lt; "'" &lt;&lt; std::endl;
}</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">def switch_units_in_maths(maths, units_in, units_out):
#   Note that this function will replace any and all occurrences of the "units_in"
#   string within the "maths" string with the "units_out" string.  It's worth noting that
#   in order to be sure that only full name matches for units are replaced, we exploit
#   the fact that the units names in the MathML string will be in quotation marks, and include
#   these quotation marks on either side of the in and out strings for safety.

in_with_quotes = "\"" + units_in + "\""
out_with_quotes = "\"" + units_out + "\""

new_maths = maths.replace(in_with_quotes, out_with_quotes)

return new_maths</literal_block>
                    </container>
                </container>
            </container>
            <target refid="snippet-print-encapsulation"></target>
            <container classes="toggle" ids="snippet-print-encapsulation" names="snippet_print_encapsulation">
                <container classes="header-left">
                    <paragraph>Print encapsulation structure</paragraph>
                </container>
                <paragraph>Because components may be nested to any depth within an encapsulation hierarchy, we need to use recursive functions to be sure of reaching the bottom level.
                    The examples below define two functions - one to initiate the recursion, and one to carry it out.</paragraph>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// This function is called to initiate the recursion:
void printEncapsulationStructureToTerminal(libcellml::ModelPtr &amp;model)
  {
      // Prints the encapsulation structure of the model to the terminal
      std::string spacer = "  - ";
      std::cout &lt;&lt; "Model '" &lt;&lt; model-&gt;name() &lt;&lt; "' has " &lt;&lt; model-&gt;componentCount()
                &lt;&lt; " components" &lt;&lt; std::endl;
      for (size_t c = 0; c &lt; model-&gt;componentCount(); ++c) {
          auto child = model-&gt;component(c);
          printComponentOnlyToTerminal(child, spacer);
      }
  }

  // This function performs the recursion to the full depth of the encapsulation:
  void printComponentOnlyToTerminal(libcellml::ComponentPtr &amp;component, std::string spacer)
  {
      std::cout &lt;&lt; spacer &lt;&lt; "Component '" &lt;&lt; component-&gt;name() &lt;&lt; "' has " &lt;&lt; component-&gt;componentCount() &lt;&lt; " child components" &lt;&lt; std::endl;
      for (size_t c = 0; c &lt; component-&gt;componentCount(); c++) {
          std::string anotherSpacer = "    " + spacer;
          auto child = component-&gt;component(c);
          printComponentOnlyToTerminal(child, anotherSpacer);
      }
  }</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Prints the encapsulation structure of the model to the terminal.  This
# function intitiates the recursion through the encapsulation structure.
def print_encapsulation_structure_to_terminal(model):
  spacer = "  - "
  print("Model '{m}' has {c} components".format(m=model.name(), c=model.componentCount()))

  for c in range(0, model.componentCount()):
      child_component = model.component(c)
      print_component_only_to_terminal(child_component, spacer)
  print()

# This function performs the recursion, and explores all child components.
def print_component_only_to_terminal(component, spacer):
    print("{s}Component '{c}' has {n} child components".format(
        s=spacer,
        c=component.name(),
        n=component.componentCount()))

    for c in range(0, component.componentCount()):
        another_spacer = "    " + spacer
        child_component = component.component(c)
        print_component_only_to_terminal(child_component, another_spacer)
    print()</literal_block>
                    </container>
                </container>
            </container>
            <target refid="snippet-print-equivalent-variables"></target>
            <container classes="toggle" ids="snippet-print-equivalent-variables" names="snippet_print_equivalent_variables">
                <container classes="header-left">
                    <paragraph>Trace equivalent variables</paragraph>
                </container>
                <paragraph>This example traces variable equivalences throughout the model using recursion.
                    The CellML file read contains a model as shown below, where two pairs of equivalent variables (<literal classes="code">A</literal> to <literal classes="code">B</literal>, and <literal classes="code">B</literal> to <literal classes="code">C</literal>) connect three variables together.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">model:
    ├─ component: componentA
    │   └─ variable: A [dimensionless] &lt;╴╴╴╮
    │                                      ╷
    │                                  equivalent
    ├─ component: componentB               ╵
    │   └─ variable: B [dimensionless] &lt;╴╴╴╯&lt;╴╴╴╮
    │                                           ╷
    │                                       equivalent
    └─ component: componentC                    ╵
        └─ variable: C [dimensionless] &lt;╴╴╴╴╴╴╴╴╯</literal_block>
                <container classes="toggle">
                    <container classes="header">
                        <paragraph>Show CellML syntax</paragraph>
                    </container>
                    <literal_block force="False" highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;model xmlns="http://www.cellml.org/cellml/2.0#"
    xmlns:cellml="http://www.cellml.org/cellml/2.0#" name="quickstart_traceEquivalence"&gt;
    &lt;component name="componentA"&gt;
      &lt;variable units="dimensionless" name="A" interface="public" /&gt;
    &lt;/component&gt;
    &lt;component name="componentB"&gt;
      &lt;variable units="dimensionless" name="B" interface="public" /&gt;
    &lt;/component&gt;
    &lt;component name="componentC"&gt;
      &lt;variable units="dimensionless" name="C" interface="public" /&gt;
    &lt;/component&gt;
    &lt;connection component_1="componentA" component_2="componentB"&gt;
      &lt;map_variables variable_1="A" variable_2="B"/&gt;
    &lt;/connection&gt;
    &lt;connection component_1="componentB" component_2="componentC"&gt;
      &lt;map_variables variable_1="B" variable_2="C"/&gt;
    &lt;/connection&gt;
  &lt;/model&gt;</literal_block>
                </container>
                <paragraph>The example should output the connections between the variables, including discerning that <literal classes="code">A</literal> is connected to <literal classes="code">C</literal>, even though no direct relationship is specified in the model.</paragraph>
                <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Variable 'A' in component 'componentA' is connected to:
 - variable 'B' [dimensionless] in component 'componentB'
 - variable 'C' [dimensionless] in component 'componentC'</literal_block>
                <container classes="sphinx-tabs">
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>C++</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Function to initiate a list of variables in the connected set, to start the recursion, and to print
// the list to the terminal.
void printEquivalentVariableSet(const libcellml::VariablePtr &amp;variable)
{
    if (variable == nullptr) {
        std::cout &lt;&lt; "NULL variable submitted to printEquivalentVariableSet." &lt;&lt; std::endl;
        return;
    }
    std::vector&lt;libcellml::VariablePtr&gt; variableList;
    variableList.push_back(variable);
    listEquivalentVariables(variable, variableList);

    // The parent() function returns an EntityPtr, which must be cast to a Component before its name()
    // function can be called.
    libcellml::ComponentPtr component = std::dynamic_pointer_cast&lt;libcellml::Component&gt;(variable-&gt;parent());

    if (component != nullptr) {
        std::cout &lt;&lt; "Tracing: " &lt;&lt; component-&gt;name() &lt;&lt; " -&gt; "
                  &lt;&lt; variable-&gt;name();
        if (variable-&gt;units() != nullptr) {
            std::cout &lt;&lt; " [" &lt;&lt; variable-&gt;units()-&gt;name() &lt;&lt; "]";
        }
        if (variable-&gt;initialValue() != "") {
            std::cout &lt;&lt; ", initial = " &lt;&lt; variable-&gt;initialValue();
        }
        std::cout &lt;&lt; std::endl;
    }

    // The variableList contains the variable that was submitted for testing originally, so
    // if it's connected to other variables, it must have a length greater than 1.
    if (variableList.size() &gt; 1) {
        for (auto &amp;e : variableList) {
            component = std::dynamic_pointer_cast&lt;libcellml::Component&gt;(e-&gt;parent());
            if (component != nullptr) {
                std::cout &lt;&lt; "    - " &lt;&lt; component-&gt;name() &lt;&lt; " -&gt; " &lt;&lt; e-&gt;name();
                if (e-&gt;units() != nullptr) {
                    std::cout &lt;&lt; " [" &lt;&lt; e-&gt;units()-&gt;name() &lt;&lt; "]";
                }
                if (e-&gt;initialValue() != "") {
                    std::cout &lt;&lt; ", initial = " &lt;&lt; e-&gt;initialValue();
                }
                std::cout &lt;&lt; std::endl;
            } else {
                std::cout &lt;&lt; "Variable " &lt;&lt; e-&gt;name() &lt;&lt; " does not have a parent component." &lt;&lt; std::endl;
            }
        }
    } else {
        std::cout &lt;&lt; "    - Not connected to any equivalent variables." &lt;&lt; std::endl;
    }
}

// This function performs the recursive search through all connections until the set
// has been completely covered.
void listEquivalentVariables(const libcellml::VariablePtr &amp;variable,
                             std::vector&lt;libcellml::VariablePtr&gt; &amp;variableList) {
    if (variable == nullptr) {
        return;
    }

    for (size_t i = 0; i &lt; variable-&gt;equivalentVariableCount(); ++i) {
        libcellml::VariablePtr equivalentVariable = variable-&gt;equivalentVariable(i);
        if (std::find(variableList.begin(), variableList.end(), equivalentVariable) == variableList.end()) {
            variableList.push_back(equivalentVariable);
            listEquivalentVariables(equivalentVariable, variableList);
        }
    }
}</literal_block>
                    </container>
                    <container>
                        <container classes="item">
                            <container>
                                <paragraph>Python</paragraph>
                            </container>
                        </container>
                        <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                        </container>
                        <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">from libcellml import Parser

# This function will initialise the information strings to test, start
# the search, and print the results.
def print_equivalent_variable_set(variable):

    if variable is None:
        print("None variable submitted to print_equivalent_variable_set.")
        return

    variable_list = list()
    variable_list.append([variable.name(),
                         variable.parent().name(),
                         variable.units().name(),
                         variable.initialValue()])
    list_equivalent_variables(variable, variable_list)

    if len(variable_list) &gt; 1:
        print("Variable '{v}' in component '{c}' is connected to:".format(
            v=variable.name(), c=variable.parent().name()))
        for e in variable_list[1:]:
            if e[3] != '':
                print(" - variable '{v}'(t=0)={i} [{u}] in component '{c}'".format(
                    v=e[0], i=e[3], u=e[2], c=e[1]))
            else:
                print(" - variable '{v}' [{u}] in component '{c}'".format(
                    v=e[0], u=e[2], c=e[1]))
    else:
        print("Variable '{v}' is not connected to other variables.".format(
            v=variable.name()))

# This function performs the recursive search through all connections until the set
# has been completely covered.
def list_equivalent_variables(variable, variable_list):
    if variable is None:
        return
    for i in range(0, variable.equivalentVariableCount()):
        equivalent_variable = variable.equivalentVariable(i)
        # Form a list of strings that describe the equivalent variable.
        test = [equivalent_variable.name(),
                equivalent_variable.parent().name(),
                equivalent_variable.units().name(),
                equivalent_variable.initialValue()]
        # If the equivalent variable has not already been checked, then start another recursion.
        if test not in variable_list:
            variable_list.append(test)
            list_equivalent_variables(equivalent_variable, variable_list)


if __name__ == "__main__":

    read_file = open("../resources/quickstart_traceEquivalence.cellml", "r")

    #  Create a parser and read the file.
    parser = Parser()
    model = parser.parseModel(read_file.read())

    # Retrieve a variable from the parsed model
    A = model.component("componentA").variable("A")

    # Initiate the tracing for equivalent variables of variable "A"
    print_equivalent_variable_set(A)</literal_block>
                    </container>
                </container>
            </container>
        </section>
    </section>
</document>
