<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/print_model.rst">
    <target refid="print-model"></target>
    <section ids="serialise-a-model-into-cellml-2-0-for-printing-to-a-file print-model" names="serialise\ a\ model\ into\ cellml\ 2.0\ for\ printing\ to\ a\ file print_model">
        <title>Serialise a <literal>Model</literal> into CellML 2.0 for printing to a file</title>
        <paragraph>The <literal classes="code">Printer</literal> class has the opposite functionality to the <literal classes="code">Parser</literal> class.
            It accepts an existing <literal classes="code">ModelPtr</literal> and creates a <literal classes="code">string</literal> which can be written to a file.
            As with the <literal classes="code">Parser</literal> and the <literal classes="code">Validator</literal>, the <literal classes="code">Printer</literal> also records a collection of <literal classes="code">Issue</literal> items which can be accessed as shown below.</paragraph>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                </container>
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Create a Printer instance.
auto printer = libcellml::Printer::create();

// The output of the printModel function is a string representing the serialised input model.
std::string serialisedModelString = printer-&gt;printModel(model);

// Check the printer for issues.
assert(printer-&gt;issueCount() == 0);

// Write the serialised string to a file.
std::string outFileName = "my_printed_file.cellml";
std::ofstream outFile(outFileName);
outFile &lt;&lt; serialisedModelString;
outFile.close();</literal_block>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                </container>
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">from libcellml import Printer

# Create a Printer instance.
printer = Printer()

# The output of the printModel function is a string representing the serialised input model.
serialised_model = printer.printModel(model)

# Check the printer for issues.
assert(printer.issueCount() == 0)

# Write the string to a file.
write_file = open("my_printed_file.cellml", "w")
write_file.write(serialised_model)
write_file.close()</literal_block>
            </container>
        </container>
        <paragraph>Details of any issues that the printer encounters and records can be retrieved as described on the <reference internal="True" refuri="get_issues#actions-get-issues"><inline classes="std std-ref">Retrieve Issue items</inline></reference> page.</paragraph>
    </section>
</document>
