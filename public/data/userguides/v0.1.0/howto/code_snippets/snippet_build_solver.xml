<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code_snippets/snippet_build_solver.rst">
    <target refid="snippet-build-solver"></target>
    <container classes="toggle" ids="snippet-build-solver" names="snippet_build_solver">
        <container classes="header-left">
            <paragraph>Build a solver using generated code</paragraph>
        </container>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++ snippet</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                    <paragraph>This file should be saved as a CMakeLists.txt file for generation with CMake.</paragraph>
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="cmake" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/solver/CMakeLists.txt" xml:space="preserve">cmake_minimum_required(VERSION 3.10.2)
# Delete the previous cache and configured files from this directory before configuring again
# I don't know why it doesn't work ... TODO
file(REMOVE [CMakeCache.txt Makefile cmake_install.cmake modelToSolve.cpp *.h])
file(REMOVE_RECURSE [CMakeFiles])

set(INPUT "" CACHE FILEPATH "Please enter the base name of the generated files to solve (without extension) using the syntax -DINPUT=your_filename")

if("${INPUT}" STREQUAL "")
        message(FATAL_ERROR "Please enter the base name of the generated files to solve (without extension) using the syntax -DINPUT=your_filename")
endif()

get_filename_component(INPUTNAME ${INPUT} NAME)
get_filename_component(INPUTDIR ${INPUT} DIRECTORY)

set(PROJECT_NAME solve_${INPUTNAME})

project(${PROJECT_NAME} VERSION 0.1.0)

if(EXISTS "${INPUTDIR}/${INPUTNAME}.c")
        configure_file("${INPUTDIR}/${INPUTNAME}.c" "${CMAKE_BINARY_DIR}/modelToSolve.cpp" COPYONLY)
elseif(EXISTS "${INPUTDIR}/${INPUTNAME}.cpp")
        configure_file("${INPUTDIR}/${INPUTNAME}.cpp" "${CMAKE_BINARY_DIR}/modelToSolve.cpp" COPYONLY)
endif()

configure_file("${INPUTDIR}/${INPUTNAME}.h" "${CMAKE_BINARY_DIR}/modelToSolve.h" COPYONLY)
configure_file("${INPUTDIR}/${INPUTNAME}.h" "${CMAKE_BINARY_DIR}/${INPUTNAME}.h" COPYONLY)
# TODO This line is a workaround because at present the generator expects the header file to be called "model.h"
# We don't want users to have to modify the generated code, so until there's a better way for users to set
# this in the API, this should stay here.  Yes, it's super-clumsy :(
configure_file("${INPUTDIR}/${INPUTNAME}.h" "${CMAKE_BINARY_DIR}/model.h" COPYONLY)

set (PROJECT_SRC
        solveGeneratedModel.cpp
        modelToSolve.cpp
     )

add_executable(${PROJECT_NAME} ${PROJECT_SRC})

message("")
message("1) First use 'make -j' to build the executable")
message("2) Then solve by running: ./${PROJECT_NAME} with the arguments:")
message("  -n  step_total")
message("  -dt step_size")
message("")
</literal_block>
                </container>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python snippet</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                    <literal_block force="False" highlight_args="{'linenostart': 67}" language="python" linenos="True" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/solver/solveGeneratedModel.py" xml:space="preserve">def module_from_file(input):

    # Check the extension is stripped during input.
    if input[-3:] != '.py':
        module_file = input + ".py"
        module_name = input.split("/")[-1]
    else:
        module_file = input
        module_name = ".".join(input.split("/")[-1].split(".")[:-1])

    # Import the generated code as a module, and return it.
    spec = importlib.util.spec_from_file_location(module_name, module_file)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module
</literal_block>
                    <paragraph>Full context: <download_reference filename="7d9d1af31caf4d3023ce09f83b103903/solveGeneratedModel.py" refdoc="howto/code_snippets/snippet_build_solver" refdomain="" refexplicit="True" reftarget="../code/solver/solveGeneratedModel.py" reftype="download" refwarn="False"><literal classes="xref download">solveGeneratedModel.py</literal></download_reference></paragraph>
                </container>
            </container>
        </container>
    </container>
</document>
