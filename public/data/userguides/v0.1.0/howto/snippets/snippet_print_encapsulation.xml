<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/snippets/snippet_print_encapsulation.rst">
    <target refid="snippet-print-encapsulation"></target>
    <container classes="toggle" ids="snippet-print-encapsulation" names="snippet_print_encapsulation">
        <container classes="header-left">
            <paragraph>Print encapsulation structure</paragraph>
        </container>
        <paragraph>Because components may be nested to any depth within an encapsulation hierarchy, we need to use recursive functions to be sure of reaching the bottom level.
            The examples below define two functions - one to initiate the recursion, and one to carry it out.</paragraph>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                </container>
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// This function is called to initiate the recursion:
void printEncapsulationStructureToTerminal(libcellml::ModelPtr &amp;model)
  {
      // Prints the encapsulation structure of the model to the terminal
      std::string spacer = "  - ";
      std::cout &lt;&lt; "Model '" &lt;&lt; model-&gt;name() &lt;&lt; "' has " &lt;&lt; model-&gt;componentCount()
                &lt;&lt; " components" &lt;&lt; std::endl;
      for (size_t c = 0; c &lt; model-&gt;componentCount(); ++c) {
          auto child = model-&gt;component(c);
          printComponentOnlyToTerminal(child, spacer);
      }
  }

  // This function performs the recursion to the full depth of the encapsulation:
  void printComponentOnlyToTerminal(libcellml::ComponentPtr &amp;component, std::string spacer)
  {
      std::cout &lt;&lt; spacer &lt;&lt; "Component '" &lt;&lt; component-&gt;name() &lt;&lt; "' has " &lt;&lt; component-&gt;componentCount() &lt;&lt; " child components" &lt;&lt; std::endl;
      for (size_t c = 0; c &lt; component-&gt;componentCount(); c++) {
          std::string anotherSpacer = "    " + spacer;
          auto child = component-&gt;component(c);
          printComponentOnlyToTerminal(child, anotherSpacer);
      }
  }</literal_block>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                </container>
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Prints the encapsulation structure of the model to the terminal.  This
# function intitiates the recursion through the encapsulation structure.
def print_encapsulation_structure_to_terminal(model):
  spacer = "  - "
  print("Model '{m}' has {c} components".format(m=model.name(), c=model.componentCount()))

  for c in range(0, model.componentCount()):
      child_component = model.component(c)
      print_component_only_to_terminal(child_component, spacer)
  print()

# This function performs the recursion, and explores all child components.
def print_component_only_to_terminal(component, spacer):
    print("{s}Component '{c}' has {n} child components".format(
        s=spacer,
        c=component.name(),
        n=component.componentCount()))

    for c in range(0, component.componentCount()):
        another_spacer = "    " + spacer
        child_component = component.component(c)
        print_component_only_to_terminal(child_component, another_spacer)
    print()</literal_block>
            </container>
        </container>
    </container>
</document>
