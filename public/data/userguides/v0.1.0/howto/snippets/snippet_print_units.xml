<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/snippets/snippet_print_units.rst">
    <target refid="snippet-print-units"></target>
    <container classes="toggle" ids="snippet-print-units" names="snippet_print_units">
        <container classes="header-left">
            <paragraph>Retrieve units needed by a component: variables and mathematics</paragraph>
        </container>
        <paragraph>There are two places that need a reference to <literal classes="code">Units</literal> items.
            The first is the set of <literal classes="code">Variable</literal> items stored in the <literal classes="code">Component</literal>: the units name for each of these is accessible in the <literal classes="code">name()</literal> attribute of its <literal classes="code">units()</literal> item.</paragraph>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                </container>
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// This example assumes you already have a component defined.
// You will need to #include &lt;unordered_set&gt; in your #include statements.
std::unordered_set&lt;std::string&gt; unitsNames;

// Iterate through the variables in this component, and add their units' names to the set.
for (size_t v = 0; v &lt; component-&gt;variableCount(); ++v) {
    // Get the units for this variable:
    auto myUnits = component-&gt;variable(v)-&gt;units();
    // Check that this is not the nullptr, otherwise skip.
    if (myUnits != nullptr) {
        // Add name to set if not already there.
        unitsNames.insert(myUnits-&gt;name());
    }
}

// Parse the MathML string to find any units used by &lt;cn&gt; constants:
std::string delimiter = "cellml:units=";
std::string maths = component-&gt;math();
size_t pos = maths.find(delimiter); // Start looking for the name after the first delimiter.
size_t pos2;
std::string segment;
std::string name;
while ((pos = maths.find(delimiter)) != std::string::npos) {
    segment = maths.substr(0, pos);
    segment.erase(0, segment.find("\"")); // Remove the first quote mark after the delimiter.
    pos2 = segment.find("\""); // Find the second quote mark.
    name = segment.substr(0, pos2); // Units name is between the two quotes.
    if (name.length()) { // Sanity check that the string is not empty.
        unitsNames.insert(name);
    }
    maths.erase(0, pos + delimiter.length()); // Remove this segment from the main string.
}
// Search the final remaining segment.
segment = maths;
segment.erase(0, 1);
pos2 = segment.find("\"");
name = segment.substr(0, pos2);
if (name.length()) {
    unitsNames.insert(name);
}

// Print the unique units for this component to the terminal.
for (const auto &amp;name : unitsNames) {
    std::cout &lt;&lt; "  - " &lt;&lt; name &lt;&lt; std::endl;
}</literal_block>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                </container>
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># This example assumes that you have a component already, containing variables and MathML.

# Initialise an empty set to save the units names.
units_names = set()

# Iterate through the variables in this component, and add their units' names to the set.
for v in range(0, component.variableCount()):
    # Get the units for this variable:
    my_units = component.variable(v).units()
    # Check that this is not the nullptr, otherwise skip.
    if my_units is not None:
        # Add name to set if not already there.
        units_names.add(my_units.name())

# Parse the MathML string to find any units used by &lt;cn&gt; constants:
delimiter = "cellml:units="
maths_string = component.math()
segments = maths_string.split(delimiter)
# Start looking for the name after the first delimiter.
for segment in segments[1:]:
    # Split the segment at quotation marks, and take the one at index 1
    name = segment.split('"')[1]
    if (len(name)):  # Sanity check that the string is not empty.
        units_names.add(name)

# Print the unique units for this component to the terminal.
print("The units needed by component {c} are:".format(c=component.name()))
for name in units_names:
    print("  - {n}".format(n=name))</literal_block>
            </container>
        </container>
    </container>
</document>
