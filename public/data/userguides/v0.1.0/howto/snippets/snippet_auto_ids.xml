<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/snippets/snippet_auto_ids.rst">
    <target refid="snippet-auto-ids"></target>
    <container classes="toggle" ids="snippet-auto-ids" names="snippet_auto_ids">
        <container classes="header-left">
            <paragraph>Set automatic ids throughout the model</paragraph>
        </container>
        <paragraph>For times when you don’t want to manually set id attributes through the model, you can use the <literal classes="code">Printer</literal> to do it for you.
            When serialising a model using the <literal classes="code">printModel</literal> function, the optional second argument is a boolean switch indicating whether or not to assign automatic <literal classes="code">id</literal> attributes to any items which don’t already have one.
            Existing <literal classes="code">id</literal> attributes are unchanged by this process, and by default it is turned off.</paragraph>
        <paragraph>The automatic ids adhere to the <reference internal="False" refuri="https://cellml-specification.readthedocs.io/en/latest/reference/formal_and_informative/specA2.html#xml-id-attributes">XML standard for id attributes</reference>, and take the form of a 6-digit hexadecimal number, beginning with a letter.</paragraph>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                </container>
                <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Create a Parser to deserialise a CellML (inString) string into a model.
auto parser = libcellml::Parser::create();
auto model = parser-&gt;parseModel(inString);

// Create a Printer to serialise the model back to a string, but
// use the option to create automatic ids.
auto printer = libcellml::Printer::create();
auto outString = printer-&gt;printModel(model, true);

// The outString will have the same model contents, but with id attributes set throughout.</literal_block>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                </container>
                <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Create a Parser to deserialise a CellML (in_string) string into a model.
parser = libcellml.Parser()
model = parser.parseModel(in_string)

# Create a Printer to serialise the model back to a string, but
# use the option to create automatic ids.
printer = libcellml.Printer()
out_string = printer.printModel(model, true)

# The out_string will have the same model contents, but with id attributes set throughout.</literal_block>
            </container>
        </container>
    </container>
</document>
