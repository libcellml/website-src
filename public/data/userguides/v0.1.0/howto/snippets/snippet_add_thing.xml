<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/snippets/snippet_add_thing.rst">
    <target refid="snippet-add-thing"></target>
    <container classes="toggle" ids="snippet-add-thing" names="snippet_add_thing">
        <container classes="header-left">
            <paragraph>Add a thing to a collection</paragraph>
        </container>
        <paragraph>When you add an item to a collection, you also set its parent.
            Effectively, adding an item which is already a member of one collection to another collection actually <emphasis>moves</emphasis> it from the first to the second.
            This means that:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>the itemâ€™s parent will be the second collection parent;</paragraph>
            </list_item>
            <list_item>
                <paragraph>the first collection will not contain the item any more; and</paragraph>
            </list_item>
            <list_item>
                <paragraph>the second collection will contain the item.</paragraph>
            </list_item>
        </bullet_list>
        <container classes="sphinx-tabs">
            <container>
                <container classes="item">
                    <container>
                        <paragraph>C++</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-0 active">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/add_things/addThings.cpp" xml:space="preserve">
#include &lt;iostream&gt;
#include &lt;libcellml&gt;

int main()
{
    // Create a variable and a component.
    auto myVariable = libcellml::Variable::create("myVariableName");
    auto myComponent = libcellml::Component::create("myComponentName");
    bool success = false;

    // Before adding, the variable has no parent, and the component has no
    // variables.
    // Add the variable myVariable to component myComponent.
    success = myComponent-&gt;addVariable(myVariable);

    // At this point, if the operation was successful, the variable
    // myVariable has a parent of myComponent, and exists in the collection
    // of variables.  If successful:
    //  - success = true
    //  - myComponent-&gt;variableCount() = 1
    //  - myVariable-&gt;parent() = myComponent
    //  - myComponent-&gt;variable(0) = myVariable.
    
    // Now see what happens if that same variable is added to another
    // Component item, myOtherComponent, which is initially empty.
    auto myOtherComponent = libcellml::Component::create("myOtherComponentName");
    success = myOtherComponent-&gt;addVariable(myVariable);

    // If successful, the variable will have been moved to the new component, and
    // removed from the old one, thus:
    // - success = true
    // - myOtherComponent-&gt;variableCount() = 1
    // - myOtherComponent-&gt;variable(0) = myVariable
    // - myVariable-&gt;parent() = myOtherComponent
    // - myComponent-&gt;variableCount() == 0.
    std::cout &lt;&lt; "hello world!"&lt;&lt;std::endl;
}
</literal_block>
                </container>
            </container>
            <container>
                <container classes="item">
                    <container>
                        <paragraph>Python</paragraph>
                    </container>
                </container>
                <container classes="ui bottom attached sphinx-tab tab segment sphinx-data-tab-0-1">
                    <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/code/add_things/addThings.py" xml:space="preserve">from libcellml import Component, Variable

if __name__ == '__main__':

    # Create a variable and a component.
    my_variable = Variable()
    my_variable.setName("myVariable")
    my_component = Component()
    my_component.setName("myComponent")
    success = False

    # Before adding, the variable has no parent, and the component has no
    # variables.
    assert(my_component.variableCount() == 0)
    assert(my_variable.parent() == None)

    # Add the variable my_variable to component my_variable.
    success = my_component.addVariable(my_variable)

    # At this point, if the operation was successful, the variable
    # my_variable has a parent of my_component, and exists in the collection
    # of variables.  The component's variable count has been updated too.
    assert(success == true)
    assert(my_component.variableCount() == 1)
    assert(my_variable.parent() == my_variable)
    assert(my_component.variable(0) == my_variable)

    # Now see what happens if that same variable is added to another
    # component, my_other_component, which is initially empty.
    my_other_component = Component()
    my_other_component.setName('myOtherComponent')
    assert(my_other_component.variableCount() == 0)

    success = my_other_component.addVariable(my_variable)

    # If successful, the variable will have been moved to the new component, and
    # removed from the old one.
    assert(success == true)
    assert(my_other_component.variableCount() == 1)
    assert(my_other_component.variable(0) == my_variable)
    assert(my_variable.parent() == my_other_component)
    assert(my_component.variableCount() == 0)
</literal_block>
                </container>
            </container>
        </container>
    </container>
</document>
