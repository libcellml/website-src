<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/index.rst">
    <target refid="creategatemodel"></target>
    <section ids="hodgkin-huxley-1-creating-a-model-using-the-api creategatemodel" names="hodgkin-huxley\ 1:\ creating\ a\ model\ using\ the\ api creategatemodel">
        <title>Hodgkin-Huxley 1: Creating a model using the API</title>
        <container classes="shortlist">
            <paragraph>By the time you have worked through this tutorial you will be able to:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Assemble a model using the API;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the diagnostic Validator class to identify errors in the model’s syntax;</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use the diagnostic Analyser class to identify errors in the model’s mathematical construction; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Serialise the model to CellML format for output.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <container classes="directorylist">
            <paragraph><strong>C++ resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="f763a2be8e7c2a8be87ce3bb6bb0fb85/CMakeLists.txt" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="568fa2a4c0dfea5ab881919f2a099acb/createGateModel.cpp" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="createGateModel.cpp" reftype="download" refwarn="False"><literal classes="xref download">createGateModel.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="52b3f1d23ef88037e4ba609de10d3fd0/createGateModel_completed.cpp" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="createGateModel_completed.cpp" reftype="download" refwarn="False"><literal classes="xref download">createGateModel_completed.cpp</literal></download_reference> the completed tutorial code; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="a15a6f3793ed67a6980ea9f4674708c2/utilities.cpp" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="../code/utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">utilities.cpp</literal></download_reference> and <download_reference filename="61cd8a48db751cc716aafd06281b2588/utilities.h" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="../code/utilities.h" reftype="download" refwarn="False"><literal classes="xref download">utilities.h</literal></download_reference> Helper functions.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>Python resources</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="9d6db8aae13134712e98b1e481a647b7/createGateModel.py" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="createGateModel.py" reftype="download" refwarn="False"><literal classes="xref download">createGateModel.py</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="9f690f007c0010940a45aa9e5bac545c/createGateModel_completed.py" refdoc="tutorials/hh_tutorial1/index" refdomain="" refexplicit="True" reftarget="createGateModel_completed.py" reftype="download" refwarn="False"><literal classes="xref download">createGateModel_completed.py</literal></download_reference> the completed tutorial code.</paragraph>
                </list_item>
            </bullet_list>
        </container>
        <section ids="overview" names="overview">
            <title>Overview</title>
            <paragraph>This is the first tutorial in a series designed to walk the user through some of libCellML’s functionality available in the API.
                Its goal is to create from scratch a voltage-independent ion gate model.
                The theory of this kind of gate can be found on the <reference internal="True" refuri="../../theory/theory_iongates#theory-iongates"><inline classes="std std-ref">Ion Gate theory page</inline></reference>.</paragraph>
            <paragraph>One of the goals of the CellML format (which must be supported by libCellML) is the construction of models that are reusable.
                Throughout these tutorials we will create entities in such a way as to enable their reuse as easily as possible.
                The basic structure of this model highlights that too.</paragraph>
            <container classes="shortlist">
                <paragraph>We will create a model with three components:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>An <emphasis>equations</emphasis> component, which contains all of the working pieces and mathematics specific to the model;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A <emphasis>parameters</emphasis> component, which contains any hard-coded parameters or values specific to this model; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A <emphasis>wrapper</emphasis> component, which is the parent of the other two.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>This arrangement means that it’s simple to import this model into others, as well as to locate or over-ride parameter values or reuse equations.
                Each of the components created throughout this series of tutorials will follow this same structure.</paragraph>
        </section>
        <section ids="step-1-set-up-the-model" names="step\ 1:\ set\ up\ the\ model">
            <title>Step 1: Set up the model</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=addComponent">addComponent</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=addComponent">addComponent</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> The first step is to create a <literal classes="code">Model</literal> item which will later contain the component and the units it needs.
                    Use the <literal classes="code">create</literal> function to make a new instance.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Each CellML element must have a name, which is set using the <literal classes="code">setName</literal> function.
                    Set the name of the model to be “GateModel”.</paragraph>
            </container>
            <paragraph>We’ll create a wrapper component whose only job is to encapsulate the other components.
                This makes is a lot easier for this model to be reused, as the connections between components internal to this one won’t need to be re-established.
                Note that the constructor for all named CellML entities is overloaded, so you can pass it the name string at the time of creation.</paragraph>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Create a new <literal classes="code">Component</literal> item named “gate” using the overloaded constructor.</paragraph>
            </container>
            <paragraph>Finally we need to add the component to the model.
                This sets it at the top-level of the component encapsulation hierarchy.
                All other components will then need to be added to this component, rather than to the model.</paragraph>
            <container classes="dothis">
                <paragraph><strong>1.d</strong> Add the component to the model using the <literal classes="code">addComponent</literal> function.</paragraph>
            </container>
            <container classes="useful">
                <paragraph>A utility function <literal classes="code">printModel(Model, bool)</literal> (C++) or <literal classes="code">print_model</literal> (Python) has been provided to help you to see what’s going  on inside your model.
                    Setting the second optional parameter to <literal classes="code">true</literal> will also print the MathML content.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.e</strong> Print your model to the terminal and check that the structure is what you’d expect.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  1.a 
    //      The first step is to create a Model item which will later contain the component and 
    //      the units it needs.  
    auto model = libcellml::Model::create();

    //  1.b 
    //      Each CellML element must have a name, which is set using the setName() function.
    model-&gt;setName("GateModel");

    //  1.c 
    //      We'll create a wrapper component whose only job is to encapsulate the other components.
    //      This makes is a lot easier for this model to be reused, as the connections between
    //      components internal to this one won't need to be re-established.
    //      Note that the constructor for all named CellML entities is overloaded, so 
    //      you can pass it the name string at the time of creation.
    //      Create a component named "gate".
    auto gate = libcellml::Component::create("gate");

    //  1.d 
    //      Finally we need to add the component to the model.  This sets it at the top-level of 
    //      the components' encapsulation hierarchy.  All other components need to be added 
    //      to this component, rather than the model.
    //      Add the component to the model using the Model::addComponent() function.
    model-&gt;addComponent(gate);

    //  1.e
    //      Print the model to the terminal using the printModel helper function and 
    //      check it is what you'd expect.
    printModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  1.a 
    #      The first step is to create a Model item which will later contain the component and 
    #      the units it needs.  
    model = Model()

    #  1.b 
    #      Each CellML element must have a name, which is set using the setName() function.
    model.setName('GateModel')

    #  1.c 
    #      We'll create a wrapper component whose only job is to encapsulate the other components.
    #      This makes is a lot easier for this model to be reused, as the connections between
    #      components internal to this one won't need to be re-established.
    #      Note that the constructor for all named CellML entities is overloaded, so 
    #      you can pass it the name string at the time of creation.
    #      Create a component named 'gate'.
    gate = Component('gate')

    #  1.d Finally we need to add the component to the model.  This sets it at the top-level of 
    #      the components' encapsulation hierarchy.  All other components need to be added 
    #      to this component, rather than the model.
    #      Add the component to the model using the Model::addComponent() function.
    model.addComponent(gate)

    #  1.e
    #      Print the model to the terminal using the print_model helper function and 
    #      check it is what you'd expect.
    print_model(model)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'GateModel'
    UNITS: 0 custom units
    COMPONENTS: 1 components
        [0]: gate
            VARIABLES: 0 variables</literal_block>
        </section>
        <section ids="step-2-create-the-gateequations-component" names="step\ 2:\ create\ the\ gateequations\ component">
            <title>Step 2: Create the gateEquations component</title>
            <paragraph>Inside the wrapper component you created in Step 1 we need to create two more: an equations component, and a parameters component.
                In this step we’ll construct the equations component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create a new equations component named “gateEquations”.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Add the new gateEquations component to the gate component.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  2.a 
    //      Create a gateEquations component and name it "gateEquations" .
    auto gateEquations = libcellml::Component::create("gateEquations");

    //  2.b 
    //      Add the new gateEquations component to the gate component.
    gate-&gt;addComponent(gateEquations);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  2.a 
    #  Create a gateEquations component and name it 'gateEquations'.
    gateEquations = Component('gateEquations')

    #  2.b 
    #  Add the new gateEquations component to the gate component.
    gate.addComponent(gateEquations)

</literal_block>
            </container>
            <paragraph>Since this is an <emphasis>equations</emphasis>-flavoured component, it should contain the bulk of the calculations and mathematics for the gate.
                Maths is added using MathML2 (no other levels are supported) strings.</paragraph>
            <paragraph>In this example we need to represent just one equation:</paragraph>
            <math_block docname="tutorials/hh_tutorial1/index" label="True" nowrap="False" number="True" xml:space="preserve">\frac{dX}{dt} = \alpha_{X}\left( 1 - X \right) - \beta_{X}.X</math_block>
            <paragraph>If you’re happy to write your own MathML2 string then please go ahead, but if you’d rather not you can use the code provided under the code toggles further down the page.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=setMath">setMath</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=appendMath">appendMath</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=math">math</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Construct a string representing the MathML of the equation above.
                    You will need to enclose the string with the appropriate header and footer.
                    These are provided for you in the skeleton code, or simply copy them from below.
                    Use the <literal classes="code">setMath</literal> and <literal classes="code">appendMath</literal> functions to add your strings to the equations component.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.d</strong> Print the model to the terminal and include the optional second argument of <literal classes="code">true</literal> to include the MathML.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  2.c 
    //      Add the mathematics to the gateEquations component.
    std::string equation =
        "  &lt;apply&gt;&lt;eq/&gt;\n"
        "    &lt;apply&gt;&lt;diff/&gt;\n"
        "      &lt;bvar&gt;&lt;ci&gt;t&lt;/ci&gt;&lt;/bvar&gt;\n"
        "      &lt;ci&gt;X&lt;/ci&gt;\n"
        "    &lt;/apply&gt;\n" 
        "    &lt;apply&gt;&lt;minus/&gt;\n"
        "      &lt;apply&gt;&lt;times/&gt;\n"
        "        &lt;ci&gt;alpha_X&lt;/ci&gt;\n"
        "        &lt;apply&gt;&lt;minus/&gt;\n"
        "          &lt;cn cellml:units=\"dimensionless\"&gt;1&lt;/cn&gt;\n"
        "          &lt;ci&gt;X&lt;/ci&gt;\n"
        "        &lt;/apply&gt;\n" 
        "      &lt;/apply&gt;\n" 
        "      &lt;apply&gt;&lt;times/&gt;\n"
        "        &lt;ci&gt;beta_X&lt;/ci&gt;\n"
        "        &lt;ci&gt;X&lt;/ci&gt;\n"
        "      &lt;/apply&gt;\n" 
        "    &lt;/apply&gt;\n" 
        "  &lt;/apply&gt;\n"; 

    gateEquations-&gt;setMath(mathHeader);
    gateEquations-&gt;appendMath(equation);
    gateEquations-&gt;appendMath(mathFooter);

    //  2.d
    //      Print the model to the terminal and include the optional second argument of true
    //      to include the MathML.
    printModel(model, true);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  2.c 
    #  Add the mathematics to the gateEquations component.
    equation = \
        '  &lt;apply&gt;&lt;eq/&gt;\n'\
        '    &lt;apply&gt;&lt;diff/&gt;\n'\
        '      &lt;bvar&gt;&lt;ci&gt;t&lt;/ci&gt;&lt;/bvar&gt;\n'\
        '      &lt;ci&gt;X&lt;/ci&gt;\n'\
        '    &lt;/apply&gt;\n'\
        '    &lt;apply&gt;&lt;minus/&gt;\n'\
        '      &lt;apply&gt;&lt;times/&gt;\n'\
        '        &lt;ci&gt;alpha_X&lt;/ci&gt;\n'\
        '        &lt;apply&gt;&lt;minus/&gt;\n'\
        '          &lt;cn cellml:units="dimensionless"&gt;1&lt;/cn&gt;\n'\
        '          &lt;ci&gt;X&lt;/ci&gt;\n'\
        '        &lt;/apply&gt;\n'\
        '      &lt;/apply&gt;\n'\
        '      &lt;apply&gt;&lt;times/&gt;\n'\
        '        &lt;ci&gt;beta_X&lt;/ci&gt;\n'\
        '        &lt;ci&gt;X&lt;/ci&gt;\n'\
        '      &lt;/apply&gt;\n'\
        '    &lt;/apply&gt;\n'\
        '  &lt;/apply&gt;\n'

    gateEquations.setMath(math_header)
    gateEquations.appendMath(equation)
    gateEquations.appendMath(math_footer)

    #  2.d
    #      Print the model to the terminal using the print_model helper function and 
    #      check it is what you'd expect.  Include the second argument as True so that 
    #      the maths is included.
    print_model(model, True)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'GateModel'
UNITS: 0 custom units
COMPONENTS: 1 components
    [0]: gate
        VARIABLES: 0 variables
        COMPONENT gate has 1 child components:
            [0]: gateEquations
                VARIABLES: 0 variables
              Maths in the component is:
                &lt;math xmlns="http://www.w3.org/1998/Math/MathML" xmlns:cellml="http://www.cellml.org/cellml/2.0#"&gt;
                    &lt;apply&gt;&lt;eq/&gt;
                        &lt;apply&gt;&lt;diff/&gt;
                        &lt;bvar&gt;&lt;ci&gt;t&lt;/ci&gt;&lt;/bvar&gt;
                        &lt;ci&gt;X&lt;/ci&gt;
                        &lt;/apply&gt;
                        &lt;apply&gt;&lt;minus/&gt;
                        &lt;apply&gt;&lt;times/&gt;
                            &lt;ci&gt;alpha_X&lt;/ci&gt;
                            &lt;apply&gt;&lt;minus/&gt;
                            &lt;cn cellml:units="dimensionless"&gt;1&lt;/cn&gt;
                            &lt;ci&gt;X&lt;/ci&gt;
                            &lt;/apply&gt;
                        &lt;/apply&gt;
                        &lt;apply&gt;&lt;times/&gt;
                            &lt;ci&gt;beta_X&lt;/ci&gt;
                            &lt;ci&gt;X&lt;/ci&gt;
                        &lt;/apply&gt;
                        &lt;/apply&gt;
                    &lt;/apply&gt;
                &lt;/math&gt;</literal_block>
        </section>
        <section ids="step-3-validate-the-model" names="step\ 3:\ validate\ the\ model">
            <title>Step 3: Validate the model</title>
            <paragraph>Once the mathematics has been added to the component, and the component to the model, we can make use of the diagnostic messages within the <literal classes="code">Validator</literal> class to tell us what else needs to be done.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator">Validator class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=validateModel">validateModel</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=issueCount">issueCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Validator?fName=issue">issue</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue">Issue class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue?fName=description">description</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue?fName=url">url</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue?fName=referenceHeading">referenceHeading</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue?fName=level">level</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Issue?fName=itemType">itemType</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Create a <literal classes="code">Validator</literal> instance, and pass it your model for processing using the <literal classes="code">validateModel</literal> function.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  3.a 
    //      Create a Validator instance, and pass it your model for processing using the 
    //      validateModel function.  
    auto validator = libcellml::Validator::create();
    validator-&gt;validateModel(model);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  3.a 
    #      Create a Validator instance, and pass it your model for processing using the 
    #      validateModel function.  
    validator = Validator()
    validator.validateModel(model)

</literal_block>
            </container>
            <paragraph>Calling the validator does not return anything: we have to go looking for issues that it found during processing.</paragraph>
            <container classes="shortlist">
                <paragraph>When a problem is found, an <literal classes="code">Issue</literal> item is created containing:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>a description string explaining the problem;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a URL at which more information is available;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>an std::any item relevant to the problem, if available;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a level indicator; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a cause indicator relevant to the stored item.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>We can use these issues as we need to.
                The simplest way is to print the descriptions to the terminal.</paragraph>
            <container classes="useful">
                <paragraph>Two helper functions have been provided for this tutorial that will help printing the string equivalent of enumerated values to the terminal.
                    These are:</paragraph>
                <container classes="shortlist">
                    <paragraph><strong>C++</strong></paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal classes="code">getIssueLevelFromEnum</literal> ; and</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal classes="code">getCellmlElementTypeFromEnum</literal> .</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph><strong>Python</strong></paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal classes="code">get_issue_level_from_enum</literal> ; and</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal classes="code">get_cellml_element_type_from_enum</literal> .</paragraph>
                        </list_item>
                    </bullet_list>
                </container>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Retrieve the number of issues encountered using the <literal classes="code">issueCount</literal> function on the validator, then retrieve the issue items from the validator using their index and the <literal classes="code">issue(index)</literal> function.
                    Print the information from each issue to the terminal.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  3.b 
    //      Retrieve the number of issues encountered using the validator-&gt;issueCount() function,
    //      then retrieve the issue items from the validator using their index and the validator-&gt;issue(index)
    //      function.  Print the information from each issue to the terminal.
    std::cout &lt;&lt; "The validator has found " &lt;&lt; validator-&gt;issueCount() &lt;&lt; " issues." &lt;&lt; std::endl;
    for(size_t i = 0; i &lt; validator-&gt;issueCount(); ++i) {
        auto issue = validator-&gt;issue(i);
        std::cout &lt;&lt; "Issue " &lt;&lt; i &lt;&lt; ": " &lt;&lt; issue-&gt;description() &lt;&lt; std::endl;
        std::cout &lt;&lt; "  reference: "&lt;&lt; issue-&gt;referenceHeading() &lt;&lt; std::endl;
        std::cout &lt;&lt; "  see: " &lt;&lt; issue-&gt;url() &lt;&lt; std::endl;
        std::cout &lt;&lt; "  stored item type: " &lt;&lt; getCellmlElementTypeFromEnum(issue-&gt;cellmlElementType()) &lt;&lt; std::endl;
        std::cout &lt;&lt; std::endl;
    }

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  3.b 
    #      Retrieve the number of issues encountered using the validator.issueCount() function,
    #      then retrieve the issue items from the validator using their index and the validator.issue(index)
    #      function.  Print the information from each issue to the terminal.
    print('The validator has found {} issues.'.format(validator.issueCount()))
    for i in range(0, validator.issueCount()):
        issue = validator.issue(i)
        ref = issue.referenceHeading()
        print('Issue [{}] is {}:'.format(i, get_issue_level_from_enum(issue.level())))
        print('    description: {}'.format(issue.description()))
        if ref != '':
            print('    see section {} in the CellML specification.'.format(ref))
        print('    stored item type: {}'.format(get_cellml_element_type_from_enum(issue.cellmlElementType())))

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">The validator has found 6 issues.
Issue [0] is an ERROR:
    description: MathML ci element has the child text 't' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML
Issue [1] is an ERROR:
    description: MathML ci element has the child text 'X' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML
Issue [2] is an ERROR:
    description: MathML ci element has the child text 'alpha_X' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML
Issue [3] is an ERROR:
    description: MathML ci element has the child text 'X' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML
Issue [4] is an ERROR:
    description: MathML ci element has the child text 'beta_X' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML
Issue [5] is an ERROR:
    description: MathML ci element has the child text 'X' which does not correspond with any variable names present in component 'gateEquations'.
    see section 2.12.3 in the CellML specification.
    stored item type: MATHML</literal_block>
        </section>
        <section ids="step-4-add-the-variables" names="step\ 4:\ add\ the\ variables">
            <title>Step 4: Add the variables</title>
            <paragraph>The issues reported by the validator are related to the MathML string that we entered in Step 2 requiring variables which don’t yet exist.
                These must be created, named, and added to their parent component.</paragraph>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setUnits">setUnits</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=addVariable">addVariable</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Create <literal classes="code">Variable</literal> items whose names match those listed above.
                    Add these missing variables to the equations component.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  4.a 
    //      Create items for the missing variables and add them to the gateEquations component.
    //      You will need to be sure to give them names which match exactly those reported by the
    //      validator, or are present in the MathML string.  
    gateEquations-&gt;addVariable(libcellml::Variable::create("t"));
    gateEquations-&gt;addVariable(libcellml::Variable::create("alpha_X"));
    gateEquations-&gt;addVariable(libcellml::Variable::create("beta_X"));
    gateEquations-&gt;addVariable(libcellml::Variable::create("X"));

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  4.a 
    #      Create items for the missing variables and add them to the gateEquations component.
    #      You will need to be sure to give them names which match exactly those reported by the
    #      validator, or are present in the MathML string.  
    gateEquations.addVariable(Variable('t'))
    gateEquations.addVariable(Variable('alpha_X'))
    gateEquations.addVariable(Variable('beta_X'))
    gateEquations.addVariable(Variable('X'))

</literal_block>
            </container>
            <container classes="useful">
                <paragraph>Helper functions for retrieving and printing any issues from any of the logger classes:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal classes="code">printIssues</literal> (C++)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">print_issues</literal> (Python)</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>4.b</strong> Validate the model again.
                    Note that you can use the helper function <literal classes="code">printIssues</literal> with the validator as the argument to save repeating the code from 3.b each time.
                    Expect errors relating to missing units.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  4.b
    //      Validate again, and expect errors relating to missing units.
    //      Note that you can use the helper function printIssues(validator) to print your
    //      issues to the screen instead of repeating the code from 3.b.
    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  4.b
    #      Validate again, and expect errors relating to missing units.
    #      Note that you can use the helper function print_issues(validator) to print your
    #      issues to the screen instead of repeating the code from 3.b.
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Issue [0] is an ERROR:
    description: CellML identifiers must contain one or more basic Latin alphabetic characters.
    see section 1.3.1.1 in the CellML specification.
    stored item type: UNDEFINED
Issue [1] is an ERROR:
    description: Variable 't' in component 'gateEquations' does not have a valid units attribute. The attribute given is ''.
    see section 2.8.1.2 in the CellML specification.
    stored item type: VARIABLE
... etc ...</literal_block>
        </section>
        <section ids="step-5-add-the-units" names="step\ 5:\ add\ the\ units">
            <title>Step 5: Add the units</title>
            <paragraph>The validator has reported that the four variables are missing units attributes.
                In this example none of the units exist yet, so we need to create all of them.</paragraph>
            <container classes="shortlist">
                <paragraph>The variables’ units should be:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>t, time has units of <emphasis>milliseconds</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>X, gate status has units of <emphasis>dimensionless</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>alpha_X and beta_X, rates, have units of <emphasis>per millisecond</emphasis>.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units">Units class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=setName">setName</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=addUnit">addUnit</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Units?fName=name">name</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=addUnits">addUnits</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setUnits">setUnits</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=units">units</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.a</strong> Create two new <literal classes="code">Units</literal> items with names of “ms” and “per_ms”.
                    These will represent units of milliseconds and per millisecond respectively.</paragraph>
            </container>
            <paragraph>Some basic units have been defined and built into libCellML, others you can define by combining the built-in ones using scaling factors and exponents, or you can define your own from scratch if need be.
                Please read the <reference internal="True" refuri="../../asides/index#aside-units"><inline classes="std std-ref">Understanding units</inline></reference> page for more detailed information, but for now let’s look at a simple example that defines a <literal classes="code">Units</literal> item representing millivolts.</paragraph>
            <container classes="sphinx-tabs">
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>C++</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Declare, name, and define a millivolt units item.
auto mV = libcellml::Units::create("mV");

// The manner of specification here is agnostic: all three definitions are identical.
mV-&gt;addUnit("volt", "milli");  // reference unit, built-in prefix string
// OR
mV-&gt;addUnit("volt", -3);       // reference unit, prefix as an integer
// OR
mV-&gt;addUnit("volt", 1.0, 1, 0.001);  // reference unit, prefix, exponent, multiplier</literal_block>
                </container>
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>Python</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve">from libcellml import Units

# Declare, name, and define a millivolt units item.
mV = Units("mV")

# The manner of specification here is agnostic: all three definitions are identical.
mV.addUnit("second", "milli")   # reference unit and built-in prefix
# OR
mV.addUnit("second", -3)        # reference unit, prefix
# OR
mV.addUnit("second", 1, 1.0, 0.001)   # reference unit, prefix, exponent, multiplier</literal_block>
                </container>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.b</strong> Following the example above, define the units of millisecond and per millisecond by adding the appropriate unit items.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  5.a 
    //      Create the units which will be needed by your variables and add them to the model.
 
    auto ms = libcellml::Units::create("ms");
    auto per_ms = libcellml::Units::create("per_ms");
   
    //  5.b
    //      Add Unit items to the units you created to define them.
    ms-&gt;addUnit("second", "milli");
    per_ms-&gt;addUnit("second", "milli", -1);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  5.a 
    #      Create the units which will be needed by your variables and add them to the model.
    ms = Units('ms')
    per_ms = Units('per_ms')
   
    #  5.b
    #      Add Unit items to the units you created to define them.
    ms.addUnit('second', 'milli')
    per_ms.addUnit('second', 'milli', -1)

</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.c</strong> Add the units to the model (not the component) so that other components can make use of them too.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.d</strong> Use the <literal classes="code">setUnits</literal> function to associate the units you’ve created with the appropriate variables.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.e</strong> Validate again, and expect no errors.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>5.f</strong> Print the model to the terminal and check it’s what you’d expect.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  5.c
    //      Add the Units to the model (not the component) so that other components can make 
    //      use of them too.
    model-&gt;addUnits(ms);
    model-&gt;addUnits(per_ms);

    //  5.d
    //      Use the setUnits function to associate them with the appropriate variables.  
    gateEquations-&gt;variable("t")-&gt;setUnits(ms);
    gateEquations-&gt;variable("alpha_X")-&gt;setUnits(per_ms);
    gateEquations-&gt;variable("beta_X")-&gt;setUnits(per_ms);
    gateEquations-&gt;variable("X")-&gt;setUnits("dimensionless");

    //  5.e
    //      Validate again, and expect no errors.
    validator-&gt;validateModel(model);
    printIssues(validator);

    //  5.f
    //      Print the model to the terminal and include the optional second argument of true
    //      to include the MathML.
    printModel(model, true);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  5.c
    #      Add the Units to the model (not the component) so that other components can make 
    #      use of them too.
    model.addUnits(ms)
    model.addUnits(per_ms)

    #  5.d
    #      Use the setUnits function to associate them with the appropriate variables.  
    gateEquations.variable('t').setUnits(ms)
    gateEquations.variable('alpha_X').setUnits(per_ms)
    gateEquations.variable('beta_X').setUnits(per_ms)
    gateEquations.variable('X').setUnits('dimensionless')

    #  5.e
    #      Validate again, and expect no errors.
    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'GateModel'
UNITS: 2 custom units
    [0]: ms
    [1]: per_ms
COMPONENTS: 1 components
    [0]: gate
        VARIABLES: 0 variables
        COMPONENT gate has 1 child components:
            [0]: gateEquations
                VARIABLES: 4 variables
                    [0]: t [ms]
                    [1]: alpha_X [per_ms]
                    [2]: beta_X [per_ms]
                    [3]: X [dimensionless]</literal_block>
        </section>
        <section ids="step-6-analyse-the-mathematical-construction-of-the-model" names="step\ 6:\ analyse\ the\ mathematical\ construction\ of\ the\ model">
            <title>Step 6: Analyse the mathematical construction of the model</title>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser">Analyser class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser?fName=create">create</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser?fName=analyseModel">analyseModel</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser?fName=issueCount">issueCount</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Analyser?fName=issue">issue</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.a</strong> Create an <literal classes="code">Analyser</literal> item and submit the model for processing.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.b</strong> Just like the <literal classes="code">Validator</literal> class, the <literal classes="code">Analyser</literal> class keeps track of issues.
                    Retrieve these and print to the terminal using the same helper function as earlier.
                    Expect errors related to un-computed variables and missing initial values.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  6.a 
    //      Create an Analyser item and submit the model for processing. 
    auto analyser = libcellml::Analyser::create();
    analyser-&gt;analyseModel(model);

    //  6.b 
    //      Just like the Validator class, the Analyser class keeps track of issues. 
    //      Retrieve these and print to the terminal. Expect errors related to 
    //      un-computed variables and missing initial values.
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  6.a 
    #      Create an Analyser item and submit the model for processing. 
    analyser = Analyser()
    analyser.analyseModel(model)

    #  6.b 
    #      Just like the Validator class, the Analyser class keeps track of issues. 
    #      Retrieve these and print to the terminal. Expect errors related to 
    #      un-computed variables and missing initial values.
    print_issues(analyser)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 3 issues:
Issue [0] is an ERROR:
    description: Variable 'X' in component 'gateEquations' is used in an ODE, but it is not initialised.
    stored item type: VARIABLE
Issue [1] is an ERROR:
    description: Variable 'alpha_X' in component 'gateEquations' is not computed.
    stored item type: VARIABLE
Issue [2] is an ERROR:
    description: Variable 'beta_X' in component 'gateEquations' is not computed.
    stored item type: VARIABLE</literal_block>
            <paragraph>In order to avoid hard-coding values here, we will need to connect to external values to initialise the “X” variable and provide the value for “alpha_X” and “beta_X”.</paragraph>
            <container classes="shortlist">
                <paragraph>This means three things need to happen:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>we need to create an external component to hold variable values;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>we need to create external variables in that component;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>we need to specify the connections between variables; and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>we need to permit external connections on the variables.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <paragraph>This is the reason for the second internal component, the <emphasis>parameters</emphasis> component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>6.c</strong> Create a component which will store the hard-coded values for initialisation.
                    Name it “gateParameters”, and add it to the top-level gate component as a sibling of the gateEquations component.</paragraph>
            </container>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setInitialValue">setInitialValue</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=addEquivalence">addEquivalence</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component">Component class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Component?fName=variable">variable</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=component">component</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.d</strong> Create appropriate variables in this component, and set their units.
                    Use the <literal classes="code">setInitialValue</literal> function to initialise the variables.
                    <strong>TODO</strong> What values to give?</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  6.d 
    //      Create appropriate variables in this component, and set their units.
    //      Use the setInitialValue function to initialise them.
    auto X = libcellml::Variable::create("X");
    X-&gt;setUnits("dimensionless");
    X-&gt;setInitialValue(0);
    gateParameters-&gt;addVariable(X);

    auto alpha = libcellml::Variable::create("alpha");
    alpha-&gt;setUnits(per_ms);
    alpha-&gt;setInitialValue(0.1);
    gateParameters-&gt;addVariable(alpha);

    auto beta = libcellml::Variable::create("beta");
    beta-&gt;setUnits(per_ms);
    beta-&gt;setInitialValue(0.5);
    gateParameters-&gt;addVariable(beta);
    
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  6.d 
    #      Create appropriate variables in this component, and set their units.
    #      Use the setInitialValue function to initialise them.
    X = Variable('X')
    X.setUnits('dimensionless')
    X.setInitialValue(0)
    gateParameters.addVariable(X)

    alpha = Variable('alpha')
    alpha.setUnits(per_ms)
    alpha.setInitialValue(0.1)
    gateParameters.addVariable(alpha)

    beta = Variable('beta')
    beta.setUnits(per_ms)
    beta.setInitialValue(0.5)
    gateParameters.addVariable(beta)
    
</literal_block>
            </container>
            <paragraph>So far in this tutorial we’ve only been creating items, defining them, and adding to their parent items.
                Now for the first time we will need to retrieve a child item from its parent.
                This can be done in one of two ways: either by the child’s index or by its name.
                There is more information about interacting with collections of items on the <reference internal="True" refuri="../../howto/actions/understand_collections#understand-collections"><inline classes="std std-ref">Understanding collections of items</inline></reference> page.</paragraph>
            <paragraph>Two particularly useful idioms are shown below.</paragraph>
            <container classes="sphinx-tabs">
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>C++</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-Qysr active">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="c++" linenos="False" xml:space="preserve">// Retrieve Units named "myUnits" from a model and set as the units for a variable named "myVariable".
myVariable-&gt;setUnits(myModel-&gt;units("myUnits"));

// Retrieve a great-grandchild component by following the hierarchy of the encapsulation structure:
auto grandson = model-&gt;component("grandfather")-&gt;component("daddy")-&gt;component("son");

// Short-cut to retrieve the component with the given name from anywhere in the encapsulation hierarchy:
auto granddaughter = model-&gt;component("granddaughter", true);</literal_block>
                </container>
                <container>
                    <container classes="item">
                        <container>
                            <paragraph>Python</paragraph>
                        </container>
                    </container>
                    <container classes="ui bottom attached sphinx-tab tab segment code-tab sphinx-data-tab-UHl0aG9u">
                    </container>
                    <literal_block force="False" highlight_args="{}" language="py" linenos="False" xml:space="preserve"># Retrieve Units named "myUnits" from a model and set as the units for a variable named "myVariable".
myVariable.setUnits(myModel.units('myUnits'))

# Retrieve a great-grandchild component by following the hierarchy of the encapsulation structure:
grandson = model-&gt;component('grandfather')-&gt;component('daddy')-&gt;component('son');

# Short-cut to retrieve the component with the given name from anywhere in the encapsulation hierarchy:
granddaughter = model-&gt;component('granddaughter', True)</literal_block>
                </container>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.e</strong> Specify a variable equivalence between the gate equations variables and the parameter variables of the same name.
                    Validate the model again, expecting errors related to the variable interface types.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  6.e 
    //      Specify a variable equivalence between the gateEquations variables and the parameter variables.
    //      Validate the model again, expecting errors related to the variable interface types.
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("X"), gateParameters-&gt;variable("X"));
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("alpha_X"), gateParameters-&gt;variable("alpha"));
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("beta_X"), gateParameters-&gt;variable("beta"));

    validator-&gt;validateModel(model);
    printIssues(validator);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  6.e 
    #      Specify a variable equivalence between the gateEquations variables and the parameter variables.
    #      Validate the model again, expecting errors related to the variable interface types.
    Variable.addEquivalence(gateEquations.variable('X'), gateParameters.variable('X'))
    Variable.addEquivalence(gateEquations.variable('alpha_X'), gateParameters.variable('alpha'))
    Variable.addEquivalence(gateEquations.variable('beta_X'), gateParameters.variable('beta'))

    validator.validateModel(model)
    print_issues(validator)

</literal_block>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Recorded 6 issues:
Issue [0] is an ERROR:
    description: Variable 'alpha_X' in component 'gateEquations' has no interface type set. The interface type required is 'public'.
    see section 3.10.8 in the CellML specification.
    stored item type: VARIABLE
... etc ...</literal_block>
            <container classes="useful">
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model">Model class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Model?fName=fixVariableInterfaces">fixVariableInterfaces</reference></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable">Variable class</reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1Variable?fName=setInterfaceType">setInterfaceType</reference></paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.f</strong> Set the variable interface type according to the recommendation from the validator.
                    This can either be done individually using the <literal classes="code">setInterfaceType</literal> function on each variable, or en masse for all the model’s variable interfaces using its <literal classes="code">fixVariableInterfaces</literal> function.
                    Validate and analyse again, expecting no errors.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  6.e 
    //      Specify a variable equivalence between the gateEquations variables and the parameter variables.
    //      Validate the model again, expecting errors related to the variable interface types.
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("X"), gateParameters-&gt;variable("X"));
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("alpha_X"), gateParameters-&gt;variable("alpha"));
    libcellml::Variable::addEquivalence(gateEquations-&gt;variable("beta_X"), gateParameters-&gt;variable("beta"));

    validator-&gt;validateModel(model);
    printIssues(validator);

    //  6.f 
    //      Set the variable interface type according to the recommendation from the validator.
    //      This can either be done individually using the Variable::setInterfaceType() function, or 
    //      en masse for all the model's interfaces using the Model::fixVariableInterfaces() function.
    //      Validate and analyse again, expecting no errors. 
    model-&gt;fixVariableInterfaces();

    validator-&gt;validateModel(model);
    printIssues(validator);

    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  6.e 
    #      Specify a variable equivalence between the gateEquations variables and the parameter variables.
    #      Validate the model again, expecting errors related to the variable interface types.
    Variable.addEquivalence(gateEquations.variable('X'), gateParameters.variable('X'))
    Variable.addEquivalence(gateEquations.variable('alpha_X'), gateParameters.variable('alpha'))
    Variable.addEquivalence(gateEquations.variable('beta_X'), gateParameters.variable('beta'))

    validator.validateModel(model)
    print_issues(validator)

    #  6.f 
    #      Set the variable interface type according to the recommendation from the validator.
    #      This can either be done individually using the Variable::setInterfaceType() function, or 
    #      en masse for all the model's interfaces using the Model::fixVariableInterfaces() function.
    #      Validate and analyse again, expecting no errors. 
    model.fixVariableInterfaces()

    validator.validateModel(model)
    print_issues(validator)

    analyser.analyseModel(model)
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-7-sanity-check" names="step\ 7:\ sanity\ check">
            <title>Step 7: Sanity check</title>
            <container classes="useful">
                <paragraph>There’s a helper function provided for these tutorials which will print the model to the terminal.
                    Use <literal classes="code">printModel(Model, bool)</literal> (in C++) or <literal classes="code">print_model</literal> (in Python) function to print the contents of the given <literal classes="code">Model</literal>.
                    The second (optional) argument indicates whether or not to print the MathML strings in the components too.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>7.a</strong> Print the model to the terminal using the helper function.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">MODEL: 'GateModel'
UNITS: 2 custom units
    [0]: ms
    [1]: per_ms
COMPONENTS: 1 components
    [0]: gate
        VARIABLES: 0 variables
        COMPONENT gate has 2 child components:
            [0]: gateEquations
                VARIABLES: 4 variables
                    [0]: t [ms]
                    [1]: alpha_X [per_ms]
                          └──&gt; gateParameters:alpha [per_ms]
                    [2]: beta_X [per_ms]
                          └──&gt; gateParameters:beta [per_ms]
                    [3]: X [dimensionless]
                          └──&gt; gateParameters:X [dimensionless]
            [1]: gateParameters
                VARIABLES: 3 variables
                    [0]: X [dimensionless], initial = 0
                          └──&gt; gateEquations:X [dimensionless]
                    [1]: alpha [per_ms], initial = 0.1
                          └──&gt; gateEquations:alpha_X [per_ms]
                    [2]: beta [per_ms], initial = 0.5
                          └──&gt; gateEquations:beta_X [per_ms]</literal_block>
            <paragraph>Looking at the printout we see that the top-level component named “gate” has no variables.
                Even though this is clearly a valid situation (as proved by 6.f), it’s not going to make this model easy to reuse.
                We need to make sure that any input and output variables are also connected into the top-level gate component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>7.b</strong> Create intermediate variables for time, t and gate status, X in the gate component, and ensure they have a public and private interface to enable two-way connection.
                    You will also need to set a public and private connection onto t and X in the equations component too, or repeat the call to fix the model’s interfaces as in step 6.f.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  7.b
    //      Create intermediate variables for time t and gate status X in the gate component,
    //      and ensure they have a public and private interface to enable two-way connection.
    //      You may also need to set a public and private connection onto t and X in the
    //      equations component too.
    gate-&gt;addVariable(gateEquations-&gt;variable("t")-&gt;clone());
    gate-&gt;addVariable(gateEquations-&gt;variable("X")-&gt;clone());

    gate-&gt;variable("t")-&gt;setInterfaceType("public_and_private");
    gate-&gt;variable("X")-&gt;setInterfaceType("public_and_private");
    gateEquations-&gt;variable("t")-&gt;setInterfaceType("public_and_private");
    gateEquations-&gt;variable("X")-&gt;setInterfaceType("public_and_private");
    
</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  7.b
    gate.addVariable(gateEquations.variable('t').clone())
    gate.addVariable(gateEquations.variable('X').clone())

    gate.variable('t').setInterfaceType('public_and_private')
    gate.variable('X').setInterfaceType('public_and_private')
    gateEquations.variable('t').setInterfaceType('public_and_private')
    gateEquations.variable('X').setInterfaceType('public_and_private')
    
</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>7.c</strong> Connect the intermediate variables to their respective partners in the equations component, and recheck the model.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  7.c 
    //      Connect the intermediate variables to their respective partners in the equations
    //      component, and recheck the model.
    libcellml::Variable::addEquivalence(gate-&gt;variable("t"), gateEquations-&gt;variable("t"));
    libcellml::Variable::addEquivalence(gate-&gt;variable("X"), gateEquations-&gt;variable("X"));

    validator-&gt;validateModel(model);
    printIssues(validator);
    analyser-&gt;analyseModel(model);
    printIssues(analyser);

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  7.c 
    #      Connect the intermediate variables to their respective partners in the equations
    #      component, and recheck the model.
    Variable.addEquivalence(gate.variable('t'), gateEquations.variable('t'))
    Variable.addEquivalence(gate.variable('X'), gateEquations.variable('X'))

    validator.validateModel(model)
    print_issues(validator)
    analyser.analyseModel(model)
    print_issues(analyser)

</literal_block>
            </container>
        </section>
        <section ids="step-8-serialise-and-output-the-model" names="step\ 8:\ serialise\ and\ output\ the\ model">
            <title>Step 8: Serialise and output the model</title>
            <paragraph>The <literal classes="code">Printer</literal> class in libCellML takes the stored instance of a <literal classes="code">Model</literal> item and creates a string representing its serialisation into CellML code.</paragraph>
            <container classes="dothis">
                <paragraph><strong>8.a</strong> Create a <literal classes="code">Printer</literal> instance and use it to serialise the model into a string.
                    Write this string to a file called “GateModel.cellml”.</paragraph>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show C++ snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="c++" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.cpp" xml:space="preserve">    //  8.a 
    //      Create a Printer instance and use it to serialise the model.  This creates a string
    //      containing the CellML-formatted version of the model.  Write this to a file called
    //      "GateModel.cellml".
    auto printer = libcellml::Printer::create();
    std::ofstream outFile("GateModel.cellml");
    outFile &lt;&lt; printer-&gt;printModel(model);
    outFile.close();

    std::cout &lt;&lt; "The created model has been written to GateModel.cellml" &lt;&lt; std::endl;

</literal_block>
            </container>
            <container classes="toggle">
                <container classes="header">
                    <paragraph>Show Python snippet</paragraph>
                </container>
                <literal_block force="False" highlight_args="{'linenostart': 1}" language="python" linenos="False" source="/Users/kmoy001/libcellml/libcellml-tutorials/tutorials/hh_tutorial1/createGateModel_completed.py" xml:space="preserve">    #  8.a 
    #      Create a Printer instance and use it to serialise the model.  This creates a string
    #      containing the CellML-formatted version of the model.  Write this to a file called
    #     'GateModel.cellml'.
    printer = Printer()
    write_file = open('GateModel.cellml', 'w')
    write_file.write(printer.printModel(model))
    write_file.close()

    print('The created model has been written to GateModel.cellml')

</literal_block>
            </container>
        </section>
    </section>
</document>
