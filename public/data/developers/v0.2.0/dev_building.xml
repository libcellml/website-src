<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-src/docs/dev_building.rst">
    <target refid="dev-building"></target>
    <section ids="configuring-and-building-libcellml dev-building" names="configuring\ and\ building\ libcellml dev_building">
        <title refid="id9">Configuring and building libCellML</title>
        <paragraph>This document covers building libCellML from source.</paragraph>
        <paragraph>It is assumed that you already have the codebase downloaded and ready for building.
            If not, please see the <reference internal="True" refuri="dev_setup#dev-setup"><inline classes="std std-ref">Development Setup</inline></reference> page for instructions.</paragraph>
        <paragraph>The variable <literal classes="code">LIBCELLML_SRC</literal> shall be used to refer to the directory containing the <literal classes="code">LICENSE</literal> file for libCellML.</paragraph>
        <topic classes="contents" ids="contents" names="contents">
            <title>Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id9" refid="configuring-and-building-libcellml">Configuring and building libCellML</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id10" refid="configure-with-cmake">Configure with CMake</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id11" refid="command-line-linux-macos">Command line Linux, MacOS</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id12" refid="options">Options</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id13" refid="windows-command-line">Windows command line</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id14" refid="windows-cmake-gui">Windows CMake-GUI</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id15" refid="id1">Options</reference></paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id16" refid="troubleshooting">Troubleshooting</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id17" refid="policy-cmp0086-is-not-set">Policy CMP0086 is not set</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id18" refid="on-windows-without-python-debug-libraries">On Windows without Python debug libraries</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id19" refid="could-not-find-swig-missing-swig-dir-swig-executable">Could not find SWIG (missing: SWIG_DIR, SWIG_EXECUTABLE)</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id20" refid="could-not-find-sphinx-missing-sphinx-executable">Could NOT find Sphinx (missing: SPHINX_EXECUTABLE)</reference></paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id21" refid="build-the-library">Build the library</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id22" refid="build-from-the-command-line-linux-macos-or-windows">Build from the command line Linux, MacOS, or Windows</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id23" refid="build-in-windows-and-visual-studio">Build in Windows and Visual Studio</reference></paragraph>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><reference ids="id24" refid="fatal-error-cannot-open-include-file-python-h">Fatal error: Cannot open include file Python.h</reference></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference ids="id25" refid="cannot-access-xxx">Cannot access xxx</reference></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference ids="id26" refid="the-code-execution-cannot-proceed-because-libcellmld-dll-was-not-found">The code execution cannot proceed because libcellmld.dll was not found</reference></paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
        </topic>
        <paragraph>It is best to build libCellML outside of the source tree.
            To this end, create a build directory that is not the <literal classes="code">LIBCELLML_SRC</literal> directory.
            A sibling directory of <literal classes="code">LIBCELLML_SRC</literal> is a good choice, named something like <literal classes="code">build</literal> or <literal classes="code">libcellml-build</literal>.
            The variable <literal classes="code">LIBCELLML_BUILD</literal> is used to refer to this build directory.</paragraph>
        <section ids="configure-with-cmake" names="configure\ with\ cmake">
            <title refid="id10">Configure with CMake</title>
            <paragraph>The first step is to use <reference internal="False" refuri="https://cmake.org/">CMake</reference> to configure and generate build files for the libCellML library.
                Linux and MacOS use a command line interface, and under Windows there is an optional GUI.
                Note that CMake version 3.2 or later is required to configure libCellML.
                Instructions and information about installing CMake can be found in the <reference internal="True" refuri="dev_setup#dev-setup-cmake"><inline classes="std std-ref">Setup</inline></reference> section.</paragraph>
            <section ids="command-line-linux-macos" names="command\ line\ linux,\ macos">
                <title refid="id11">Command line Linux, MacOS</title>
                <paragraph>CMake can either be run through a simple text-based executable called <literal classes="code">ccmake</literal>, or through the command line directly.
                    There are instructions for both available from <reference internal="False" refuri="https://cmake.org//runningcmake/">CMake directly</reference>.
                    Building libCellML requires that you set the configuration parameters as in the table below.</paragraph>
            </section>
            <section dupnames="options" ids="options">
                <title refid="id12">Options</title>
                <paragraph>Some options are platform or tool dependent.
                    For example, MEMCHECK is only available if the valgrind tool is available.</paragraph>
                <table align="default">
                    <tgroup cols="3">
                        <colspec colwidth="24"></colspec>
                        <colspec colwidth="12"></colspec>
                        <colspec colwidth="43"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Config</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Default</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Description</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">BUILD_SHARED</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Build shared libraries (so, dylib, DLLs).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">BUILD_TYPE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Release</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The type of build Release, Debug, etc.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">COMPILER_CACHE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Enable compiler cache (if available).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">COVERAGE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Enable coverage testing (if available).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">INSTALL_PREFIX</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>/usr/lib</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Install path prefix (platform specific).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">MEMCHECK</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Enable memcheck testing (if available).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">TWAE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Treat warnings as errors.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">UNIT_TESTS</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Enable tests.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <comment xml:space="preserve">note In CMake GUI Configuration applications the config variable is prefixed with 'LIBCELLML\_'</comment>
                <comment xml:space="preserve">================================== ============== =========================================</comment>
                <comment xml:space="preserve">GUI Config                         CLI Config     Description</comment>
                <comment xml:space="preserve">================================== ============== =========================================</comment>
                <comment xml:space="preserve">LIBCELLML_BUILD_SHARED             BUILD_SHARED   Build shared libraries (so, dylib, DLLs).</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELLML_BUILD_TYPE               BUILD_TYPE     The type of build Release, Debug, etc.</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELML_COMPILER_CACHE            COMPILER_CACHE Enable compiler cache (if available).</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELML_COVERAGE                  COVERAGE       Enable coverage testing (if available).</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELLML_INSTALL_PREFIX           INSTALL_PREFIX Install path prefix.</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELLML_MEMCHECK                 MEMCHECK       Enable memcheck testing (if available).</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELLML_TREAT_WARNINGS_AS_ERRORS TWAE           Treat warnings as errors.</comment>
                <comment xml:space="preserve">---------------------------------- -------------- -----------------------------------------</comment>
                <comment xml:space="preserve">LIBCELLML_UNIT_TESTS               UNIT_TESTS     Enable tests.</comment>
                <comment xml:space="preserve">================================== ============== =========================================</comment>
                <paragraph>The command line options can be set with the <literal classes="code">-D</literal> flag, like so <literal classes="code">-DBUILD_TYPE Release</literal>.
                    From the command line (bash shell), libCellML can be configured to create an optimised shared object library like so:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd $LIBCELLML_BUILD
cmake -DBUILD_TYPERelease $LIBCELLML_SRC</literal_block>
            </section>
            <section ids="windows-command-line" names="windows\ command\ line">
                <title refid="id13">Windows command line</title>
                <paragraph>Note that CMake is also available on Windows as a GUI (instructions below).
                    This section describes how to use CMake on Windows directly from the command line.
                    Instructions for running CMake through the command line can be found on the <reference internal="False" refuri="https://cmake.org//runningcmake/">CMake site</reference> under the heading “Running CMake from the command line”.</paragraph>
                <paragraph>For Windows only the location of the libXML2 library must be specified through the command line by adding the parameter:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">-DLibXml2_DIR "C:\Program Files\libxml2 2.9.6\lib\cmake"</literal_block>
                <paragraph>to the configuration command.
                    This library is built into Linux and MacOS systems, so this step is only needed on Windows.</paragraph>
                <paragraph>This assumes that the recommended LibXml2 binaries have been installed to the default location <literal classes="code">C:\Program Files\libxml2 2.9.6</literal>.
                    Please note that libCellML will only work with a 64-bit installation of libXML2.
                    A pre-built 64-bit installer is available from the <reference internal="False" refuri="https://github.com/OpenCMISS-Dependencies/libxml2/releases">OpenCMISS repository</reference> ; 32-bit binaries or 32-bit builds will not work with libCellML.</paragraph>
            </section>
            <section ids="windows-cmake-gui" names="windows\ cmake-gui">
                <title refid="id14">Windows CMake-GUI</title>
                <paragraph>The CMake-GUI gives slightly different options - chief among these being that the config variables are prefixed with <literal classes="code">LIBCELLML_</literal>.
                    Also, in Windows note that neither <literal classes="code">MEMCHECK</literal> nor <literal classes="code">COVERAGE</literal> testing options are available.</paragraph>
            </section>
            <section dupnames="options" ids="id1">
                <title refid="id15">Options</title>
                <table align="default">
                    <tgroup cols="3">
                        <colspec colwidth="43"></colspec>
                        <colspec colwidth="15"></colspec>
                        <colspec colwidth="41"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>Config</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Default</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Description</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">LIBCELLML_BUILD_TYPE</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Release</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The type of build Release, Debug etc</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">LIBCELLML_BUILD_SHARED</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Build shared libraries (so, dylib, DLLs)</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">LIBCELLML_TREAT_WARNINGS_AS_ERRORS</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Treat warnings as errors</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">INSTALL_PREFIX</literal></paragraph>
                                </entry>
                                <entry>
                                </entry>
                                <entry>
                                    <paragraph>Install path prefix</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">UNIT_TESTS</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ON</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Enable tests</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal classes="code">LibXml2_DIR</literal></paragraph>
                                </entry>
                                <entry>
                                </entry>
                                <entry>
                                    <paragraph>Path to the cmake directory within your
                                        installation directory for libXML2</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>As with any CMake session we first set the location of the source files (your <literal classes="code">LIBCELLML_SRC</literal> directory) and a location for the generated build files (your <literal classes="code">LIBCELLML_BUILD</literal> directory).
                    Don’t worry about setting the options at this stage, you can just push <emphasis>Configure</emphasis> and CMake will try and find what it needs.
                    You can edit anything you need to in the next step.</paragraph>
                <target refid="fig-devbuilding-windowscmakeguisourcebuilddirs"></target>
                <figure align="center" ids="id2 fig-devbuilding-windowscmakeguisourcebuilddirs" names="fig_devbuilding_windowscmakeguisourcebuilddirs">
                    <image alt="CMake-GUI with initial values for source and build directories set." candidates="{'*': './images/libCellMLBuilding-CMakeGUISourceBuildDirs.png'}" uri="./images/libCellMLBuilding-CMakeGUISourceBuildDirs.png"></image>
                    <caption>CMake-GUI with source and build directories set for user <emphasis>andre</emphasis>.</caption>
                </figure>
                <paragraph>After the initial configuration attempt, CMake lists any <emphasis>changed</emphasis> values in red.
                    This done not mean that there’s anything wrong with them!
                    If CMake does not find the entries in the table above you will need to enter them manually and push the <emphasis>Configure</emphasis> button again.
                    To find out what’s missing, read the output from the configuration step.
                    Some common messages and their required actions are listed below.</paragraph>
                <target refid="fig-devbuilding-windowscmakeguiinitialconfigureattempt"></target>
                <figure align="center" ids="id3 fig-devbuilding-windowscmakeguiinitialconfigureattempt" names="fig_devbuilding_windowscmakeguiinitialconfigureattempt">
                    <image alt="CMake-GUI with initial values shown in red." candidates="{'*': './images/libCellMLBuilding-CMakeOptionsInRed.png'}" uri="./images/libCellMLBuilding-CMakeOptionsInRed.png"></image>
                    <caption>CMake-GUI with initial values shown in red.</caption>
                </figure>
                <paragraph>The first time you push the <emphasis>Configure</emphasis> button you will probably encounter an error like the one shown below.</paragraph>
                <target refid="fig-devbuilding-windowscmakeconfigurationerror"></target>
                <figure align="center" ids="id4 fig-devbuilding-windowscmakeconfigurationerror" names="fig_devbuilding_windowscmakeconfigurationerror">
                    <image alt="CMake-GUI on Windows showing configuration error after initial configuration attempt." candidates="{'*': './images/libCellMLBuilding-CMakeWindowsConfigurationError.png'}" uri="./images/libCellMLBuilding-CMakeWindowsConfigurationError.png"></image>
                    <caption>CMake-GUI showing configuration error after initial configuration attempt.</caption>
                </figure>
                <paragraph>To fix the issue, check that:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>you have installed libXML2 according to the directions on the <reference internal="True" refuri="dev_setup#dev-setup"><inline classes="std std-ref">Setup page</inline></reference>;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>there is a variable called <literal classes="code">LibXml2_DIR</literal> listed in your CMake variables (use the <emphasis>Add entry</emphasis> button to create it if not);</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>that the path specified in the <literal classes="code">LibXml2_DIR</literal> variable points to the <literal classes="code">cmake</literal> directory inside your libXML2 installation;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>that your installed version is 64-bit.</paragraph>
                    </list_item>
                </bullet_list>
                <container classes="nb">
                    <paragraph>If after pushing the <emphasis>Configure</emphasis> button your path to the LibXml2 directory is lost, make sure that your LibXml2 is the required 64-bit version.
                        If CMake finds a 32-bit version in the location specified, it just ignores it and continues to return the “unfound” error.</paragraph>
                </container>
                <paragraph>Once you’ve checked and set this path, push <emphasis>Configure</emphasis> again.
                    The configuration process should run successfully now, but there may be a few extra things you need to check before proceeding to generate the build files.
                    These are listed below.</paragraph>
            </section>
        </section>
        <section ids="troubleshooting" names="troubleshooting">
            <title refid="id16">Troubleshooting</title>
            <section ids="policy-cmp0086-is-not-set" names="policy\ cmp0086\ is\ not\ set">
                <title refid="id17">Policy CMP0086 is not set</title>
                <paragraph>Despite being in red and repeated multiple times, this is a warning which can safely be ignored.
                    It’s caused by a version mis-match between SWIG and libCellML and will be addressed in the next release.</paragraph>
                <target refid="fig-devbuilding-libcellml-cmp0086"></target>
                <figure align="center" ids="id5 fig-devbuilding-libcellml-cmp0086" names="fig_devbuilding_libcellml_cmp0086">
                    <image alt="CMake-GUI on Windows shows CMP0086 error." candidates="{'*': './images/libCellMLBuilding-PolicyCMP0086Error.png'}" uri="./images/libCellMLBuilding-PolicyCMP0086Error.png"></image>
                    <caption>CMake-GUI showing CMP0086 error.</caption>
                </figure>
            </section>
            <section ids="on-windows-without-python-debug-libraries" names="on\ windows\ without\ python\ debug\ libraries">
                <title refid="id18">On Windows without Python debug libraries</title>
                <paragraph>Even if CMake reports that it has found Python at the beginning of its configuration output, it may still report that it has not found the debug library later on.
                    To address this you need to manually set the location of the Python library using the <literal classes="code">PYTHON_DEBUG_LIBRARY</literal> flag.
                    This can be done through the interface by clicking the <emphasis>Add entry</emphasis> button, entering <literal classes="code">PYTHON_DEBUG_LIBRARY</literal> in the Name field, and selecting <literal classes="code">FILEPATH</literal> in the Option field.
                    Then simply browse to find the file in your Python installation called something like <literal classes="code">python35_d.lib</literal> (for Python3.5), probably in the <literal classes="code">libs</literal> directory of your Python folder.</paragraph>
                <target refid="fig-devbuilding-pythondebuglibrary"></target>
                <figure align="center" ids="id6 fig-devbuilding-pythondebuglibrary" names="fig_devbuilding_pythondebuglibrary">
                    <image alt="Set the location of the debug library" candidates="{'*': './images/libCellMLBuilding-PythonDebugLibrary.png'}" uri="./images/libCellMLBuilding-PythonDebugLibrary.png"></image>
                    <caption>Set the location of the debug library using the <literal classes="code">PYTHON_DEBUG_LIBRARY</literal> tag</caption>
                </figure>
            </section>
            <section ids="could-not-find-swig-missing-swig-dir-swig-executable" names="could\ not\ find\ swig\ (missing:\ swig_dir,\ swig_executable)">
                <title refid="id19">Could not find SWIG (missing: SWIG_DIR, SWIG_EXECUTABLE)</title>
                <paragraph>SWIG is go-between software used by libCellML to generate bindings for Python and other languages.
                    If you have the CMake option <literal classes="code">LIBCELLML_BINDINGS_PYTHON</literal> set to <literal classes="code">true</literal> then SWIG is required.
                    Follow the instructions for <reference internal="True" refuri="dev_setup#dev-setup-swig"><inline classes="std std-ref">setting up SWIG</inline></reference>.
                    You may need to restart your computer after installation, and then re-launch CMake.</paragraph>
            </section>
            <section ids="could-not-find-sphinx-missing-sphinx-executable" names="could\ not\ find\ sphinx\ (missing:\ sphinx_executable)">
                <title refid="id20">Could NOT find Sphinx (missing: SPHINX_EXECUTABLE)</title>
                <paragraph><reference name="Sphinx" refuri="http://www.sphinx-doc.org/en/master/">Sphinx</reference><target ids="sphinx" names="sphinx" refuri="http://www.sphinx-doc.org/en/master/"></target> is a documentation generator used by libCellML to collect documentation on Python bindings, which requires Python 3.5.2 or later in order to run.
                    Please see the installation instructions on the <reference name="installation page" refuri="http://www.sphinx-doc.org/en/master/usage/installation.html">installation page</reference><target ids="installation-page" names="installation\ page" refuri="http://www.sphinx-doc.org/en/master/usage/installation.html"></target> and then restart CMake.
                    If you do not need to generate bindings for Python then simply un-tick the CMake option <literal classes="code">LIBCELLML_BINDINGS_PYTHON</literal>, and push <emphasis>Configure</emphasis> again.</paragraph>
            </section>
        </section>
        <section ids="build-the-library" names="build\ the\ library">
            <title refid="id21">Build the library</title>
            <paragraph>Once the build scripts have been generated by CMake as above, it’s time to build the library.</paragraph>
            <section ids="build-from-the-command-line-linux-macos-or-windows" names="build\ from\ the\ command\ line\ linux,\ macos,\ or\ windows">
                <title refid="id22">Build from the command line Linux, MacOS, or Windows</title>
                <paragraph>For <literal classes="code">Makefile</literal>-based configurations, the command is simply:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make</literal_block>
                <paragraph>If testing is enabled, run the tests using the test target:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make test</literal_block>
                <paragraph>or using the <reference name="ctest" refuri="https://cmake.org/cmake/help/latest/manual/ctest.1.html">ctest</reference><target ids="ctest" names="ctest" refuri="https://cmake.org/cmake/help/latest/manual/ctest.1.html"></target> application:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">ctest</literal_block>
                <paragraph>For a more verbose output, run:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">ctest -V</literal_block>
            </section>
            <section ids="build-in-windows-and-visual-studio" names="build\ in\ windows\ and\ visual\ studio">
                <title refid="id23">Build in Windows and Visual Studio</title>
                <paragraph>Once you have used CMake to configure and generate your project files, either push the <emphasis>Open Project</emphasis> button to launch the project, or locate and open the solution <literal classes="code">*.sln</literal> file inside your build folder. You should see the collection of projects which make up the libCellML library listed.  Just use the build menus as normal to compile, link and build them.  Some issues and their solutions are listed below.</paragraph>
                <section ids="fatal-error-cannot-open-include-file-python-h" names="fatal\ error:\ cannot\ open\ include\ file\ python.h">
                    <title refid="id24">Fatal error: Cannot open include file Python.h</title>
                    <paragraph>If you’ve included Python bindings in your CMake configuration, but get this error in Visual Studio at build time, it’s because the path to the Python installation was not set correctly in the CMake step.  Re-running the CMake configuration with a manually-specified path to the Python installation will solve the problem.  See <title_reference>ERROR: On Windows without Python debug libaries</title_reference> for instructions.</paragraph>
                </section>
                <section ids="cannot-access-xxx" names="cannot\ access\ xxx">
                    <title refid="id25">Cannot access xxx</title>
                    <paragraph>This is probably a permissions error related to the locations of your libraries or your <literal classes="code">LIBCELLML_BUILD</literal> directory.
                        You could launch Visual Studio as an administrator by right-clicking on its icon in the Start Menu (see below), or create your <literal classes="code">LIBCELLML_BUILD</literal> directory somewhere your user has default permission to access.</paragraph>
                    <target refid="fig-devbuilding-runasadministrator"></target>
                    <figure align="center" ids="id7 fig-devbuilding-runasadministrator" names="fig_devbuilding_runasadministrator">
                        <image alt='Right-click the VS icon in your start menu and select "Run as administrator"' candidates="{'*': './images/libCellMLBuilding-WindowsRunAsAdmin.png'}" uri="./images/libCellMLBuilding-WindowsRunAsAdmin.png"></image>
                        <caption>Right-click the VS icon in your start menu and select “Run as administrator”</caption>
                    </figure>
                </section>
                <section ids="the-code-execution-cannot-proceed-because-libcellmld-dll-was-not-found" names="the\ code\ execution\ cannot\ proceed\ because\ libcellmld.dll\ was\ not\ found">
                    <title refid="id26">The code execution cannot proceed because libcellmld.dll was not found</title>
                    <target refid="fig-devbuilding-dllnotfound"></target>
                    <figure align="center" ids="id8 fig-devbuilding-dllnotfound" names="fig_devbuilding_dllnotfound">
                        <image alt="System error when dll is not found." candidates="{'*': './images/libCellMLBuilding-dllNotFound.png'}" uri="./images/libCellMLBuilding-dllNotFound.png"></image>
                        <caption>System error when dll is not found.</caption>
                    </figure>
                    <paragraph>You need to add location of the file(s) to the environment path of the project.
                        To do this, right-click the project and open the Properties editor.
                        Under the menu Configuration Properties &gt; Debugging &gt; Environment click the Edit button, and add the path to your libcellmldl.dll file.  You should find this file in your build directory in the <literal classes="code">\src\Debug</literal> folder.</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>The statement should begin with <literal classes="code">PATH</literal> and then contain a list of semicolon-separated directories.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The statement should end with <literal classes="code">%PATH%</literal> in order to include elements included from elsewhere.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term>Note that if your path contains spaces you must surround it with double quotation marks, eg:</term>
                                    <definition>
                                        <paragraph><literal classes="code">"C:\My path\has\a\space";</literal> compared to <literal classes="code">C:\My_path\has\no\spaces;</literal></paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph>Note that the end of each path item must be a folder name (not a slash) and terminated with a semi-colon.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>You may need to repeat this process for the <literal classes="code">gtest.dll</literal> and <literal classes="code">gtest_main.dll</literal> files as well.
                        These are found in your build directory, under <literal classes="code">tests\gtest\Debug</literal> or similar.</paragraph>
                </section>
            </section>
        </section>
    </section>
</document>
