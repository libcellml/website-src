<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-src/docs/dev_coding_standards.rst">
    <target refid="dev-coding-standards"></target>
    <section ids="coding-standards dev-coding-standards" names="coding\ standards dev_coding_standards">
        <title>Coding standards</title>
        <paragraph>The coding standard for libCellML follows that specified in the <reference internal="False" refuri="https://google.github.io/styleguide/cppguide.html">Google C++ Style Guide</reference>, but it does not have to be followed to the letter; <reference internal="False" refuri="https://www.linkedin.com/pulse/20140503193653-3046051-why-google-style-guide-for-c-is-a-deal-breaker">other people</reference> have not so positive opinions about the quality of the Google style guide.
            The coding standard in use for libCellML is in evidence in the code itself.
            New code should be consistent with what is already there.</paragraph>
        <paragraph>In essence, we seek code that looks good, is easy-to-read and has great documentation, and - most importantly - does what it promises to do.
            We do not want to spend time discussing the minutiae of the coding style.</paragraph>
        <paragraph>The following is a list of exceptions/deviations from the Google style guide that have been agreed upon for libCellML software development purposes.</paragraph>
        <block_quote>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference internal="False" refuri="https://en.wikipedia.org/wiki/Camel_case">Lower camelCase</reference> class method names.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Indent core code four spaces at a time (no tabs); for CMake files use two space indentation.</paragraph>
                </list_item>
            </bullet_list>
        </block_quote>
        <section ids="doxygen-comments" names="doxygen\ comments">
            <title>Doxygen comments</title>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Code-words (e.g. <literal classes="code">true</literal>/<title_reference>false</title_reference>, <literal classes="code">std::string</literal>) should be styled as typewriter text with a preceding <literal classes="code">@c</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Doxygen comments should be sentence-style: beginning with capitalisation (except code-words) and ending with punctuation.
                            However, they do not need to form grammatically correct sentences.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
        <section ids="test-naming" names="test\ naming">
            <title>Test naming</title>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Names should respect the lower camel case convention.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Names should be explicit enough to identify the specific code features they cover.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
        <section ids="variable-naming" names="variable\ naming">
            <title>Variable naming</title>
            <paragraph><strong>TODO</strong> This makes no sense â€¦ !!</paragraph>
            <paragraph>The following rules for naming of variables should be followed.</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Class member variables: <literal classes="code">mMyClassMemberVariable</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Function parameter variables: <literal classes="code">myFunctionParameterVariable</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Local variables: <literal classes="code">myLocalVariable</literal>.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
    </section>
</document>
