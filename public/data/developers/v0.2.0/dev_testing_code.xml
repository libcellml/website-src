<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-src/docs/dev_testing_code.rst">
    <target refid="dev-testing"></target>
    <section ids="testing-libcellml dev-testing" names="testing\ libcellml dev_testing">
        <title>Testing libCellML</title>
        <paragraph>Every pull request against the libCellML prime repository is tested as a matter of course, but there might be times when youâ€™d like to test your own code without making a pull request.
            There are two ways you can do this.</paragraph>
        <section ids="using-the-buildbot-site" names="using\ the\ buildbot\ site">
            <title>Using the Buildbot site</title>
            <paragraph><reference internal="False" refuri="https://buildbot.net/">Buildbot</reference> has the capacity to build a libCellML compliant repository through the use of a <reference internal="False" refuri="http://docs.buildbot.net/latest/developer/cls-forcesched.html">ForceScheduler</reference> .
                To make use of this facility, you will need to authenticate with the <reference internal="False" refuri="https://buildbot.net/">Buildbot</reference> system.
                Access granted on request to David Nickerson <reference refuri="mailto:d.nickerson@auckland.ac.nz">d.nickerson@auckland.ac.nz</reference>.
                The <reference internal="False" refuri="https://buildbot.net/">Buildbot</reference> system uses MD5 encrypted passwords as created by <reference internal="False" refuri="https://httpd.apache.org/docs/current/programs/htpasswd.html">htpasswd</reference>.
                With your request to David include the output of this command:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">htpasswd -n &lt;your-chosen-username&gt;</literal_block>
            <paragraph>The website <reference refuri="http://www.htaccesstools.com/htpasswd-generator/">http://www.htaccesstools.com/htpasswd-generator/</reference> can be used if you do not have access to the htpasswd application.
                When your request has been dealt with, you will be able to login to <reference internal="False" refuri="https://autotest.bioeng.auckland.ac.nz/buildbot/libcellml/#/builders">libCellML Buildbot</reference> and submit code for testing.</paragraph>
        </section>
        <section ids="manually-on-your-local-computer" names="manually\ on\ your\ local\ computer">
            <title>Manually on your local computer</title>
            <paragraph>When your libCellML has built successfully, and with tests included, executables for the tests will be located in the <literal classes="code">build/test</literal> directory where your library has been built.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term><strong>Unit tests</strong> Run all of the unit tests using <literal classes="code">make test</literal>.</term>
                            <definition>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>Individual C++ unit tests may be run by locating the test executable within the <literal classes="code">tests/</literal>, directory.
                                            Unit tests for a given class are named <literal classes="code">test_classname</literal>, where <literal classes="code">classname</literal> is the lowercase name of the class to test.
                                            These files are executable, so can be run from the command line <literal classes="code">tests/test_classname</literal>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>To run individual Python tests, navigate first into the <literal classes="code">tests/bindings/python/</literal> directory.
                                            The test files can then be run individually as needed using <literal classes="code">python test_classname.py</literal>, where <literal classes="code">classname</literal> is the lowercase name of the class to test.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
                <list_item>
                    <paragraph><strong>Coverage tests</strong> Coverage tests make sure that each line of code is covered by one or more unit tests.
                        - A summary of coverage of the C++ code is accessible through <literal classes="code">make llvm_coverage</literal>, which result in statistics of line coverage.
                        - For detailed information regarding specific lines in each file that need test coverage, use the command <strong>TODO</strong>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Formatting tests</strong> Check that the code is correctly formatted using the <literal classes="code">make test_clang_format</literal>, if you have CLang installed.
                        <strong>TODO</strong> Check what other OS use?</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Memory tests</strong> TODO</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
